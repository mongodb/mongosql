variables:
  comparisonValidTypes: &comparisonValidTypes
    - { "arg1": ["STRING", "NULL"], "arg2": ["STRING", "NULL"] }
    - { "arg1": ["DOCUMENT", "NULL"], "arg2": ["DOCUMENT", "NULL"] }
    - { "arg1": ["ARRAY", "NULL"], "arg2": ["ARRAY", "NULL"] }
    - { "arg1": ["BINDATA", "NULL"], "arg2": ["BINDATA", "NULL"] }
    - { "arg1": ["UNDEFINED", "NULL"], "arg2": ["UNDEFINED", "NULL"] }
    - { "arg1": ["OBJECTID", "NULL"], "arg2": ["OBJECTID", "NULL"] }
    - { "arg1": ["BOOL", "NULL"], "arg2": ["BOOL", "NULL"] }
    - { "arg1": ["BSON_DATE", "NULL"], "arg2": ["BSON_DATE", "NULL"] }
    - { "arg1": ["NULL"], "arg2": ["NULL"] }
    - { "arg1": ["REGEX", "NULL"], "arg2": ["REGEX", "NULL"] }
    - { "arg1": ["DBPOINTER", "NULL"], "arg2": ["NULL"] }
    - { "arg1": ["NULL"], "arg2": ["DBPOINTER", "NULL"] }
    - { "arg1": ["JAVASCRIPT", "NULL"], "arg2": ["NULL"] }
    - { "arg1": ["NULL"], "arg2": ["JAVASCRIPT", "NULL"] }
    - { "arg1": ["SYMBOL", "NULL"], "arg2": ["SYMBOL", "NULL"] }
    - { "arg1": ["JAVASCRIPTWITHSCOPE", "NULL"], "arg2": ["NULL"] }
    - { "arg1": ["NULL"], "arg2": ["JAVASCRIPTWITHSCOPE", "NULL"] }
    - { "arg1": ["BSON_TIMESTAMP", "NULL"], "arg2": ["BSON_TIMESTAMP", "NULL"] }
    - { "arg1": ["MINKEY", "NULL"], "arg2": ["MINKEY", "NULL"] }
    - { "arg1": ["MAXKEY", "NULL"], "arg2": ["MAXKEY", "NULL"] }
    - { "arg1": ["INT", "LONG", "DOUBLE", "DECIMAL", "NULL"], "arg2": ["INT", "LONG", "DOUBLE", "DECIMAL", "NULL"] }

tests:
  - description: eq ANY must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 = ANY(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: neq ANY must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 <> ANY(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: gt ANY must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 > ANY(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: gte ANY must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 >= ANY(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: lt ANY must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 < ANY(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: lte ANY must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 <= ANY(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: eq ALL must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 = ALL(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: neq ALL must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 <> ALL(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: gt ALL must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 > ALL(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: gte ALL must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 >= ALL(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: lt ALL must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 < ALL(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes

  - description: lte ALL must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT * FROM foo WHERE arg1 <= ALL(SELECT arg2 FROM bar)"
    valid_types: *comparisonValidTypes
