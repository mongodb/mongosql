variables:
  bson_date: &bson_date ["BSON_DATE", "NULL"]
  string: &string ["STRING", "NULL"]
  int: &int ["INT", "NULL"]
  int_long: &int_long ["INT", "LONG", "NULL"]
  numerics: &numerics ["INT", "LONG", "DOUBLE", "DECIMAL", "NULL"]
  comparisonValidTypes: &comparisonValidTypes
    - { "arg1": *string, "arg2": *string }
    - { "arg1": [ "DOCUMENT", "NULL" ], "arg2": [ "DOCUMENT", "NULL" ] }
    - { "arg1": [ "ARRAY", "NULL" ], "arg2": [ "ARRAY", "NULL" ] }
    - { "arg1": [ "BINDATA", "NULL" ], "arg2": [ "BINDATA", "NULL" ] }
    - { "arg1": [ "UNDEFINED", "NULL" ], "arg2": [ "UNDEFINED", "NULL" ] }
    - { "arg1": [ "OBJECTID", "NULL" ], "arg2": [ "OBJECTID", "NULL" ] }
    - { "arg1": ["BOOL", "NULL"], "arg2": ["BOOL", "NULL"] }
    - { "arg1": *bson_date, "arg2": *bson_date }
    - { "arg1": [ "NULL" ], "arg2": [ "NULL" ] }
    - { "arg1": [ "REGEX", "NULL" ], "arg2": [ "REGEX", "NULL" ] }
    - { "arg1": [ "DBPOINTER", "NULL" ], "arg2": [ "NULL" ] }
    - { "arg1": [ "NULL" ], "arg2": [ "DBPOINTER", "NULL" ] }
    - { "arg1": [ "JAVASCRIPT", "NULL" ], "arg2": [ "NULL" ] }
    - { "arg1": [ "NULL" ], "arg2": [ "JAVASCRIPT", "NULL" ] }
    - { "arg1": [ "SYMBOL", "NULL" ], "arg2": [ "SYMBOL", "NULL" ] }
    - { "arg1": [ "JAVASCRIPTWITHSCOPE", "NULL" ], "arg2": [ "NULL" ] }
    - { "arg1": [ "NULL" ], "arg2": [ "JAVASCRIPTWITHSCOPE", "NULL" ] }
    - { "arg1": [ "BSON_TIMESTAMP", "NULL" ], "arg2": [ "BSON_TIMESTAMP", "NULL" ] }
    - { "arg1": [ "MINKEY", "NULL" ], "arg2": [ "MINKEY", "NULL" ] }
    - { "arg1": [ "MAXKEY", "NULL" ], "arg2": [ "MAXKEY", "NULL" ] }
    - { "arg1": *numerics, "arg2": *numerics }

tests:
  - description: NULLIF operands must have comparable types (NULL and MISSING are always allowed)
    query: "SELECT NULLIF(arg1, arg2) FROM foo"
    valid_types: *comparisonValidTypes

  - description: SIZE operand must have type ARRAY or NULL, or be MISSING
    query: "SELECT SIZE(arg1) FROM foo"
    valid_types:
      - { "arg1": ["ARRAY", "NULL"] }

  - description: POSITION operands must have type STRING or NULL, or be MISSING
    query: "SELECT POSITION(arg1 IN arg2) FROM foo"
    valid_types:
      - { "arg1": *string, "arg2": *string }

  - description: CHAR_LENGTH operand must have type STRING or NULL, or be MISSING
    query: "SELECT CHAR_LENGTH(arg1) FROM foo"
    valid_types:
      - { "arg1": *string }

  - description: OCTET_LENGTH operand must have type STRING or NULL, or be MISSING
    query: "SELECT OCTET_LENGTH(arg1) FROM foo"
    valid_types:
      - { "arg1": *string }

  - description: BIT_LENGTH operand must have type STRING or NULL, or be MISSING
    query: "SELECT BIT_LENGTH(arg1) FROM foo"
    valid_types:
      - { "arg1": *string }

  - description: EXTRACT operand must have type BSON_DATE or NULL, or be MISSING
    query: "SELECT EXTRACT(year FROM arg1) FROM foo"
    valid_types:
      - { "arg1": *bson_date }

  - description: SUBSTRING operand type constraints
    query: "SELECT SUBSTRING(arg1 FROM arg2 FOR arg3) FROM foo"
    valid_types:
      - { "arg1": *string, "arg2": *int, "arg3": *int }

  - description: UPPER operand must have type STRING or NULL, or be MISSING
    query: "SELECT UPPER(arg1) FROM foo"
    valid_types:
      - { "arg1": *string }

  - description: LOWER operand must have type STRING or NULL, or be MISSING
    query: "SELECT LOWER(arg1) FROM foo"
    valid_types:
      - { "arg1": *string }

  - description: TRIM operands must have type STRING or NULL, or be MISSING
    query: "SELECT TRIM(arg1 FROM arg2) FROM foo"
    valid_types:
      - { "arg1": *string, "arg2": *string }

  - description: CURRENT_TIMESTAMP operand must have type INT or NULL, or be MISSING
    query: "SELECT CURRENT_TIMESTAMP(arg1) FROM foo"
    skip_reason: "SQL-671: ignoring arg incorrectly allows invalid types"
    valid_types:
      - { "arg1": *int }

  - description: ABS operand must have numeric type or type NULL, or be MISSING
    query: "SELECT ABS(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: CEIL operand must have numeric type or type NULL, or be MISSING
    query: "SELECT CEIL(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: COS operand must have numeric type or type NULL, or be MISSING
    query: "SELECT COS(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: DEGREES operand must have numeric type or type NULL, or be MISSING
    query: "SELECT DEGREES(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: FLOOR operand must have numeric type or type NULL, or be MISSING
    query: "SELECT FLOOR(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: LOG operands must have numeric type or type NULL, or be MISSING
    query: "SELECT LOG(arg1, arg2) FROM foo"
    valid_types:
      - { "arg1": *numerics, "arg2": *numerics }

  - description: MOD operands must have numeric type or type NULL, or be MISSING
    query: "SELECT MOD(arg1, arg2) FROM foo"
    valid_types:
      - { "arg1": *numerics, "arg2": *numerics }

  - description: POW operands must have numeric type or type NULL, or be MISSING
    query: "SELECT POW(arg1, arg2) FROM foo"
    valid_types:
      - { "arg1": *numerics, "arg2": *numerics }

  - description: RADIANS operand must have numeric type or type NULL, or be MISSING
    query: "SELECT RADIANS(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: ROUND operands must have numeric type or type NULL, or be MISSING
    query: "SELECT ROUND(arg1, arg2) FROM foo"
    valid_types:
      - { "arg1": *numerics, "arg2": *int_long }

  - description: SIN operand must have numeric type or type NULL, or be MISSING
    query: "SELECT SIN(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: SQRT operand must have numeric type or type NULL, or be MISSING
    query: "SELECT SQRT(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: TAN operand must have numeric type or type NULL, or be MISSING
    query: "SELECT TAN(arg1) FROM foo"
    valid_types:
      - { "arg1": *numerics }

  - description: SPLIT operand type constraints
    query: "SELECT SPLIT(arg1, arg2, arg3) FROM foo"
    valid_types:
      - { "arg1": *string, "arg2": *string, "arg3": *int }
