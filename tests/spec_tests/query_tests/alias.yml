catalog_data:
  db:
    foo:
      - {'_id': 0, 'a': 1, 'b': 2}

tests:
  - description: Cannot use duplicate implicit aliases for fields
    query: "SELECT a, a FROM [{'a': 1}] arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias 'a' used two times"

  - description: Cannot use duplicate explicit aliases for fields
    query: "SELECT a AS alias, a AS alias FROM [{'a': 1}] arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias 'alias' used two times"

  - description: Cannot use duplicate explicit aliases for group keys
    query: "SELECT * FROM [{'a': 1}] arr GROUP BY a AS a, a AS a"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias 'a' used two times"

  - description: Cannot use duplicate explicit aliases for aggregations
    query: "SELECT * FROM [{'a': 1}] arr GROUP BY NULL AS _groupKey1 AGGREGATE count(a) AS a, count(a) AS a"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias 'a' used two times"

  - description: Aliases must be unique across both keys and aggregations in GROUP clauses
    query: "SELECT * FROM [{'a': 1}] arr GROUP BY a AS a AGGREGATE count(a) AS a"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias 'a' used two times"

  - description: Cannot use duplicate generated aliases for fields
    query: "SELECT a AS _2, a+1 FROM [{'a': 1}] arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias '_2' used two times"

  - description: Cannot use duplicate generated aliases for group keys
    query: "SELECT * FROM [{'a': 1}] arr GROUP BY a + 1, a AS _groupKey1"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias '_groupKey1' used two times"

  - description: Cannot use duplicate generated aliases for aggregations
    query: "SELECT * FROM [{'a': 1}] arr GROUP BY NULL AS _groupKey1 AGGREGATE count(a), count(a) AS _agg1"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "alias '_agg1' used two times"

  - description: Can use different aliases for same field
    query: "SELECT VALUE {'a1': a, 'a2': a} FROM [{'a': 1}] arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation:
      - {'$documents': {'arr': [{'a': 1}]}}
      - {'$project': {'_id': 0, '__bot': {'a1': '$arr.a', 'a2': '$arr.a'}}}
      - {'$replaceWith' : {'$unsetField' : {'field' : '__bot', 'input' :
           {'$setField' :  {'field' : '' , 'input' : '$$ROOT', 'value' : '$__bot'}
           }}}}
    result:
      - {'': {'a1': 1, 'a2': 1}}

  - description: _id is a valid alias for datasources
    query: "SELECT * FROM [{'a': 1}] _id"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation:
      - {'$documents': [{'a': {'$literal': 1}}]}
      - {'$project': {'_id': '$$ROOT'}}
    result:
      - {'_id': {'a': 1}}

  - description: Cannot use duplicate implicit aliases for collections
    query: "SELECT * FROM foo, foo"
    should_compile: false
    algebrize_error: "alias 'foo' used two times"

  - description: Cannot use duplicate explicit aliases for collections
    query: "SELECT * FROM foo AS alias, foo AS alias"
    should_compile: false
    algebrize_error: "alias 'alias' used two times"

  - description: Can use different alias for same collection
    current_db: db
    query: "SELECT * FROM foo AS foo1, foo AS foo2"
    skip_reason: "SQL-498: incorrect algebrizer state"
    translation_target_db: db
    translation_target_coll: foo
    translation:
      - {'$project': {'_id': 0, 'foo': '$$ROOT'}}
      - {'$project': {'_id': 0, 'foo1': '$foo'}}
      - {'$join': {
        'collection': 'foo',
        'joinType': 'inner',
        'pipeline': [
          {'$project': {'_id': 0, 'foo': '$$ROOT'}},
          {'$project': {'_id': 0, 'foo2': '$foo'}},
        ],
      }}
    result:
      - {"foo1": {'_id': 0, "a": 1, "b": 2}, "foo2": {'_id': 0, "a": 1, "b": 2}}

  - description: Can use duplicate aliases on both sides of UNION
    current_db: db
    query: "SELECT VALUE {'a': a, 'c': b} FROM foo AS alias UNION ALL SELECT VALUE {'a': a, 'c': b} FROM foo AS alias"
    translation_target_db: db
    translation_target_coll: foo
    translation:
      - {'$project': {'_id': 0, 'foo': '$$ROOT'}}
      - {'$project': {'_id': 0, 'alias': '$foo'}}
      - {'$project': {'_id': 0, '__bot': {'a': '$alias.a', 'c': '$alias.b'}}}
      - {'$unionWith': {'coll': 'foo', 'pipeline': [
          {'$project': {'_id': 0, 'foo': '$$ROOT'}},
          {'$project': {'_id': 0, 'alias': '$foo'}},
          {'$project': {'_id': 0, '__bot': {'a': '$alias.a', 'c': '$alias.b'}}},
        ]}}
      - {'$replaceWith': {'$unsetField': {'field': '__bot', 'input':
           {'$setField':  {'field': '' , 'input': '$$ROOT', 'value': '$__bot'}
           }}}}
    result:
      - {'': {'a': 1, 'c': 2}}
      - {'': {'a': 1, 'c': 2}}
