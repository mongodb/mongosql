catalog_data:
  foo:
    bar:
      - {'_id': 0, 'foo': true}
      - {'_id': 1, 'foo': false}
    baz:
      - {'_id': 0, 'foo': true}

catalog_schema:
    {
        "foo": {
            "bar": {
              "bsonType": "object",
              "required": [ "foo" ],
              "properties": {
                "foo": { "bsonType": "boolean" }
              }
            }
        }
    }
tests:
  - description: WHERE with BOOLEAN returning expression
    query: "SELECT * FROM [{'a': 1}, {'a': 2}, {'a': 3}] AS arr WHERE a >= 2"
    translation:
      - {'$array': {'arr': [{'a': 1}, {'a': 2}, {'a': 3}]}}
      - {'$match': {'$expr': {'$sqlGte': ['$arr.a', {'$literal': 2}]}}}
    result:
      - {'arr': {'a': 2}}
      - {'arr': {'a': 3}}

  - description: WHERE with CAST to BOOLEAN
    query: "SELECT * FROM [{'a': 0}, {'a': 1}, {'a': 2}, {'a': 3}] AS arr WHERE CAST(a AS BOOLEAN)"
    translation:
      - {'$array': {'arr': [{'a': 1}, {'a': 2}, {'a': 3}]}}
      - {'$match': {'$expr': {'$convert': {'input': '$arr.a', 'to': 'bool', 'onNull': null, 'onError': null}}}}
    result:
      - {'arr': {'a': 1}}
      - {'arr': {'a': 2}}
      - {'arr': {'a': 3}}

  - description: WHERE with CASE that must return BOOLEAN
    query: "SELECT * FROM [{'a': true}, {'a': 1}, {'a': false}, {'a': true}, {}] AS arr WHERE CASE WHEN a IS BOOLEAN THEN a ELSE false END"
    translation:
      - {'$array': {'arr': [{'a': true}, {'a': 1}, {'a': false}, {'a': true}, {}]}}
      - {'$match': {'$expr': {"$switch": {
            "branches": [
            {"case": {'$sqlEq': [{$type: '$arr.a'}, 'bool']}, "then": '$arr.a' },
            ],
            "default": {'$literal': false}
          }}}}
    result:
      - {'arr': {'a': true}}
      - {'arr': {'a': true}}

  - description: NULL is a valid BOOLEAN
    query: "SELECT * FROM [{'a': true}, {'a': 1}, {'a': false}, {'a': true}] AS arr WHERE NULL"
    translation:
      - {'$array': {'arr': [{'a': true}, {'a': 1}, {'a': false}, {'a': true}]}}
      - {'$match': {'$expr': {'$literal': null}}}
    result: []

  - description: WHERE must be statically determined to be a BOOLEAN
    query: "SELECT * FROM [{'a': 1}] AS arr WHERE a"
    should_compile: false
    algebrize_error:  "WHERE clause expression must be BOOLEAN. Try changing to 'WHERE CAST(a AS BOOLEAN)'"

  - description: WHERE statically determined to be BOOLEAN from literal
    query: "SELECT * FROM [{'a': true}] AS arr WHERE a"
    translation:
      - {'$array': {'arr': [{'a': true}, {'a': 1}, {'a': false}, {'a': true}]}}
      - {'$match': {'$expr': '$arr.a'}}
    result:
      - {'arr': {'a': true}}

  - description: WHERE statically determined to be BOOLEAN from schema
    query: "SELECT * FROM bar AS bar WHERE NOT foo"
    current_db: foo
    translation_target_db: foo
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar': '$bar'}}
      - {'$match': {'$expr': {'$sqlNot': ['$bar.foo']}}}
    result:
      - {'bar': {'_id': 0, 'foo': false}}

  - description: WHERE must be statically determined to be a BOOLEAN and no schema for bar2
    query: "SELECT * FROM bar2 WHERE NOT foo"
    current_db: foo
    should_compile: false
    algebrize_error:  "WHERE clause expression must be BOOLEAN. Try changing to 'WHERE CAST(NOT foo AS BOOLEAN)'"
