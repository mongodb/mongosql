catalog_data:
  foo:
    employees:
      - {'_id': 1, 'name': 'a', 'salary': 2, 'department_id': 1}
      - {'_id': 2, 'name': 'b', 'salary': 4, 'department_id': 1}
      - {'_id': 3, 'name': 'c', 'salary': 9, 'department_id': 1}
      - {'_id': 4, 'name': 'd', 'salary': 1, 'department_id': 2}
    department:
      - {'_id': 1, 'name': 'd1'}
      - {'_id': 2, 'name': 'd2'}
      - {'_id': 3, 'name': 'd3'}
    employees_w_schema:
      - {'_id': 1, 'name': 'a', 'salary': 2, 'department_id': 1}
      - {'_id': 2, 'name': 'b', 'salary': 4, 'department_id': 1}
      - {'_id': 3, 'name': 'c', 'salary': 9, 'department_id': 1}
      - {'_id': 4, 'name': 'd', 'salary': 1, 'department_id': 2}
    department_w_schema:
      - {'_id': 1, 'name': 'd1'}
      - {'_id': 2, 'name': 'd2'}
      - {'_id': 3, 'name': 'd3'}
    baz:
      - {'_id': 1, 'a': 'foo'}

catalog_schema:
  {
    'foo': {
      'employees': {
        'bsonType': "object",
        'required': [ '_id', 'name', 'salary', 'department_id' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': "int"
          },
          'name': {
            'bsonType': "string"
          },
          'salary': {
            'bsonType': "int"
          },
          'department_id': {
            'bsonType': "int"
          }
        }
      },
      'department': {
        'bsonType': "object",
        'required': [ '_id', 'name' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': "int"
          },
          'name': {
            'bsonType': "string"
          }
        }
      },
      'employees_w_schema': {
        'bsonType': "object",
        'required': [ '_id', 'name', 'salary', 'department_id' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': "int"
          },
          'name': {
            'bsonType': "string"
          },
          'salary': {
            'bsonType': "int"
          },
          'department_id': {
            'bsonType': "int"
          }
        }
      },
      'department_w_schema': {
        'bsonType': "object",
        'required': [ '_id', 'name' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': "int"
          },
          'name': {
            'bsonType': "string"
          }
        }
      }
    }
  }

tests:
  - description: uncorrelated scalar subquery expression correctness test
    current_db: foo
    query: "SELECT VALUE {'name': name, 'avg_salary': (SELECT arr.a FROM [{'a': 4}] AS arr)} FROM employees AS emp"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation_target_coll: employees
    translation:
      - {'$project': {'_id': 0, 'employees': '$$ROOT'}}
      - {'$project': {'_id': 0, 'emp': '$employees'}}
      - {'$project': {'_id': 0, '__bot': {
                                           'name': '$emp.name',
                                           'avg_salary': {'$subquery': {
                                             'let': {'emp_0': '$emp'},
                                                                         'outputPath': ['__bot', 'a'],
                                                                         'pipeline': [
                                                                                       {'$documents': {'arr': [{'a': 4}]}},
                                                                                       {'$project': {'_id': 0, '__bot': {'a': '$arr.a'}}}
                                                                         ]
                                           }}
      }}}
    result:
      - {'__bot': {'name': 'a', 'avg_salary': 4}}
      - {'__bot': {'name': 'b', 'avg_salary': 4}}
      - {'__bot': {'name': 'c', 'avg_salary': 4}}
      - {'__bot': {'name': 'd', 'avg_salary': 4}}

  - description: correlated scalar subquery correctness test
    current_db: foo
    query: "SELECT VALUE {'name': name, 'department_name': (SELECT dep.name FROM department_w_schema AS dep WHERE dep.`_id` = emp.department_id LIMIT 1)} FROM employees_w_schema AS emp"
    translation_target_db: foo
    translation_target_coll: employees_w_schema
    translation:
      - {'$project': {'_id': 0, 'employees_w_schema': '$$ROOT'}}
      - {'$project': {'_id': 0, 'emp': '$employees_w_schema'}}
      - {'$project': {'_id': 0, '__bot': {
                                           'name': '$emp.name',
                                           'department_name': {'$subquery': {
                                                                              'db': 'foo',
                                                                              'collection': 'department_w_schema',
                                                                              'let': {'emp_0': '$emp'},
                                                                              'outputPath': ['__bot', 'name'],
                                                                              'pipeline': [
                                                                                            {'$project': {'_id': 0, 'department_w_schema': '$$ROOT'}},
                                                                                            {'$project': {'_id': 0, 'dep': '$department_w_schema'}},
                                                                                            {'$match': {'$expr': {'$sqlEq': ['$dep._id', '$$emp_0.department_id']}}},
                                                                                            {'$project': {'_id': 0, '__bot': {'name': '$dep.name'}}},
                                                                                            {'$limit': 1}
                                                                              ]
                                           }}
      }}}
    result:
      - {'__bot': {'name': 'a', 'department_name': 'd1'}}
      - {'__bot': {'name': 'b', 'department_name': 'd1'}}
      - {'__bot': {'name': 'c', 'department_name': 'd1'}}
      - {'__bot': {'name': 'd', 'department_name': 'd2'}}

  - description: scalar subquery fails if it cannot prove that it statically returns a single row
    current_db: foo
    query: "SELECT VALUE {'department_name': (SELECT dep.name FROM department_w_schema AS dep WHERE dep.`_id` = emp.department_id)} FROM employees_w_schema AS emp"
    should_compile: false
    algebrize_error: "Scalar subquery must be statically proved to return only one value"

  - description: scalar subquery fails if it cannot prove that it statically returns a single column
    current_db: foo
    query: "SELECT VALUE {'department_name': (SELECT * FROM department_w_schema AS dep WHERE dep.id = emp.department_id LIMIT 1)} FROM employees_w_schema AS emp"
    should_compile: false
    algebrize_error: "Scalar subquery must be statically proved to return only one value"

  - description: cardinality of 1 should be inferrable from array datasource
    current_db: foo
    query: "SELECT VALUE {'name': name, 'sub': (SELECT a FROM [{'a': 1}] arr)} FROM department AS dep"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation_target_coll: department
    translation:
      - {'$project': {'_id': 0, 'department': '$$ROOT'}}
      - {'$project': {'_id': 0, 'dep': '$department'}}
      - {'$project': {'_id': 0, '__bot': {
                                           'name': '$dep.name',
                                           'sub': {'$subquery': {
                                             'let': {'dep_0': '$dep'},
                                                                  'outputPath': ['__bot', 'a'],
                                                                  'pipeline': [
                                                                                {'$documents': {'arr': [{'a': 1}]}},
                                                                                {'$project': {'_id': 0, '__bot': {'a': '$arr.a'}}}
                                                                  ]
                                           }}
      }}}
    result:
      - {'__bot': {'name': 'd1', 'sub': 1}}
      - {'__bot': {'name': 'd2', 'sub': 1}}
      - {'__bot': {'name': 'd3', 'sub': 1}}
  
  - description: cardinality of 1 should be inferrable from group by constant
    current_db: foo
    skip_reason: "SQL-483: implement codegen for TypeAssert"
    query: "SELECT VALUE {'name': name, 'avg_salary': (SELECT avg_salary FROM employees AS emp GROUP BY NULL AS _ AGGREGATE AVG(salary::!DOUBLE) AS avg_salary)} FROM employees AS emp"
    translation_target_db: foo
    translation_target_coll: employees
    translation:
      - {'$project': {'_id': 0, 'employees': '$$ROOT'}}
      - {'$project': {'_id': 0, 'emp': '$employees'}}
      - {'$project': {'_id': 0, '__bot': {
                                           'name': '$emp.name',
                                           'avg_salary': {'$subquery': {
                                                                         'collection': 'employees',
                                                                         'let': {'emp_0': '$emp'},
                                                                         'ouputPath': ['__bot', 'avg_salary'],
                                                                         'pipeline': [
                                                                                       {'$project': {'_id': 0, 'employees': '$$ROOT'}},
                                                                                       {'$project': {'_id': 0, 'emp': '$employees'}},
                                                                                       {'$group': {'_id': {'_': null}, 'avg_salary': {'$sqlAvg': {'var': '$emp.salary', 'distinct': false}}}},
                                                                                       {'$project': {'_id': 0, '__bot': {'_': '$_id._', 'avg_salary': '$avg_salary'}}},
                                                                                       {'$project': {'_id': 0, '__bot': {'avg_salary': '$__bot.avg_salary'}}}
                                                                         ]
                                           }}
      }}}
    result:
      - {'__bot': {'name': 'a', 'avg_salary': 4}}
      - {'__bot': {'name': 'b', 'avg_salary': 4}}
      - {'__bot': {'name': 'c', 'avg_salary': 4}}
      - {'__bot': {'name': 'd', 'avg_salary': 4}}

  - description: nested subquery should be able to access field from its grandparent query correctness test
    current_db: foo
    query: "SELECT VALUE {'name': name, 'department_name': (SELECT dep.name FROM department_w_schema AS dep WHERE dep._id = (SELECT emp2.department_id FROM employees_w_schema AS emp2 WHERE emp2._id = emp1._id LIMIT 1) LIMIT 1)} FROM employees_w_schema AS emp1"
    skip_reason: "SQL-593: Codegen sometimes hangs on nested subqueries"
    translation_target_db: foo
    translation_target_coll: employees_w_schema
    translation:
      - {'$project': {'_id': 0, 'employees_w_schema': '$$ROOT'}}
      - {'$project': {'_id': 0, 'emp1': '$employees_w_schema'}}
      - {'$project': {'_id': 0, '__bot': {
                                           'name': '$emp1.name',
                                           'department_name': {'$subquery': {
                                                                              'db': 'foo',
                                                                              'collection': 'department_w_schema',
                                                                              'let': {'emp1_0': '$emp1'},
                                                                              'outputPath': ['__bot', 'name'],
                                                                              'pipeline': [
                                                                                            {'$project': {'_id': 0, 'department_w_schema': '$$ROOT'}},
                                                                                            {'$project': {'_id': 0, 'dep': '$department_w_schema'}},
                                                                                            {'$match': {'$expr': {'$sqlEq': ['$dep._id', {'$subquery': {
                                                                                                                                                         'db': 'foo',
                                                                                                                                                         'collection': 'employees_w_schema',
                                                                                                                                                         'let': {'dep_1': '$dep', 'emp1_0': '$$emp1_0'},
                                                                                                                                                         'outputPath': ['__bot', 'department_id'],
                                                                                                                                                         'pipeline': [
                                                                                                                                                                       {'$project': {'_id': 0, 'employees_w_schema': '$$ROOT'}},
                                                                                                                                                                       {'$project': {'_id': 0, 'emp2': '$employees_w_schema'}},
                                                                                                                                                                       {'$match': {'$expr': {'$sqlEq': ['$emp2._id', '$$emp1_0._id']}}},
                                                                                                                                                                       {'$project': {'_id': 0, '__bot': {'department_id': '$emp2.department_id'}}},
                                                                                                                                                                       {'$limit': 1}
                                                                                                                                                                     ]}}]}}},
                                                                                          {'$project': {'_id': 0, '__bot': {'name': '$dep.name'}}},
                                                                                          {'$limit': 1}
                                                                            ]
                                           }}
      }}}
    result:
      - {'__bot': {'name': 'a', 'department_name': 'd1'}}
      - {'__bot': {'name': 'b', 'department_name': 'd1'}}
      - {'__bot': {'name': 'c', 'department_name': 'd1'}}
      - {'__bot': {'name': 'd', 'department_name': 'd2'}}

  - description: an empty array datasource does not have a degree of one
    current_db: foo
    query: "SELECT VALUE {'sub': (SELECT * FROM [] AS arr)} FROM employees AS emp"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    should_compile: false
    algebrize_error: "subquery expressions must have a degree of 1"

  - description: allow select star if we can statically prove the degree is equal to one
    current_db: foo
    query: "SELECT VALUE {'sub': (SELECT * FROM [{'a': 4}] AS arr)} FROM employees AS emp"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation_target_coll: employees
    translation:
      - { '$project': { '_id': 0, 'employees': '$$ROOT' } }
      - { '$project': { '_id': 0, 'emp': '$employees' } }
      - { '$project': { '_id': 0, '__bot': {
        'sub': { '$subquery': {
          'let': { 'emp_0': '$emp' },
          'outputPath': [ '__bot', 'a' ],
          'pipeline': [
            { '$documents': { 'arr': [ { 'a': 4 } ] } },
            { '$project': { '_id': 0, '__bot': { 'a': '$arr.a' } } }
          ]
        } }
      } } }
    result:
      - { '__bot': {'sub': 1 } }

  - description: allow select substar if we can statically prove the degree is equal to one
    current_db: foo
    query: "SELECT VALUE {'sub': (SELECT arr.* FROM [{'a': 4}] AS arr)} FROM employees AS emp"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation_target_coll: employees
    translation:
      - { '$project': { '_id': 0, 'employees': '$$ROOT' } }
      - { '$project': { '_id': 0, 'emp': '$employees' } }
      - { '$project': { '_id': 0, '__bot': {
        'sub': { '$subquery': {
          'let': { 'emp_0': '$emp' },
          'outputPath': [ '__bot', 'a' ],
          'pipeline': [
            { '$documents': { 'arr': [ { 'a': 4 } ] } },
            { '$project': { '_id': 0, '__bot': { 'a': '$arr.a' } } }
          ]
        } }
      } } }
    result:
      - { '__bot': { 'sub': 1 } }

  - description: subquery selecting potentially missing field from collection
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM baz AS q LIMIT 1)} FROM department_w_schema AS q"
    translation_target_db: foo
    translation_target_coll: department_w_schema
    translation:
      - { '$project': { '_id': 0, 'department_w_schema': '$$ROOT' } }
      - { '$project': { '_id': 0, 'q': '$department_w_schema' } }
      - { '$project': { '_id': 0, '__bot': {
        'bar': { '$subquery': {
          'db': 'foo',
          'collection': 'baz',
          'let': { 'q_0': '$q' },
          'outputPath': [ '__bot', 'bar' ],
          'pipeline': [
            { '$project': { '_id': 0, 'baz': '$$ROOT' } },
            { '$project': { '_id': 0, 'q': '$baz' } },
            { '$project': { '_id': 0, '__bot': { 'bar': '$q.bar' } } },
            { '$limit': 1 }
          ]
        } }
      } } }
    result:
      - { __bot: {}}
      - { __bot: {}}
      - { __bot: {}}
