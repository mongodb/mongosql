catalog_data:
  'mydb':
    'bar':
      - { '_id': 0, 'foo': 1 }
      - { '_id': 1, 'foo': 42 }
    'bar2':
      - { '_id': 0, 'foo': 42, 'baz': 63 }
      - { '_id': 1, 'foo': 43 }
    'coll':
      - { '_id': 0, 'bar': 53, 'car': 42 }
  'db2':
    'foo':
      - { '_id': 0, 'x': 1 }

catalog_schema:
  {
    'mydb': {
      'bar': {
        'bsonType': "object",
        'required': [ 'foo' ],
        'additionalProperties': false,
        'properties': {
          '_id': { 'bsonType': "int" },
          'foo': { 'bsonType': "int" },
        }
      },
      'bar2': {
        'bsonType': "object",
        'required': [ 'foo' ],
        'additionalProperties': false,
        'properties': {
          '_id': { 'bsonType': "int" },
          'foo': { 'bsonType': "int" },
          'baz': { 'bsonType': "int" },
        }
      },
      'coll': {
        'bsonType': "object",
        'required': [ 'bar', 'car' ],
        'additionalProperties': false,
        'properties': {
          'bar': { 'bsonType': "int" },
          'car': { 'bsonType': "int" },
        }
      },
    },
    'db2': {
      'foo': {
        'bsonType': "object",
        'required': [ 'x' ],
        'additionalProperties': false,
        'properties': {
          'x': { 'bsonType': "int" },
        }
      },
    },
  }

tests:
  - description: cross join correctness test
    current_db: mydb
    query: "SELECT * FROM bar AS bar CROSS JOIN coll AS coll"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
        - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
        - {'$project': {'_id': 0, 'bar': '$bar'}}
        - {'$join': {
          'collection': 'coll',
          'joinType': 'inner',
          'pipeline': [
            {'$project': {'_id': 0, 'coll': '$$ROOT'}},
            {'$project': {'_id': 0, 'coll': '$coll'}},
          ],
        }}
    result:
        - {'bar': {'_id': 0, 'foo': 1}, 'coll': {'_id': 0, 'bar': 53, 'car': 42}}
        - {'bar': {'_id': 1, 'foo': 42}, 'coll': {'_id': 0, 'bar': 53, 'car': 42}}

  - description: inner join correctness test
    current_db: mydb
    query: "SELECT * FROM bar AS bar INNER JOIN coll AS coll ON bar.foo = coll.car"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar': '$bar'}}
      - {'$join': {
        'collection': 'coll',
        'joinType': 'inner',
        'let': {'bar_0': '$bar'},
        'pipeline': [
          {'$project': {'_id': 0, 'coll': '$$ROOT'}},
          {'$project': {'_id': 0, 'coll': '$coll'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlEq': ['$$bar_0.foo', '$coll.car']}}},
      }}
    result:
      - {'bar': {'_id': 1, 'foo': 42}, 'coll': {'_id': 0, 'bar': 53, 'car': 42}}

  - description: left join correctness test
    current_db: mydb
    query: "SELECT * from bar2 AS bar2 LEFT JOIN bar AS bar on bar2.foo = bar.foo"
    translation_target_db: mydb
    translation_target_coll: bar2
    translation:
      - {'$project': {'_id': 0, 'bar2': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar2': '$bar2'}}
      - {'$join': {
        'collection': 'bar',
        'joinType': 'left',
        'let': {'bar2_0': '$bar2'},
        'pipeline': [
          {'$project': {'_id': 0, 'bar': '$$ROOT'}},
          {'$project': {'_id': 0, 'bar': '$bar'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlEq': ['$$bar2_0.foo', '$bar.foo']}}},
      }}
    result:
      - {'bar2': {'_id': 0, 'foo': 42, 'baz': 63}, 'bar': {'_id': 1, 'foo': 42}}
      - {'bar2': {'_id': 1, 'foo': 43}}

  - description: right join correctness test
    current_db: mydb
    query: "SELECT * from bar2 AS bar2 RIGHT JOIN bar as bar ON bar2.foo = bar.foo"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar': '$bar'}}
      - {'$join': {
        'collection': 'bar2',
        'joinType': 'left',
        'let': {'bar_0': '$bar'},
        'pipeline': [
          {'$project': {'_id': 0, 'bar2': '$$ROOT'}},
          {'$project': {'_id': 0, 'bar2': '$bar2'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlEq': ['$bar2.foo', '$$bar_0.foo']}}},
      }}
    result:
        - {'bar': {'_id': 1, 'foo': 42}, 'bar2': {'_id': 0, 'foo': 42, 'baz': 63}}
        - {'bar': {'_id': 0, 'foo': 1}}

  - description: natural join is not supported
    current_db: mydb
    query: "SELECT * FROM bar NATURAL JOIN coll"
    should_compile: false
    parse_error: "Unrecognized token `NATURAL`"

  - description: join predicate must be statically determined to be a BOOLEAN
    current_db: mydb
    query: "SELECT * FROM bar INNER JOIN coll ON 123"
    should_compile: false
    algebrize_error: "schema checking failed for join condition: required AnyOf({Missing, Atomic(Boolean), Atomic(Null)}), found Atomic(Integer)"

  - description: join predicates can contain complex expressions
    current_db: mydb
    query: "SELECT * FROM bar AS bar INNER JOIN bar2 AS bar2 ON bar.foo + 50 > bar2.baz"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar': '$bar'}}
      - {'$join': {
        'collection': 'bar2',
        'joinType': 'inner',
        'let': {'bar_0': '$bar'},
        'pipeline': [
          {'$project': {'_id': 0, 'bar2': '$$ROOT'}},
          {'$project': {'_id': 0, 'bar2': '$bar2'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlGt': [{'$add': [{'$literal': 50}, '$$bar_0.foo']}, '$bar2.baz']}}}
      }}
    result:
      - {'bar': {'_id': 1, 'foo': 42}, 'bar2': {'_id': 0, 'foo': 42, 'baz': 63}}

  - description: join predicates can only reference datasource names from their own join
    query: "SELECT * FROM [{'v': 1}] AS a INNER JOIN [{'v': 1}] AS b ON b.v = c.v INNER JOIN [{'v': 1}] AS c"
    current_db: test
    translation_target_db: test
    should_compile: false
    algebrize_error: "field `c` cannot be resolved to any datasource"

  - description: join predicates can reference columns by table-qualified names
    current_db: mydb
    query: "SELECT * FROM bar AS bar INNER JOIN coll AS coll ON bar.foo = coll.car"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar': '$bar'}}
      - {'$join': {
        'collection': 'coll',
        'joinType': 'inner',
        'let': {'bar_0': '$bar'},
        'pipeline': [
          {'$project': {'_id': 0, 'coll': '$$ROOT'}},
          {'$project': {'_id': 0, 'coll': '$coll'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlEq': ['$$bar_0.foo', '$coll.car']}}},
      }}
    result:
        - {'bar': {'_id': 1, 'foo': 42}, 'coll': {'_id': 0, 'bar': 53, 'car': 42}}

  - description: join predicates can reference columns by unambiguous unqualified names
    current_db: mydb
    query: "SELECT * FROM bar AS bar INNER JOIN coll AS coll ON foo = car"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'bar': '$bar'}}
      - {'$join': {
        'collection': 'coll',
        'joinType': 'inner',
        'let': {'bar_0': '$bar'},
        'pipeline': [
          {'$project': {'_id': 0, 'coll': '$$ROOT'}},
          {'$project': {'_id': 0, 'coll': '$coll'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlEq': ['$$bar_0.foo', '$coll.car']}}}
      }}
    result:
        - {'bar': {'_id': 1, 'foo': 42}, 'coll': {'_id': 0, 'bar': 53, 'car': 42}}

  - description: a join datasource cannot be given an alias
    query: "SELECT * FROM (foo.bar CROSS JOIN foo.coll) AS x"
    should_compile: false
    skip_reason: "SQL-810"
    parse_error: "Unrecognized token `AS`"

  - description: joins are left-associative
    current_db: mydb
    query: "SELECT * FROM bar AS a CROSS JOIN bar AS b LEFT JOIN bar AS c ON a.foo = c.foo"
    translation_target_db: mydb
    translation_target_coll: bar
    translation:
      - {'$project': {'_id': 0, 'bar': '$$ROOT'}}
      - {'$project': {'_id': 0, 'a': '$bar'}}
      - {'$join': {
        'collection': 'bar',
        'joinType': 'inner',
        'pipeline': [
          {'$project': {'_id': 0, 'bar': '$$ROOT'}},
          {'$project': {'_id': 0, 'b': '$bar'}},
        ],
      }}
      - {'$join': {
        'collection': 'bar',
        'joinType': 'left',
        'let': {'a_0': '$a', 'b_0': '$b'},
        'pipeline': [
          {'$project': {'_id': 0, 'bar': '$$ROOT'}},
          {'$project': {'_id': 0, 'c': '$bar'}},
        ],
        'condition': {'$match': {'$expr': {'$sqlEq': ['$$a_0.foo', '$c.foo']}}}
      }}
    result:
      - {'a': {'_id': 0, 'foo':  1}, 'b': {'_id': 0, 'foo':  1}, 'c': {'_id': 0, 'foo':  1}}
      - {'a': {'_id': 0, 'foo':  1}, 'b': {'_id': 1, 'foo': 42}, 'c': {'_id': 0, 'foo':  1}}
      - {'a': {'_id': 1, 'foo': 42}, 'b': {'_id': 0, 'foo':  1}, 'c': {'_id': 1, 'foo': 42}}
      - {'a': {'_id': 1, 'foo': 42}, 'b': {'_id': 1, 'foo': 42}, 'c': {'_id': 1, 'foo': 42}}

  - description: all datasource names in FROM clause must be unique
    current_db: mydb
    query: "SELECT * FROM coll CROSS JOIN coll"
    should_compile: false
    algebrize_error: 'cannot create schema environment with duplicate key: Key { datasource: Named("coll"), scope: 0 }'

  - description: cross database join correctness test
    current_db: mydb
    query: "SELECT * FROM coll AS coll CROSS JOIN db2.foo AS foo"
    skip_reason: "SQL-540: cross-database lookups are not supported"
    translation_target_db: mydb
    translation_target_coll: coll
    translation:
      - {'$project': {'_id': 0, 'coll': '$$ROOT'}}
      - {'$project': {'_id': 0, 'coll': '$coll'}}
      - {'$join': {
                    'database': 'db2',
                    'collection': 'foo',
                    'joinType': 'inner',
                    'pipeline': [
                      {'$project': {'_id': 0, 'foo': '$$ROOT'}},
                      {'$project': {'_id': 0, 'foo': '$foo'}}
                    ]
      }}
    result:
      - {'coll': {'_id': 0, 'bar': 53, 'car': 42}, 'foo': {'_id': 0, 'x': 1}}
