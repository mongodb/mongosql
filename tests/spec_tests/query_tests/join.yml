catalog_environment:
    {
        'mydb': {
            'bar': [
                { 'foo': 1 },
                { 'foo': 42 },
            ],
            'bar2': [
                { 'foo': 42, 'baz': 63 },
                { 'foo': 43 }
            ],
            'coll': [
                { 'bar': 53, 'car': 42 }
            ],
        }
    }

schema_environment:
  {
    'mydb': {
      'bar': {
        '$jsonSchema': {
          'bsonType': "object",
          'properties': {
            'foo': { 'bsonType': "double" },
          }
        }
      },
      'bar2': {
        '$jsonSchema': {
          'bsonType': "object",
          'properties': {
            'foo': { 'bsonType': "double" },
            'baz': { 'bsonType': "double" },
          }
        }
      },
      'coll': {
        '$jsonSchema': {
          'bsonType': "object",
          'properties': {
            'bar': { 'bsonType': "double" },
            'car': { 'bsonType': "double" },
          }
        }
      },
    }
  }

tests:
  - description: cross join correctness test
    current_db: mydb
    query: "SELECT * FROM bar CROSS JOIN coll"
    result:
        - {'foo': 1, 'bar': 53, 'car': 42}
        - {'foo': 42, 'bar': 53, 'car': 42}

  - description: inner join correctness test
    current_db: mydb
    query: "SELECT * FROM bar INNER JOIN coll ON bar.foo = coll.car"
    result:
        - {'foo': 42, 'bar': 53, 'car': 42}

  - description: left join correctness test
    current_db: mydb
    query: "SELECT * from bar2 LEFT JOIN bar USING(foo)"
    result:
        - {'bar2': {'foo': 42, 'baz': 63}, 'bar': {'foo': 42}}
        - {'bar2': {'foo': 43}}

  - description: right join correctness test
    current_db: mydb
    query: "SELECT * from bar2 RIGHT JOIN bar USING(foo)"
    result:
        - {'bar': {'foo': 42}, 'bar2': {'foo': 42, 'baz': 63}}
        - {'bar2': {'foo': 43}}

  - description: natural join is not supported
    current_db: mydb
    query: "SELECT * FROM bar NATURAL JOIN coll"
    error: "natural join is not supported"

  - description: join predicate must be statically determined to be a BOOLEAN
    current_db: mydb
    query: "SELECT * FROM bar INNER JOIN coll ON 123"
    error: "join predicate must be boolean"

  - description: join predicates can contain complex expressions
    current_db: mydb
    query: "SELECT * FROM bar INNER JOIN bar2 ON bar.foo + 15 > bar2.baz"
    result:
      - {'bar': {'foo': 42}, 'bar2': {'foo': 42, 'baz': 63}}

  - description: join predicates can only reference datasource names from their own join
    current_db: mydb
    query: "SELECT * FROM [{'v': 1}] AS a INNER JOIN ([{'v': 1}] AS b INNER JOIN [{'v': 1}] AS c ON a.v = b.v)"
    error: "unknown field 'a.v'"

  - description: join predicates can reference columns by table-qualified names
    current_db: mydb
    query: "SELECT * FROM bar INNER JOIN coll ON bar.foo = coll.car"
    result:
        - {'foo': 42, 'bar': 53, 'car': 42}

  - description: join predicates can reference columns by unambiguous unqualified names
    current_db: mydb
    query: "SELECT * FROM bar INNER JOIN coll ON foo = coll"
    result:
        - {'foo': 42, 'bar': 53, 'car': 42}

  - description: a join datasource cannot be given an alias
    query: "SELECT * FROM (foo.bar CROSS JOIN foo.coll) AS x"
    error: "Whatever parse error our parser gives us"

  - description: joins are left-associative
    current_db: mydb
    query: "SELECT * FROM bar AS a CROSS JOIN bar AS b LEFT JOIN bar AS c ON a.foo = c.foo"
    result:
      - {'a': {'foo':  1}, 'b': {'foo':  1}, 'c': {'foo':  1}}
      - {'a': {'foo':  1}, 'b': {'foo': 42}, 'c': {'foo':  1}}
      - {'a': {'foo': 42}, 'b': {'foo':  1}}
      - {'a': {'foo': 42}, 'b': {'foo': 42}}
      - {'a': {'foo':  1}, 'b': {'foo':  1}}
      - {'a': {'foo':  1}, 'b': {'foo': 42}}
      - {'a': {'foo': 42}, 'b': {'foo':  1}, 'c': {'foo': 42}}
      - {'a': {'foo': 42}, 'b': {'foo': 42}, 'c': {'foo': 42}}

  - description: all datasource names in FROM clause must be unique
    current_db: mydb
    query: "SELECT * FROM coll INNER JOIN coll USING(bar)"
    error: "Aliases in FROM CLAUSE must be unique, found 2 instances of `coll`"
