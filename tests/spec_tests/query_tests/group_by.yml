catalog_environment: {
    "foo": {
        "bar":[
            {"_id": {"$numberInt": "1"}, "a": {"$numberInt": "1"},"b": {"$numberInt": "2"},"c": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "2"}, "a": {"$numberInt": "1"},"b": {"$numberInt": "12"},"c": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "3"}, "a": {"$numberInt": "11"},"b": {"$numberInt": "22"},"c": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "4"}, "a": {"$numberInt": "1"},"b": {"$numberInt": "42"},"c": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "5"}, "a": {"$numberInt": "111"},"b": {"$numberInt": "142"},"c": {"$numberInt": "13"}}
            ],
        "multi": [
            {"_id": {"$numberInt": "1"}, "a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "1"}},
            {"_id": {"$numberInt": "2"}, "a": {"$numberInt": "2"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "2"}},
            {"_id": {"$numberInt": "3"}, "a": {"$numberInt": "2"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "4"}, "a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}, "c": {"$numberInt": "4"}},
            {"_id": {"$numberInt": "5"}, "a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "5"}}
        ],
        "nullAndMissing": [
            {"_id": {"$numberInt": "1"}, "n": null},
            {"_id": {"$numberInt": "2"}},
            {"_id": {"$numberInt": "3"}, "n": {"$numberInt": "1"}}
        ],
        "poly":[
            {"_id": {"$numberInt": "1"}, "a":{"a": {"$numberInt": "1"},"b": {"$numberInt": "2"}}},
            {"_id": {"$numberInt": "2"}, "a":{"a": {"$numberInt": "2"},"b": {"$numberInt": "2"}}},
            {"_id": {"$numberInt": "3"}, "a":{"a": {"$numberInt": "2"},"b": {"$numberInt": "3"}}},
            {"_id": {"$numberInt": "4"}, "a": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "5"}, "a": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "6"}, "a": {"$numberInt": "4"}}
            ],
        "poly2":[
            {"_id": {"$numberInt": "1"}, "a":{"a": {"$numberInt": "1"},"b": {"$numberInt": "2"}}},
            {"_id": {"$numberInt": "2"}, "a":{"a": {"$numberInt": "2"},"b": {"$numberInt": "2"}}},
            {"_id": {"$numberInt": "3"}, "a":{"a": {"$numberInt": "2"},"b": {"$numberInt": "3"}}},
            {"_id": {"$numberInt": "4"}, "a": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "5"}, "a": {"$numberInt": "3"}},
            {"_id": {"$numberInt": "6"}, "a": {"$numberInt": "4"}},
            {"_id": {"$numberInt": "7"}, "a":{"c": {"$numberInt": "1"}}}
            ],
        "numerics": [
            {"_id": {"$numberInt": "1"}, "a": {"$numberDecimal": "3.0"}},
            {"_id": {"$numberInt": "2"}, "a": {"$numberDouble": "3.0"}},
            {"_id": {"$numberInt": "3"}, "a": {"$numberInt": "3"}}
        ]
        }
    }

schema_environment:
    {
        'foo': {
            'numerics': {
                '$jsonSchema': {
                    'bsonType': "object",
                    'required': ['_id', 'a'],
                    'properties': {
                        "_id": {"bsonType": "int"},
                        "a": {
                            'anyOf':
                             [
                                {"bsonType": "int"},
                                {"bsonType": "double"},
                                {"bsonType": "decimal128"}
                            ]
                        }
                    }
                }
            }
        }
    }

tests:
    - description: GROUP BY with empty input outputs empty
      query: "SELECT * FROM [] GROUP BY NULL AS n"
      result: []

    - description: GROUP BY NULL creates only one group
      query: "SELECT * FROM foo.bar AS bar GROUP BY NULL AS n"
      result:
        - {"n": null}

    - description: GROUP BY 1 creates only one group
      query: "SELECT * FROM foo.bar AS bar GROUP BY 1 AS n"
      result:
        - {"n": {"$numberInt": "1"}}

    - description: GROUP BY 'hello' creates only one group
      query: "SELECT * FROM foo.bar AS bar GROUP BY 'hello' AS n"
      result:
        - {"n": "hello"}

    - description: GROUP BY MISSING converts MISSING to NULL
      query: "SELECT * FROM foo.nullAndMissing AS a GROUP BY a.n AS n"
      result:
        - {"n": null}
        - {"n": {"$numberInt": "1"}}

    - description: GROUP BY document, missing in document does not convert to NULL
      query: "SELECT * FROM foo.poly GROUP BY {'out': a.a} AS doc"
      result:
        - {"doc": {"out": {"$numberInt": "1"}}}
        - {"doc": {"out": {"$numberInt": "2"}}}
        - {"doc": {}}

    - description: GROUP BY keys may be table-qualified
      query: "SELECT * FROM foo.poly AS a GROUP by a.a.a"
      result:
        -  {"a": {"$numberInt": "1"}}
        -  {"a": {"$numberInt": "2"}}
        -  {"a": null}

    - description: GROUP BY keys may be document field references (contrast above, here a.a.a is essentially b.a.a.a which is always missing)
      query: "SELECT * FROM foo.poly AS b GROUP by a.a.a"
      result:
        -  {"a": null}

    - description: GROUP BY arbitrary expression
      query: "SELECT * FROM foo.bar GROUP BY CAST(a AS INT) / 2"
      result:
        - {"a": {"$numberInt": "0"}}
        - {"a": {"$numberInt": "5"}}
        - {"a": {"$numberInt": "55"}}

    - description: single distinct aggregation function correctness test
      query: "SELECT * FROM foo.bar AS bar GROUP BY NULL AS n AGGREGATE SUM(DISTINCT CAST(a AS DOUBLE)) AS suma"
      result:
          - {"n": null, "suma": {"$numberInt": "123"}}

    - description: correctness test for distinct and non-distinct aggregation over same field
      query: "SELECT * FROM foo.bar AS bar GROUP BY NULL AS n AGGREGATE SUM(DISTINCT CAST(a AS DOUBLE)) AS dsuma, SUM(CAST(a AS DOUBLE)) AS suma"
      result:
          - {"n": null, "a": {"$numberInt": "123"}, "a": {"$numberInt": "125"}}

    - description: multi-distinct aggregation function correctness test
      query: "SELECT suma AS suma, countc AS countc FROM foo.bar AS bar GROUP BY NULL AS n AGGREGATE SUM(DISTINCT (CAST a AS DOUBLE)) AS suma, COUNT(DISTINCT c) AS countc"
      result:
          - {"a": {"$numberInt": "123"}, "c": {"$numberInt": "2"}}

    - description: multi-item group key correctness test
      query: "SELECT * FROM foo.bar AS bar GROUP BY a AS a, b AS b AGGREGATE SUM(CAST(c AS DOUBLE)) AS sumc"
      result:
          - {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "6"}}
          - {"a": {"$numberInt": "2"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "5"}}
          - {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}, "c": {"$numberInt": "4"}}

    - description: multi-item group key with HAVING correctness test
      query: "SELECT * FROM foo.bar AS bar GROUP BY a AS a, b AS b AGGREGATE SUM(CAST(c AS DOUBLE)) AS sumc HAVING a != 1 AND sumc != 4"
      result:
          - {"a": {"$numberInt": "2"}, "b": {"$numberInt": "2"}, "c": {"$numberInt": "5"}}

    - description: AGGREGATE expressions must be aggregation functions, not arbitrary expressions
      query: "SELECT * FROM foo.bar AS bar GROUP BY a AS a AGGREGATE 1 + SUM(a)"
      error: "Expressions in AGGREGATE phrase must be aggregation function applications not arbitrary expressions"

    - description: AGGREGATE expressions must be aggregation functions, not scalar functions
      query: "SELECT * FROM foo.bar AS bar GROUP BY a AS a AGGREGATE COS(a)"
      error: "Expressions in AGGREGATE phrase must be aggregation function applications not scalar function applications"

    - description: field reference a is undefined in GROUP BY
      query: "SELECT a AS a, sb AS sb FROM foo.bar AS bar GROUP BY c AS c AGGREGATE SUM(CAST(b AS DOUBLE)) AS sb"
      error: "No such field a"

    - description: Aggregation functions are not allowed in SELECT VALUE
      query: "SELECT VALUE {'suma': SUM(a + 2) } FROM bar AS bar GROUP BY b AS b"
      error: "Aggregation functions are not allowed in SELECT VALUE clause"

    - description: HAVING without GROUP BY works as a WHERE cluase, but happens after the WHERE clause
      query: "SELECT * FROM foo.bar AS bar WHERE a < 15 HAVING a > 5"
      result:
        - {"a": {"$numberInt": "11"},"b": {"$numberInt": "22"},"c": {"$numberInt": "3"}}

    - description: ADD_TO_ARRAY correctness test
      query: "SELECT * FROM (SELECT _id::INT, a FROM foo.poly AS poly ORDER BY _id) AS arr GROUP BY a AS a AGGREGATE ADD_TO_ARRAY(a) AS garr"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "garr": [{"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}}, {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}}]
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "garr": [{"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}}]
          }
        - {
            "a": {"$numberInt": "3"},
            "garr": [3, 3]
          }
        - {
            "a": {"$numberInt": "4"},
            "garr": [4]
          }

    - description: ADD_TO_ARRAY(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE ADD_TO_ARRAY(*) AS garr"
      error: "* is not an allowed argument to ADD_TO_ARRAY"

    - description: ADD_TO_SET correctness test
      query: "SELECT * FROM (SELECT _id::INT, a FROM foo.poly AS poly ORDER BY _id) AS arr GROUP BY a AS a AGGREGATE ADD_TO_SET(CAST(a AS DOCUMENT)) AS gset"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "gset": [{"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}}]
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "gset": [{"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}}]
          }
        - {
            "a": {"$numberInt": "3"},
            "gset": [null]
          }
        - {
            "a": {"$numberInt": "4"},
            "gset": [null]
          }

    - description: ADD_TO_SET keeps first element seen of a duplicate group (resulting in DECIMAL)
      query: "SELECT gset, TYPE(gset[0]) AS ty FROM (SELECT * foo.numerics ORDER BY _id ASC) AS numeric GROUP BY NULL AS _ AGGREGATE ADD_TO_SET(a) AS gset"
      result:
        - {
            'gset': [{ '$numberDecimal': '3' }],
            'ty': 'DECIMAL'
          }

    - description: ADD_TO_SET keeps first element seen of a duplicate group (resulting in INT)
      query: "SELECT gset, TYPE(gset[0]) AS ty FROM (SELECT * foo.numerics ORDER BY _id DSC) AS numeric GROUP BY NULL AS _ AGGREGATE ADD_TO_SET(a) AS gset"
      result:
        - {
            "gset": [{ "$numberInt": "3" }],
            "ty": "INT"
          }

    - description: ADD_TO_SET(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE ADD_TO_SET(*) AS gset"
      error: "* is not an allowed argument to ADD_TO_SET"

    - description: ADD_TO_SET requires all elements have statically uniform type
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE ADD_TO_SET(a) AS gset"
      error: "Argument to ADD_TO_SET must have statically uniform type"

    - description: AVG correctness test
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE AVG(CAST(a AS DOUBLE)) AS gavg"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "gavg": {"$numberInt": "0"}
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "gavg": {"$numberInt": "0"}
          }
        - {
            "a": {"$numberInt": "3"},
            "gavg": {"$numberInt": "3"}
          }
        - {
            "a": {"$numberInt": "4"},
            "gavg": {"$numberInt": "4"}
          }

    - description: AVG(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE AVG(*) AS gavg"
      error: "* is not an allowed argument to AVG"

    - description: AVG requires a statically numeric argument
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE AVG(a) AS gavg"
      error: "Argument to AVG must be statically determined as NUMERIC"

    - description: COUNT correctness test
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE COUNT(a) AS gcount"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "gcount": {"$numberInt": "2"}
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "gcount": {"$numberInt": "1"}
          }
        - {
            "a": {"$numberInt": "3"},
            "gcount": {"$numberInt": "2"}
          }
        - {
            "a": {"$numberInt": "4"},
            "gcount": {"$numberInt": "1"}
          }

    - description: COUNT(MISSING) and COUNT(NULL) skip MISSING and NULL values
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE COUNT(a.a) AS gcounta, COUNT(NULL) AS gcountn"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "gcounta": {"$numberInt": "2"},
            "gcountn": {"$numberInt": "0"}
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "gcounta": {"$numberInt": "1"},
            "gcountn": {"$numberInt": "0"}
          }
        - {
            "a": {"$numberInt": "3"},
            "gcounta": {"$numberInt": "0"},
            "gcountn": {"$numberInt": "0"}
          }
        - {
            "a": {"$numberInt": "4"},
            "gcounta": {"$numberInt": "0"},
            "gcountn": {"$numberInt": "0"}
          }

    - description: FIRST correctness test
      query: "SELECT * FROM (SELECT _id::INT, a FROM foo.poly AS poly ORDER BY _id) AS arr GROUP BY a AS a AGGREGATE FIRST(a) AS gfirst"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "gfirst": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}}
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "gfirst": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}}
          }
        - {
            "a": {"$numberInt": "3"},
            "gfirst": {"$numberInt": "3"}
          }
        - {
            "a": {"$numberInt": "4"},
            "gfirst": {"$numberInt": "4"}
          }

    - description: FIRST(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE FIRST(*) AS gfirst"
      error: "* is not an allowed argument to FIRST"

    - description: LAST correctness test
      query: "SELECT * FROM (SELECT _id::INT, a FROM foo.poly AS poly ORDER BY _id) AS arr GROUP BY a AS a AGGREGATE LAST(a) AS glast"
      result:
        - {
            "a": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}},
            "glast": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}}
          }
        - {
            "a": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}},
            "glast": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}}
          }
        - {
            "a": {"$numberInt": "3"},
            "glast": {"$numberInt": "3"}
          }
        - {
            "a": {"$numberInt": "4"},
            "glast": {"$numberInt": "4"}
          }

    - description: LAST(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE LAST(*) AS glast"
      error: "* is not an allowed argument to LAST"

    - description: MAX correctness test
      query: "SELECT * FROM foo.bar AS arr GROUP BY a AS a AGGREGATE MAX(CAST(b AS INT)) AS gmax"
      result:
        -  {"a": {"$numberInt": "1"},"gmax": {"$numberInt": "42"}}
        -  {"a": {"$numberInt": "11"},"gmax": {"$numberInt": "22"}}
        -  {"a": {"$numberInt": "111"},"gmax": {"$numberInt": "142"}}

    - description: MAX(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE MAX(*) AS gmax"
      error: "* is not an allowed argument to MAX"

    - description: MAX must have statically uniform type
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE MAX(a) AS gmax"
      error: "Argument to MAX must have statically uniform type"

    - description: MERGE_DOCUMENTS correctness test
      query: "SELECT * FROM (SELECT _id::INT, a FROM foo.poly2 AS poly2 ORDER BY _id) AS arr GROUP BY a.a AS a MERGE_DOCUMENTS(CAST(a.a AS DOCUMENT)) AS gmerge"
      result:
        - {
            "a": {"$numberInt": "1"},
            "gmerge": {"a": {"$numberInt": "1"}, "b": {"$numberInt": "2"}}
          }
        - {
            "a": {"$numberInt": "2"},
            "gmerge": {"a": {"$numberInt": "2"}, "b": {"$numberInt": "3"}}
          }
        - {
            "a": null,
            "gmerge": {"c": {"$numberInt": "1"}}
          }

    - description: MERGE_DOCUMENTS(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE MERGE_DOCUMENTS(*) AS gmerge"
      error: "* is not an allowed argument to MERGE_DOCUMENTS"

    - description: MERGE_DOCUMENTS requires a statically document argument
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE MERGE_DOCUMENTS(a) AS gmerge"
      error: "Argument to MERGE_DOCUMENTS must be statically determined as DOCUMENT"

    - description: MIN correctness test
      query: "SELECT * FROM foo.bar AS arr GROUP BY a AS a AGGREGATE MIN(CAST(b AS INT)) AS gmin"
      result:
        -    {"a": {"$numberInt": "1"},"gmin": {"$numberInt": "2"}}
        -    {"a": {"$numberInt": "11"},"gmin": {"$numberInt": "22"}}
        -    {"a": {"$numberInt": "111"},"gmin": {"$numberInt": "142"}}

    - description: MIN(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE MIN(*) AS gmin"
      error: "* is not an allowed argument to MIN"

    - description: MIN must have statically uniform type
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE MIN(a) AS gmin"
      error: "Argument to MIN must have statically uniform type"

    - description: STDDEV_POP correctness test
      query: "SELECT * FROM foo.poly AS arr GROUP BY a.a AS a AGGREGATE STDDEV_POP(CAST(a AS DOUBLE)) AS gstdp"
      result:
        - {
            "a": {"$numberInt": "1"},
            "gstdp": {"$numberInt": "0"}
          }
        - {
            "a": {"$numberInt": "2"},
            "gstdp": {"$numberInt": "0"}
          }
        - {
            "a": null,
            "gstdp": {"$numberDouble": "0.4714045207910316"}
          }

    - description: STDDEV_POP(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE STDDEV_POP(*) AS gstdp"
      error: "* is not an allowed argument to STDDEV_POP"

    - description: STDDEV_POP requires a statically numeric argument
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE STDDEV_POP(a) AS gstdp"
      error: "Argument to STDDEV_POP must be statically determined as NUMERIC"

    - description: STDDEV_SAMP correctness test
      query: "SELECT * FROM foo.poly AS arr GROUP BY a.a AS a AGGREGATE STDDEV_SAMP(CAST(a AS DOUBLE)) as gstds"
      result:
        - {
            "a": {"$numberInt": "1"},
            "gstds": {"$numberInt": "0"}
          }
        - {
            "a": {"$numberInt": "2"},
            "gstds": {"$numberInt": "0"}
          }
        - {
            "a": null,
            "gstds": {"$numberDouble": "0.4714045207910316"}
          }

    - description: STDDEV_SAMP(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE STDDEV_SAMP(*) AS gstds"
      error: "* is not an allowed argument to STDDEV_SAMP"

    - description: STDDEV_SAMP requires a statically numeric argument
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE STDDEV_SAMP(a) AS gstds"
      error: "Argument to STDDEV_SAMP must be statically determined as NUMERIC"

    - description: SUM correctness test
      query: "SELECT * FROM foo.poly AS arr GROUP BY a.a AS a AGGREGATE SUM(CAST(a AS DOUBLE)) AS gsum"
      result:
        - {
            "a": {"$numberInt": "1"},
            "gsum": {"$numberInt": "0"}
          }
        - {
            "a": {"$numberInt": "2"},
            "gsum": {"$numberInt": "0"}
          }
        - {
            "a": null,
            "gsum": {"$numberInt": "10"}
          }

    - description: SUM(*) is currently an error
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE SUM(*) AS gsum"
      error: "* is not an allowed argument to SUM"

    - description: SUM requires a statically numeric argument
      query: "SELECT * FROM foo.poly AS arr GROUP BY a AS a AGGREGATE SUM(a) AS gsum"
      error: "Argument to SUM must be statically determined as NUMERIC"
