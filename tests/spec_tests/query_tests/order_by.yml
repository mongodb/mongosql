catalog_data:
  mydb:
    foo:
      - {'_id': 0, 'a': 1, 'b': 'def'}
      - {'_id': 1, 'a': 2, 'b': 'abc'}
      - {'_id': 2, 'a': 1, 'b': 'abc'}
    bar:
      - {'_id': 0, 'a': 3, 'b': {'c': 1}}
      - {'_id': 1, 'a': 2, 'b': {'c': 3}}
      - {'_id': 2, 'a': 1, 'b': {'c': 2}}
    nullAndMissing:
      - {'_id': 0, 'a': null}
      - {'_id': 1}
      - {'_id': 2, 'a': null}
    nullAndNonNull:
      - {'_id': 0, 'a': null}
      - {'_id': 1, 'a': 1}
      - {'_id': 2, 'a': null}

catalog_schema:
  {
    'mydb': {
      'foo': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'bar': {
        'bsonType': 'object',
        'required': [ '_id', 'a', 'b' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': 'int'
          },
          'a': {
            'bsonType': 'int'
          },
          'b': {
            'bsonType': 'object',
            'properties': {
              'c': {
                'bsonType': 'int'
              }
            }
          },
        }
      },
      'nullAndMissing': {
        'bsonType': "object",
        'required': [ 'a' ],
        'additionalProperties': false,
        'properties': {
          'a': {
            'bsonType': !!str "null"
          },
        }
      },
      'nullAndNonNull': {
        'bsonType': 'object',
        'additionalProperies': true
      }
    }
  }

tests:
  - description: ascending-sort correctness test
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT} FROM foo AS foo ORDER BY a ASC"
    ordered: true
    result:
      - {'': {'a': 1}}
      - {'': {'a': 1}}
      - {'': {'a': 2}}

  - description: descending-sort correctness test
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT} FROM foo AS foo ORDER BY a DESC"
    ordered: true
    result:
      - {'': {'a': 2}}
      - {'': {'a': 1}}
      - {'': {'a': 1}}

  - description: multiple-sort-key correctness test
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT, 'b': b::!STRING} FROM foo AS foo ORDER BY a ASC, b ASC"
    ordered: true
    result:
      - {'': {'a': 1, 'b': 'abc'}}
      - {'': {'a': 1, 'b': 'def'}}
      - {'': {'a': 2, 'b': 'abc'}}

  - description: missing sorts before null
    current_db: mydb
    query: "SELECT * FROM nullAndMissing AS nullAndMissing ORDER BY a ASC"
    ordered: true
    result:
      - {'nullAndMissing': {'_id': 0, 'a': null}}
      - {'nullAndMissing': {'_id': 1}}
      - {'nullAndMissing': {'_id': 2, 'a': null}}

  - description: null sorts before non-null values
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT} FROM nullAndNonNull AS nullAndNonNull ORDER BY a ASC"
    ordered: true
    result:
      - {'': {'a': null}}
      - {'': {'a': null}}
      - {'': {'a': 1}}

  - description: sort keys must be mutually comparable types
    current_db: mydb
    query: "SELECT VALUE {'a': a} FROM foo ORDER BY a ASC"
    should_compile: false
    algebrize_error: "sort key at position 0 is not statically comparable to itself because it has the schema AnyOf({Any, Missing})"

  - description: column references in sort keys can be qualified with table name after select star
    current_db: mydb
    query: "SELECT * FROM bar AS bar ORDER BY bar.a ASC"
    ordered: true
    result:
      - {'bar': {'_id': 2, 'a': 1, 'b': {'c': 2}}}
      - {'bar': {'_id': 1, 'a': 2, 'b': {'c': 3}}}
      - {'bar': {'_id': 0, 'a': 3, 'b': {'c': 1}}}

  - description: column references in sort keys can be qualified with table name after select substar
    current_db: mydb
    query: "SELECT VALUE bar.* FROM bar AS bar ORDER BY bar.a ASC"
    ordered: true
    result:
      - {'bar': {'_id': 2, 'a': 1, 'b': {'c': 2}}}
      - {'bar': {'_id': 1, 'a': 2, 'b': {'c': 3}}}
      - {'bar': {'_id': 0, 'a': 3, 'b': {'c': 1}}}

  - description: column references in sort keys can be compound identifiers referencing document subfields
    current_db: mydb
    query: "SELECT VALUE {'b': b} FROM bar AS bar ORDER BY b.c ASC"
    ordered: true
    result:
      - {'': {'b': {'c': 1}}}
      - {'': {'b': {'c': 2}}}
      - {'': {'b': {'c': 3}}}

  - description: column references in sort keys can be compound identifiers referencing document subfields and be qualified with table name
    current_db: mydb
    query: "SELECT * FROM bar AS bar ORDER BY bar.b.c ASC"
    ordered: true
    result:
      - {'bar': {'_id': 0, 'a': 3, 'b': {'c': 1}}}
      - {'bar': {'_id': 2, 'a': 1, 'b': {'c': 2}}}
      - {'bar': {'_id': 1, 'a': 2, 'b': {'c': 3}}}

  - description: allow qualified order by fields in ORDER BY because some BI tools require this even though it is not correct SQL92
    current_db: mydb
    query: "SELECT a, _id FROM bar AS bar ORDER BY bar.a ASC, _id"
    ordered: true
    result:
      - {'': {'a': 1, '_id': 2}}
      - {'': {'a': 2, '_id': 1}}
      - {'': {'a': 3, '_id': 0}}

  - description: qualified order by fields in ORDER BY select the proper data source where there are multiple datasources in scope
    current_db: mydb
    query: "SELECT * FROM bar AS a JOIN bar AS b ORDER BY a.a ASC"
    ordered: true
    result:
      - {
          'a': {'_id': 2, 'a': 1, 'b': {'c': 2}},
          'b': {'_id': 2, 'a': 1, 'b': {'c': 2}},
        }
      - {
          'a': {'_id': 2, 'a': 1, 'b': {'c': 2}},
          'b': {'_id': 1, 'a': 2, 'b': {'c': 3}}
        }
      - {
          'a': {'_id': 2, 'a': 1, 'b': {'c': 2}},
          'b': {'_id': 0, 'a': 3, 'b': {'c': 1}}
        }
      - {
          'a': {'_id': 1, 'a': 2, 'b': {'c': 3}},
          'b': {'_id': 2, 'a': 1, 'b': {'c': 2}}
        }
      - {
          'a': {'_id': 1, 'a': 2, 'b': {'c': 3}},
          'b': {'_id': 1, 'a': 2, 'b': {'c': 3}}
        }
      - {
          'a': {'_id': 1, 'a': 2, 'b': {'c': 3}},
          'b': {'_id': 0, 'a': 3, 'b': {'c': 1}}
        }
      - {
          'a': {'_id': 0, 'a': 3, 'b': {'c': 1}},
          'b': {'_id': 2, 'a': 1, 'b': {'c': 2}}
        }
      - {
          'a': {'_id': 0, 'a': 3, 'b': {'c': 1}},
          'b': {'_id': 1, 'a': 2, 'b': {'c': 3}}
        }
      - {
          'a': {'_id': 0, 'a': 3, 'b': {'c': 1}},
          'b': {'_id': 0, 'a': 3, 'b': {'c': 1}}
        }

  - description: ordering by ambiguous column reference is an error
    current_db: mydb
    query: "SELECT VALUES {'a': 1}, bar.* FROM bar AS bar ORDER BY a ASC"
    should_compile: false
    algebrize_error: "ambiguous field `a`"

  - description: ordering by a non-integer constant expression is an error
    current_db: mydb
    query: "SELECT VALUE {'a': a} FROM foo ORDER BY 1.0 DESC"
    should_compile: false
    parse_error: "failed to parse ORDER BY sort key"

  - description: ordering by a complex expression is an error
    current_db: mydb
    query: "SELECT VALUE {'a': a} FROM foo ORDER BY 1 + 2 DESC"
    should_compile: false
    parse_error: "Unrecognized token `+`"

  - description: ordering by a negative number is an error because it is a complex expr
    query: "SELECT a FROM foo ORDER BY -1"
    should_compile: false
    parse_error: "Unrecognized token `-`"
