catalog_data:
  mydb:
    foo:
      - { '_id': 0, 'a': 1, 'b': 'def' }
      - { '_id': 1, 'a': 2, 'b': 'abc' }
      - { '_id': 2, 'a': 1, 'b': 'abc' }
    bar:
      - { '_id': 0, 'a': 3, 'b': { 'c': 1 } }
      - { '_id': 1, 'a': 2, 'b': { 'c': 3 } }
      - { '_id': 2, 'a': 1, 'b': { 'c': 2 } }
    nullAndNonNull:
      - { '_id': 0, 'a': null }
      - { '_id': 1, 'a': 1 }
      - { '_id': 2, 'a': null }
    baz:
      - {
        "_id": 0,
        "a": { "$numberInt": "1" },
        "b": { "$numberInt": "2" },
        "coll": "foo",
      }
      - {
        "_id": 1,
        "a": { "$numberInt": "2" },
        "b": { "$numberInt": "1" },
        "coll": "foo",
      }
    local:
      - { '_id': 0 }
      - { '_id': 1 }
      - { '_id': 2 }
    foreign:
      - { '_id': 0, 'l_id': 0, 'x': 0 }
      - { '_id': 1, 'l_id': 1, 'x': 1 }
      - { '_id': 2, 'l_id': 0, 'x': 2 }
      - { '_id': 3, 'l_id': 1, 'x': 1 }
      - { '_id': 4, 'l_id': 0, 'x': 3 }
      - { '_id': 5, 'l_id': 1, 'x': 2 }
      - { '_id': 6, 'l_id': 0, 'x': 2 }
      - { '_id': 7, 'l_id': 1, 'x': 2 }
      - { '_id': 8, 'l_id': 0, 'x': 3 }
      - { '_id': 9, 'l_id': 1, 'x': 0 }
    car:
      - { '_id': 0, 's': 'xyz' }
      - { '_id': 1, 's': 'abc' }
      - { '_id': 2, 's': 'abc' }

catalog_schema:
  {
    'mydb': {
      'foo': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'bar': {
        'bsonType': 'object',
        'required': [ '_id', 'a', 'b' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': 'int'
          },
          'a': {
            'bsonType': 'int'
          },
          'b': {
            'bsonType': 'object',
            'properties': {
              'c': {
                'bsonType': 'int'
              }
            }
          },
        }
      },
      'nullAndNonNull': {
        'bsonType': 'object',
        'additionalProperies': true
      },
      "baz":
        {
          "bsonType": "object",
          "required": [ "_id", "a", "b", "coll" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
              "a": { "bsonType": "int" },
              "b": { "bsonType": "int" },
              "coll": { "bsonType": "string" },
            },
        },
      "local":
        {
          "bsonType": "object",
          "required": [ "_id" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
            },
        },
      "foreign":
        {
          "bsonType": "object",
          "required": [ "_id", "l_id", "x" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
              "l_id": { "bsonType": "int" },
              "x": { "bsonType": "int" },
            },
        },
      "car":
        {
          "bsonType": "object",
          "required": [ "_id", "s" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
              "s": { "bsonType": "string" },
            },
        },
    }
  }

tests:
  - description: ascending-sort correctness test
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT} FROM foo AS foo ORDER BY a ASC"
    ordered: true
    result:
      - { '': { 'a': 1 } }
      - { '': { 'a': 1 } }
      - { '': { 'a': 2 } }

  - description: descending-sort correctness test
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT} FROM foo AS foo ORDER BY a DESC"
    ordered: true
    result:
      - { '': { 'a': 2 } }
      - { '': { 'a': 1 } }
      - { '': { 'a': 1 } }

  - description: multiple-sort-key correctness test
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT, 'b': b::!STRING} FROM foo AS foo ORDER BY a ASC, b ASC"
    ordered: true
    result:
      - { '': { 'a': 1, 'b': 'abc' } }
      - { '': { 'a': 1, 'b': 'def' } }
      - { '': { 'a': 2, 'b': 'abc' } }

  - description: null sorts before non-null values
    current_db: mydb
    query: "SELECT VALUE {'a': a::!INT} FROM nullAndNonNull AS nullAndNonNull ORDER BY a ASC"
    ordered: true
    result:
      - { '': { 'a': null } }
      - { '': { 'a': null } }
      - { '': { 'a': 1 } }

  - description: sort keys must be mutually comparable types
    current_db: mydb
    query: "SELECT VALUE {'a': a} FROM foo ORDER BY a ASC"
    should_compile: false
    algebrize_error: "sort key at position 0 is not statically comparable to itself because it has the schema AnyOf({Any, Missing})"

  - description: column references in sort keys can be qualified with table name after select star
    current_db: mydb
    query: "SELECT * FROM bar AS bar ORDER BY bar.a ASC, bar.b ASC, bar._id ASC"
    ordered: true
    result:
      - { 'bar': { '_id': 2, 'a': 1, 'b': { 'c': 2 } } }
      - { 'bar': { '_id': 1, 'a': 2, 'b': { 'c': 3 } } }
      - { 'bar': { '_id': 0, 'a': 3, 'b': { 'c': 1 } } }

  - description: column references in sort keys can be qualified with table name after select substar
    current_db: mydb
    query: "SELECT VALUE bar.* FROM bar AS bar ORDER BY bar.a ASC, bar.b ASC, bar._id ASC"
    ordered: true
    result:
      - { 'bar': { '_id': 2, 'a': 1, 'b': { 'c': 2 } } }
      - { 'bar': { '_id': 1, 'a': 2, 'b': { 'c': 3 } } }
      - { 'bar': { '_id': 0, 'a': 3, 'b': { 'c': 1 } } }

  - description: column references in sort keys can be compound identifiers referencing document subfields
    current_db: mydb
    query: "SELECT VALUE {'b': b} FROM bar AS bar ORDER BY b.c ASC"
    ordered: true
    result:
      - { '': { 'b': { 'c': 1 } } }
      - { '': { 'b': { 'c': 2 } } }
      - { '': { 'b': { 'c': 3 } } }

  - description: column references in sort keys can be compound identifiers referencing document subfields and be qualified with table name
    current_db: mydb
    query: "SELECT * FROM bar AS bar ORDER BY bar.b.c ASC, bar.a ASC, bar._id ASC"
    ordered: true
    result:
      - { 'bar': { '_id': 0, 'a': 3, 'b': { 'c': 1 } } }
      - { 'bar': { '_id': 2, 'a': 1, 'b': { 'c': 2 } } }
      - { 'bar': { '_id': 1, 'a': 2, 'b': { 'c': 3 } } }

  - description: allow qualified order by fields in ORDER BY because some BI tools require this even though it is not correct SQL92
    current_db: mydb
    query: "SELECT a, _id FROM bar AS bar ORDER BY bar.a ASC, _id"
    ordered: true
    result:
      - { '': { 'a': 1, '_id': 2 } }
      - { '': { 'a': 2, '_id': 1 } }
      - { '': { 'a': 3, '_id': 0 } }

  - description: qualified order by fields in ORDER BY select the proper data source where there are multiple datasources in scope
    current_db: mydb
    query: "SELECT * FROM bar AS a JOIN bar AS b ORDER BY a.a ASC, a ASC, b ASC"
    ordered: true
    skip_reason: "SQL-2405"
    result:
      - {
        'a': { '_id': 2, 'a': 1, 'b': { 'c': 2 } },
        'b': { '_id': 2, 'a': 1, 'b': { 'c': 2 } },
      }
      - {
        'a': { '_id': 2, 'a': 1, 'b': { 'c': 2 } },
        'b': { '_id': 1, 'a': 2, 'b': { 'c': 3 } }
      }
      - {
        'a': { '_id': 2, 'a': 1, 'b': { 'c': 2 } },
        'b': { '_id': 0, 'a': 3, 'b': { 'c': 1 } }
      }
      - {
        'a': { '_id': 1, 'a': 2, 'b': { 'c': 3 } },
        'b': { '_id': 2, 'a': 1, 'b': { 'c': 2 } }
      }
      - {
        'a': { '_id': 1, 'a': 2, 'b': { 'c': 3 } },
        'b': { '_id': 1, 'a': 2, 'b': { 'c': 3 } }
      }
      - {
        'a': { '_id': 1, 'a': 2, 'b': { 'c': 3 } },
        'b': { '_id': 0, 'a': 3, 'b': { 'c': 1 } }
      }
      - {
        'a': { '_id': 0, 'a': 3, 'b': { 'c': 1 } },
        'b': { '_id': 2, 'a': 1, 'b': { 'c': 2 } }
      }
      - {
        'a': { '_id': 0, 'a': 3, 'b': { 'c': 1 } },
        'b': { '_id': 1, 'a': 2, 'b': { 'c': 3 } }
      }
      - {
        'a': { '_id': 0, 'a': 3, 'b': { 'c': 1 } },
        'b': { '_id': 0, 'a': 3, 'b': { 'c': 1 } }
      }

  - description: ordering by ambiguous column reference is an error
    current_db: mydb
    query: "SELECT * FROM bar AS b1 JOIN bar AS b2 ORDER BY a ASC"
    should_compile: false
    algebrize_error: "ambiguous field `a`"

  - description: ordering by a non-integer constant expression is an error
    current_db: mydb
    query: "SELECT VALUE {'a': a} FROM foo ORDER BY 1.0 DESC"
    should_compile: false
    parse_error: "failed to parse ORDER BY sort key"

  - description: ordering by a complex expression is an error
    current_db: mydb
    query: "SELECT VALUE {'a': a} FROM foo ORDER BY 1 + 2 DESC"
    should_compile: false
    parse_error: "Unrecognized token `+`"

  - description: ordering by a negative number is an error because it is a complex expr
    query: "SELECT a FROM foo ORDER BY -1"
    should_compile: false
    parse_error: "Unrecognized token `-`"

  - description: allowing ordering by column not in Select still supports ordering by computed column
    current_db: mydb
    query: "SELECT _id, a, b + 42 as c from baz order by b, c, a, _id"
    result:
      - { "":
            {
              "_id": 1,
              "a": { "$numberInt": "2" },
              "c": 43,
            }
      }
      - { "":
            {
              "_id": 0,
              "a": { "$numberInt": "1" },
              "c": 44
            }
      }

  - description: allow ordering by column not in Select
    current_db: mydb
    query: "SELECT _id, a from baz order by b, a, _id"
    result:
      - { "":
            {
              "_id": 1,
              "a": { "$numberInt": "2" },
            }
      }
      - { "":
            {
              "_id": 0,
              "a": { "$numberInt": "1" },
            }
      }

  - description: ordering by column in select list that shadows column from data sources still works
    current_db: mydb
    query: "SELECT _id, a from baz order by a, _id"
    result:
      - { "":
            {
              "_id": 0,
              "a": { "$numberInt": "1" },
            }
      }
      - { "":
            {
              "_id": 1,
              "a": { "$numberInt": "2" },
            }
      }

  - description: ordering by column not in Select in join must be qualified
    current_db: mydb
    query: "SELECT a._id, b.a, b.b + 42 as c from baz a join baz b order by b, c"
    algebrize_error: "Error 3009: Field `b` in the `ORDER BY` clause at the 0 scope level exists in multiple datasources and is ambiguous. Please qualify."

  - description: ordering by column not in Select in join works when qualified
    current_db: mydb
    query: "SELECT b._id, a.a, b.b + 42 as c from baz a join baz b order by a.b, c, b._id, a.a"
    result:
      - { "":
            {
              "_id": { "$numberInt": "1" },
              "a": { "$numberInt": "2" },
              "c": { "$numberInt": "43" }
            }
      }
      - { "":
            {
              "_id": { "$numberInt": "0" },
              "a": { "$numberInt": "2" },
              "c": { "$numberInt": "44" }
            }
      }
      - { "":
            {
              "_id": { "$numberInt": "1" },
              "a": { "$numberInt": "1" },
              "c": { "$numberInt": "43" }
            }
      }
      - { "":
            {
              "_id": { "$numberInt": "0" },
              "a": { "$numberInt": "1" },
              "c": { "$numberInt": "44" }
            }
      }

  - description: allow ordering by column not in Select even with group by
    current_db: mydb
    query: "SELECT a, b + 42 as c from baz group by a, b order by b, c, a"
    result:
      - { "":
            { "a": { "$numberInt": "2" }, "c": { "$numberInt": "43" } }
      }
      - { "":
            { "a": { "$numberInt": "1" }, "c": { "$numberInt": "44" } }
      }

  - description: Sorting by column from RHS of LEFT JOIN orders the entire result set
    current_db: mydb
    query: "SELECT l._id, f.x FROM local AS l LEFT JOIN foreign AS f ON l._id = f.l_id ORDER BY x, l._id ASC"
    ordered: true
    result:
      - { '': { _id: 2 } }
      - { '': { _id: 0, x: 0 } }
      - { '': { _id: 1, x: 0 } }
      - { '': { _id: 1, x: 1 } }
      - { '': { _id: 1, x: 1 } }
      - { '': { _id: 0, x: 2 } }
      - { '': { _id: 0, x: 2 } }
      - { '': { _id: 1, x: 2 } }
      - { '': { _id: 1, x: 2 } }
      - { '': { _id: 0, x: 3 } }
      - { '': { _id: 0, x: 3 } }

  - description: Sorting by column from RHS of INNER JOIN orders the entire result set
    current_db: mydb
    query: "SELECT l._id, f.x FROM local AS l JOIN foreign AS f ON l._id = f.l_id ORDER BY x ASC, l._id ASC"
    ordered: true
    result:
      - { '': { _id: 0, x: 0 } }
      - { '': { _id: 1, x: 0 } }
      - { '': { _id: 1, x: 1 } }
      - { '': { _id: 1, x: 1 } }
      - { '': { _id: 0, x: 2 } }
      - { '': { _id: 0, x: 2 } }
      - { '': { _id: 1, x: 2 } }
      - { '': { _id: 1, x: 2 } }
      - { '': { _id: 0, x: 3 } }
      - { '': { _id: 0, x: 3 } }

  - description: ensure ORDER BY does not introduce extraneous columns
    current_db: mydb
    query: "SELECT COUNT(s) AS alias1, s AS alias2 FROM car GROUP BY s ORDER BY alias2, alias1"
    result:
      - { '': { 'alias1': 2, 'alias2': 'abc' } }
      - { '': { 'alias1': 1, 'alias2': 'xyz' } }

