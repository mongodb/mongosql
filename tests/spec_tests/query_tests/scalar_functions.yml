catalog_data:
  foo:
    nullif:
      - {'_id': 0, 'v1': 'a', 'v2': 'a'}
      - {'_id': 1, 'v1': 'a', 'v2': 'b'}
      - {'_id': 2, 'v1': 'a', 'v2': null}
      - {'_id': 3, 'v1': null, 'v2': 'b'}
      - {'_id': 4, 'v1': 'a'}
      - {'_id': 5, 'v2': 'b'}
      - {'_id': 6}
    twoArgCoalesce:
      - {'_id': 0, 'v1': 123, 'v2': 456}
      - {'_id': 1, 'v1': null, 'v2': 456}
      - {'_id': 2, 'v2': 456}
    multiArgCoalesce:
      - {'_id': 0, 'v1': 123, 'v2': null, 'v4': 789, 'v5': null}
      - {'_id': 1, 'v1': null, 'v3': 456, 'v4': 789}
      - {'_id': 2, 'v2': null, 'v3': null, 'v5': 789}
      - {'_id': 3, 'v1': null, 'v2': null, 'v5': null}
    size:
      - {'_id': 0, 'a': []}
      - {'_id': 1, 'a': [1]}
      - {'_id': 2, 'a': [1, 2, 3]}
      - {'_id': 3, 'a': null}
      - {'_id': 4}
    position:
      - {'_id': 0, 's1': '', 's2': 'abc'}
      - {'_id': 1, 's1': 'a', 's2': 'abc'}
      - {'_id': 2, 's1': 'b', 's2': 'abc'}
      - {'_id': 3, 's1': 'b', 's2': 'abbbc'}
      - {'_id': 4, 's1': 'bc', 's2': 'abbcbc'}
      - {'_id': 5, 's1': 'x', 's2': 'abc'}
      - {'_id': 6, 's1': null, 's2': 'abc'}
      - {'_id': 7, 's2': 'abc'}
      - {'_id': 8, 's1': 'b', 's2': null}
      - {'_id': 9, 's1': 'b'}
    length:
      - {'_id': 0, 's': ''}
      - {'_id': 1, 's': 'a'}
      - {'_id': 2, 's': 'ã'}
      - {'_id': 3, 's': 'abc'}
      - {'_id': 5, 's': '$€λG', 'comment': '€ is encoded using three bytes. λ is encoded using two bytes.'}
      - {'_id': 6, 's': '寿司', 'comment': 'Each character is encoded using three bytes.'}
      - {'_id': 7, 's': null}
      - {'_id': 8}
    nullAndMissing:
      - {'_id': 0, 'd': null}
      - {'_id': 1}
    substring:
      - {'_id': 0, 'str': '', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '1'}}
      - {'_id': 1, 'str': '', 'start': {'$numberInt': '1'}, 'length': {'$numberInt': '1'}}
      - {'_id': 2, 'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '-1'}}
      - {'_id': 3, 'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '0'}}
      - {'_id': 4, 'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '1'}}
      - {'_id': 5, 'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '2'}}
      - {'_id': 6, 'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '4'}}
      - {'_id': 7, 'str': 'abc', 'start': {'$numberInt': '1'}, 'length': {'$numberInt': '2'}}
      - {'_id': 8, 'str': 'abc', 'start': {'$numberInt': '2'}, 'length': {'$numberInt': '-1'}}
      - {'_id': 9, 'str': '$€λGx', 'start': {'$numberInt': '1'}, 'length': {'$numberInt': '3'}}
      - {'_id': 10, 'str': null, start: {'$numberInt': '1'}, length: {'$numberInt': '1'}}
      - {'_id': 11, start: {'$numberInt': '1'}, length: {'$numberInt': '1'}}
      - {'_id': 12, 'str': 'abc', start: null, length: {'$numberInt': '1'}}
      - {'_id': 13, 'str': 'abc', length: {'$numberInt': '1'}}
      - {'_id': 14, 'str': 'abc', 'start': {'$numberInt': '1'}, 'length': null}
      - {'_id': 15, 'str': 'abc', 'start': {'$numberInt': '1'}}
    fold:
      - {'_id': 0, 's': ''}
      - {'_id': 1, 's': 'abcd'}
      - {'_id': 2, 's': 'aBcD'}
      - {'_id': 3, 's': 'ABCD'}
      - {'_id': 4, 's': null}
      - {'_id': 5}
    trim:
      - {'_id': 0, 'substr': '', 'str': ''}
      - {'_id': 1, 'substr': ' ', 'str': ''}
      - {'_id': 2, 'substr': ' ', 'str': '   '}
      - {'_id': 3, 'substr': ' ', 'str': 'abc'}
      - {'_id': 4, 'substr': ' ', 'str': '  abc  '}
      - {'_id': 5, 'substr': 'x', 'str': 'x abc x'}
      - {'_id': 6, 'substr': '123', 'str': '123abc123'}
      - {'_id': 7, 'substr': null, 'str': 'abc'}
      - {'_id': 8, 'str': 'abc'}
      - {'_id': 9, 'substr': ' ', 'str': null}
      - {'_id': 10, 'substr': ' '}

catalog_schema:
  {
    "foo": {
      "nullif": {
        "bsonType": "object",
        'required': [ '_id', 'v1', 'v2' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "v1": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          },
          "v2": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      },
      "size": {
        "bsonType": "object",
        'required': [ '_id', 'a' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "a": {
            "anyOf": [
              { "bsonType": "array" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      },
      "length": {
        "bsonType": "object",
        'required': [ '_id', 'a' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "a": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      },
      "nullAndMissing": {
        "bsonType": "object",
        'required': [ '_id', 'd' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "d": {
            "anyOf": [
              { "bsonType": "date" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      },
      "substring": {
        "bsonType": "object",
        'required': [ '_id', 'str', 'start', 'length' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "str": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          },
          "start": {
            "anyOf": [
              { "bsonType": "int" },
              { "bsonType": !!str "null" }
            ]
          },
          "length": {
            "anyOf": [
              { "bsonType": "int" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      },
      "fold": {
        "bsonType": "object",
        'required': [ '_id', 's' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "s": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      },
      "trim": {
        "bsonType": "object",
        'required': [ '_id', 'substr', 'str' ],
        'additionalProperties': false,
        "properties": {
          "_id": {
            "bsonType": "int"
          },
          "substr": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          },
          "str": {
            "anyOf": [
              { "bsonType": "string" },
              { "bsonType": !!str "null" }
            ]
          }
        }
      }
    }
  }

tests:
  - description: NULLIF correctness test
    current_db: foo
    query: "SELECT VALUE {'v1': v1, 'v2': v2, 'v': NULLIF(v1, v2)} FROM nullif AS c"
    translation_target_db: foo
    translation_target_coll: nullif
    translation:
      - {'$project': {'_id': 0, 'nullif': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$nullif'}}
      - {'$project': {'_id': 0, '__bot': {'v1': '$c.v1', 'v2': '$c.v2', 'v': {'$nullIf': ['$c.v1', '$c.v2']}}}}
    result:
      - {'__bot': {'v1': 'a', 'v2': 'a', 'v': null}}
      - {'__bot': {'v1': 'a', 'v2': 'b', 'v': 'a'}}
      - {'__bot': {'v1': 'a', 'v2': null, 'v': 'a'}}
      - {'__bot': {'v1': null, 'v2': 'b', 'v': null}}
      - {'__bot': {'v1': 'a', 'v': 'a'}}
      - {'__bot': {'v2': 'b', 'v': null}}
      - {'__bot': {'v': null}}

  - description: COALESCE(v1, v2) correctness tests
    current_db: foo
    query: "SELECT VALUE {'v1': v1, 'v2': v2, 'v': COALESCE(v1, v2)} FROM twoArgCoalesce AS c"
    translation_target_db: foo
    translation_target_coll: twoArgCoalesce
    translation:
      - {'$project': {'_id': 0, 'twoArgCoalesce': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$twoArgCoalesce'}}
      - {'$project': {'_id': 0, '__bot': {'v1': '$c.v1', 'v2': '$c.v2', 'v': {'$coalesce': ['$c.v1', '$c.v2']}}}}
    result:
      - {'__bot': {'v1': 123, 'v2': 456, 'v': 123}}
      - {'__bot': {'v1': null, 'v2': 456, 'v': 456}}
      - {'__bot': {'v2': 456, 'v': 456}}

  - description: COALESCE(v1, ..., vn) correctness tests
    current_db: foo
    query: "SELECT VALUE {'v1': v1, 'v2': v2, 'v3': v3, 'v4': v4, 'v5': v5, 'v': COALESCE(v1, v2, v3, v4, v5)} FROM multiArgCoalesce AS c"
    translation_target_db: foo
    translation_target_coll: multiArgCoalesce
    translation:
      - {'$project': {'_id': 0, 'multiArgCoalesce': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$multiArgCoalesce'}}
      - {'$project': {'_id': 0, '__bot': {'v1': '$c.v1', 'v2': '$c.v2', 'v3': '$c.v3', 'v4': '$c.v4', 'v5': '$c.v5', 'v': {'$coalesce': ['$c.v1', '$c.v2', '$c.v3', '$c.v4', '$c.v5']}}}}
    result:
      - {'__bot': {'v1': 123, 'v2': null, 'v4': 789, 'v5': null, 'v': 123}}
      - {'__bot': {'v1': null, 'v3': 456, 'v4': 789, 'v': 456}}
      - {'__bot': {'v2': null, 'v3': null, 'v5': 789, 'v': 789}}
      - {'__bot': {'v1': null, 'v2': null, 'v5': null, 'v': null}}

  - description: SIZE correctness tests
    current_db: foo
    query: "SELECT VALUE {'a': a, 's': SIZE(a)} FROM size AS c"
    translation_target_db: foo
    translation_target_coll: size
    translation:
      - {'$project': {'_id': 0, 'size': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$size'}}
      - {'$project': {'_id': 0, '__bot': {'a': '$c.a', 's': {'$sqlSize': '$c.a'}}}}
    result:
      - {'__bot': {'a': [], 's': 0}}
      - {'__bot': {'a': [1], 's': 1}}
      - {'__bot': {'a': [1, 2, 3], 's': 3}}
      - {'__bot': {'a': null, 's': null}}
      - {'__bot': {'s': null}}

  - description: POSITION correctness tests
    current_db: foo
    query: "SELECT VALUE {'s1': s1, 's2': s2, 'p': POSITION(s1 IN s2)} FROM `position` AS c"
    skip_reason: "SQL-482: schema check POSITION"
    translation_target_db: foo
    translation_target_coll: position
    translation:
      - {'$project': {'_id': 0, 'position': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$position'}}
      - {'$project': {'_id': 0, '__bot': {'s1': '$c.s1', 's2': '$c.s2', 'p': {'$sqlIndexOfCP': ['$c.s2', '$c.s1']}}}}
    result:
      - {'__bot': {'s1': '', 's2': 'abc', 'p': 0}}
      - {'__bot': {'s1': 'a', 's2': 'abc', 'p': 0}}
      - {'__bot': {'s1': 'b', 's2': 'abc', 'p': 1}}
      - {'__bot': {'s1': 'b', 's2': 'abbbc', 'p': 1}}
      - {'__bot': {'s1': 'bc', 's2': 'abbcbc', 'p': 2}}
      - {'__bot': {'s1': 'x', 's2': 'abc', 'p': -1}}
      - {'__bot': {'s1': null, 's2': 'abc', 'p': null}}
      - {'__bot': {'s2': 'abc', 'p': null}}
      - {'__bot': {'s1': 'b', 's2': null, 'p': null}}
      - {'__bot': {'s1': 'b', 'p': null}}

  - description: CHAR_LENGTH correctness tests
    current_db: foo
    query: "SELECT VALUE {'s': s, 'len': CHAR_LENGTH(s), 'comment': comment} FROM length AS c"
    skip_reason: "SQL-482: schema check CHAR_LENGTH"
    translation_target_db: foo
    translation_target_coll: length
    translation:
      - {'$project': {'_id': 0, 'length': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$length'}}
      - {'$project': {'_id': 0, '__bot': {'s': '$c.s', 'len': {'$sqlStrLenCP': '$c.s'}, 'comment': '$c.comment'}}}
    result:
      - {'__bot': {'s': '', 'len': 0}}
      - {'__bot': {'s': 'a', 'len': 1}}
      - {'__bot': {'s': 'ã', 'len': 2}}
      - {'__bot': {'s': 'abc', 'len': 3}}
      - {'__bot': {'s': '$€λG', 'len': 4, 'comment': '€ is encoded using three bytes. λ is encoded using two bytes.'}}
      - {'__bot': {'s': '寿司', 'len': 2, 'comment': 'Each character is encoded using three bytes.'}}
      - {'__bot': {'s': null, 'len': null}}
      - {'__bot': {'len': null}}

  - description: OCTET_LENGTH correctness tests
    current_db: foo
    query: "SELECT VALUE {'s': s, 'len': OCTET_LENGTH(s), 'comment': comment} FROM length AS c"
    skip_reason: "SQL-482: schema check OCTET_LENGTH"
    translation_target_db: foo
    translation_target_coll: length
    translation:
      - {'$project': {'_id': 0, 'length': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$length'}}
      - {'$project': {'_id': 0, '__bot': {'s': '$c.s', 'len': {'$sqlStrLenBytes': '$c.s'}, 'comment': '$c.comment'}}}
    result:
      - {'__bot': {'s': '', 'len': 0}}
      - {'__bot': {'s': 'a', 'len': 1}}
      - {'__bot': {'s': 'ã', 'len': 2}}
      - {'__bot': {'s': 'abc', 'len': 3}}
      - {'__bot': {'s': '$€λG', 'len': 7, 'comment': '€ is encoded using three bytes. λ is encoded using two bytes.'}}
      - {'__bot': {'s': '寿司', 'len': 6, 'comment': 'Each character is encoded using three bytes.'}}
      - {'__bot': {'s': null, 'len': null}}
      - {'__bot': {'len': null}}

  - description: BIT_LENGTH correctness tests
    current_db: foo
    query: "SELECT VALUE {'s': s, 'len': BIT_LENGTH(s), 'comment': comment} FROM length AS c"
    skip_reason: "SQL-482: schema check BIT_LENGTH"
    translation_target_db: foo
    translation_target_coll: length
    translation:
      - {'$project': {'_id': 0, 'length': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$length'}}
      - {'$project': {'_id': 0, '__bot': {'s': '$c.s', 'len': {'$multiply': [{'$sqlStrLenBytes': '$c.s'}, {'$literal': 8}]}, 'comment': '$c.comment'}}}
    result:
      - {'__bot': {'s': '', 'len': 0}}
      - {'__bot': {'s': 'a', 'len': 8}}
      - {'__bot': {'s': 'ã', 'len': 16}}
      - {'__bot': {'s': 'abc', 'len': 24}}
      - {'__bot': {'s': '$€λG', 'len': 56, 'comment': '€ is encoded using three bytes. λ is encoded using two bytes.'}}
      - {'__bot': {'s': '寿司', 'len': 48, 'comment': 'Each character is encoded using three bytes.'}}
      - {'__bot': {'s': null, 'len': null}}
      - {'__bot': {'len': null}}

  - description: EXTRACT YEAR correctness test
    current_db: foo
    query: "SELECT VALUE {'year': EXTRACT(YEAR FROM d)} FROM [{'d': '2020-01-08T12:25:45Z'::TIMESTAMP}] AS arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'arr': [{'d': {'$convert': {'input': '2020-01-08T12:25:45Z', 'to': 'date', 'onNull': null, 'onError': null}}}]}}
      - {'$project': {'_id': 0, '__bot': {'year': {'$year': '$arr.d'}}}}
    result:
      - {'__bot': {'year': {'$numberInt': '2020'}}}

  - description: EXTRACT MONTH correctness test
    current_db: foo
    query: "SELECT VALUE {'month': EXTRACT(MONTH FROM d)} FROM [{'d': '2020-01-08T12:25:45Z'::TIMESTAMP}] AS arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'arr': [{'d': {'$convert': {'input': '2020-01-08T12:25:45Z', 'to': 'date', 'onNull': null, 'onError': null}}}]}}
      - {'$project': {'_id': 0, '__bot': {'month': {'$month': '$arr.d'}}}}
    result:
      - {'__bot': {'month': {'$numberInt': '1'}}}

  - description: EXTRACT DAY correctness test
    current_db: foo
    query: "SELECT VALUE {'day': EXTRACT(DAY FROM d)} FROM [{'d': '2020-01-08T12:25:45Z'::TIMESTAMP}] AS arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'arr': [{'d': {'$convert': {'input': '2020-01-08T12:25:45Z', 'to': 'date', 'onNull': null, 'onError': null}}}]}}
      - {'$project': {'_id': 0, '__bot': {'day': {'$dayOfMonth': '$arr.d'}}}}
    result:
      - {'__bot': {'day': {'$numberInt': '8'}}}

  - description: EXTRACT HOUR correctness test
    current_db: foo
    query: "SELECT VALUE {'hour': EXTRACT(HOUR FROM d)} FROM [{'d': '2020-01-08T12:25:45Z'::TIMESTAMP}] AS arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'arr': [{'d': {'$convert': {'input': '2020-01-08T12:25:45Z', 'to': 'date', 'onNull': null, 'onError': null}}}]}}
      - {'$project': {'_id': 0, '__bot': {'hour': {'$hour': '$arr.d'}}}}
    result:
      - {'__bot': {'hour': {'$numberInt': '12'}}}

  - description: EXTRACT MINUTE correctness test
    current_db: foo
    query: "SELECT VALUE {'minute': EXTRACT(MINUTE FROM d)} FROM [{'d': '2020-01-08T12:25:45Z'::TIMESTAMP}] AS arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'arr': [{'d': {'$convert': {'input': '2020-01-08T12:25:45Z', 'to': 'date', 'onNull': null, 'onError': null}}}]}}
      - {'$project': {'_id': 0, '__bot': {'minute': {'$minute': '$arr.d'}}}}
    result:
      - {'__bot': {'minute': {'$numberInt': '25'}}}

  - description: EXTRACT SECOND correctness test
    current_db: foo
    query: "SELECT VALUE {'second': EXTRACT(SECOND FROM d)} FROM [{'d': '2020-01-08T12:25:45Z'::TIMESTAMP}] AS arr"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'arr': [{'d': {'$convert': {'input': '2020-01-08T12:25:45Z', 'to': 'date', 'onNull': null, 'onError': null}}}]}}
      - {'$project': {'_id': 0, '__bot': {'second': {'$second': '$arr.d'}}}}
    result:
      - {'__bot': {'second': {'$numberInt': '45'}}}

  - description: EXTRACT FROM NULL and MISSING correctness test
    current_db: foo
    query: "SELECT VALUE {'d': d, 'v': EXTRACT(YEAR FROM d)} FROM nullAndMissing AS c"
    translation_target_db: foo
    translation_target_coll: nullAndMissing
    translation:
      - {'$project': {'_id': 0, 'nullAndMissing': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$nullAndMissing'}}
      - {'$project': {'_id': 0, '__bot': {'d': '$c.d', 'v': {'$year': '$c.d'}}}}
    result:
      - {'__bot': {'d': null, 'v': null}}
      - {'__bot': {'v': null}}

  - description: SUBSTRING(str FROM start FOR length) correctness test
    current_db: foo
    query: "SELECT VALUE {'str': str, 'start': start, 'length': length, 'substr': SUBSTRING(str FROM start FOR length)} FROM `substring` AS c"
    skip_reason: "SQL-428: negative length in $substrCP"
    translation_target_db: foo
    translation_target_coll: substring
    translation:
      - {'$project': {'_id': 0, 'substring': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$substring'}}
      - {'$project': {'_id': 0, '__bot': {'str': '$c.str', 'start': '$c.start', 'length': '$c.length', 'substr': {'$sqlSubstrCP': ['$c.str', '$c.start', '$c.length']}}}}
    result:
      - {'__bot': {'str': '', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '1'}, 'substr': ''}}
      - {'__bot': {'str': '', 'start': {'$numberInt': '1'}, 'length': {'$numberInt': '1'}, 'substr': ''}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '-1'}, 'substr': 'abc'}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '0'}, 'substr': ''}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '1'}, 'substr': 'a'}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '2'}, 'substr': 'ab'}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '0'}, 'length': {'$numberInt': '4'}, 'substr': 'abc'}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '1'}, 'length': {'$numberInt': '2'}, 'substr': 'bc'}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '2'}, 'length': {'$numberInt': '-1'}, 'substr': 'c'}}
      - {'__bot': {'str': '$€λGx', 'start': {'$numberInt': '1'}, 'length': {'$numberInt': '3'}, 'substr': '€λG'}}
      - {'__bot': {'str': null, start: {'$numberInt': '1'}, length: {'$numberInt': '1'}, 'substr': null}}
      - {'__bot': {start: {'$numberInt': '1'}, length: {'$numberInt': '1'}, 'substr': null}}
      - {'__bot': {'str': 'abc', start: null, length: {'$numberInt': '1'}, 'substr': null}}
      - {'__bot': {'str': 'abc', length: {'$numberInt': '1'}, 'substr': null}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '1'}, 'length': null, 'substr': null}}
      - {'__bot': {'str': 'abc', 'start': {'$numberInt': '1'}, 'substr': null}}

  - description: UPPER correctness test
    current_db: foo
    query: "SELECT VALUE {'s': s, 'v': UPPER(s)} FROM `fold` AS c"
    translation_target_db: foo
    translation_target_coll: fold
    translation:
      - {'$project': {'_id': 0, 'fold': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$fold'}}
      - {'$project': {'_id': 0, '__bot': {'s': '$c.s', 'v': {'$sqlToUpper': '$c.s'}}}}
    result:
      - {'__bot': {'s': '', 'v': ''}}
      - {'__bot': {'s': 'abcd', 'v': 'ABCD'}}
      - {'__bot': {'s': 'aBcD', 'v': 'ABCD'}}
      - {'__bot': {'s': 'ABCD', 'v': 'ABCD'}}
      - {'__bot': {'s': null, 'v': null}}
      - {'__bot': {'v': null}}

  - description: LOWER correctness test
    current_db: foo
    query: "SELECT VALUE {'s': s, 'v': LOWER(s)} FROM `fold` AS c"
    translation_target_db: foo
    translation_target_coll: fold
    translation:
      - {'$project': {'_id': 0, 'fold': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$fold'}}
      - {'$project': {'_id': 0, '__bot': {'s': '$c.s', 'v': {'$sqlToLower': '$c.s'}}}}
    result:
      - {'__bot': {'s': '', 'v': ''}}
      - {'__bot': {'s': 'abcd', 'v': 'abcd'}}
      - {'__bot': {'s': 'aBcD', 'v': 'abcd'}}
      - {'__bot': {'s': 'ABCD', 'v': 'abcd'}}
      - {'__bot': {'s': null, 'v': null}}
      - {'__bot': {'v': null}}

  - description: TRIM(BOTH substr FROM str) correctness test
    current_db: foo
    query: "SELECT VALUE {'substr': substr, 'str': str, 'v': TRIM(BOTH substr FROM str)} FROM `trim` AS c"
    translation_target_db: foo
    translation_target_coll: trim
    translation:
      - {'$project': {'_id': 0, 'trim': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$trim'}}
      - {'$project': {'_id': 0, '__bot': {'substr': '$c.substr', 'str': '$c.str', 'v': {'$trim': {'input': '$c.str', 'chars': '$c.substr'}}}}}
    result:
      - {'__bot': {'substr': '', 'str': '', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': '', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': '   ', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': 'abc', 'v': 'abc'}}
      - {'__bot': {'substr': ' ', 'str': '  abc  ', 'v': 'abc'}}
      - {'__bot': {'substr': 'x', 'str': 'x abc x', 'v': ' abc '}}
      - {'__bot': {'substr': '123', 'str': '123abc123', 'v': 'abc'}}
      - {'__bot': {'substr': null, 'str': 'abc', 'v': null}}
      - {'__bot': {'str': 'abc', 'v': null}}
      - {'__bot': {'substr': ' ', 'str': null, 'v': null}}
      - {'__bot': {'substr': ' ', 'v': null}}

  - description: TRIM(LEADING substr FROM str) correctness test
    current_db: foo
    query: "SELECT VALUE {'substr': substr, 'str': str, 'v': TRIM(LEADING substr FROM str)} FROM `trim` AS c"
    translation_target_db: foo
    translation_target_coll: trim
    translation:
      - {'$project': {'_id': 0, 'trim': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$trim'}}
      - {'$project': {'_id': 0, '__bot': {'substr': '$c.substr', 'str': '$c.str', 'v': {'$ltrim': {'input': '$c.str', 'chars': '$c.substr'}}}}}
    result:
      - {'__bot': {'substr': '', 'str': '', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': '', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': '   ', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': 'abc', 'v': 'abc'}}
      - {'__bot': {'substr': ' ', 'str': '  abc  ', 'v': 'abc  '}}
      - {'__bot': {'substr': 'x', 'str': 'x abc x', 'v': ' abc x'}}
      - {'__bot': {'substr': '123', 'str': '123abc123', 'v': 'abc123'}}
      - {'__bot': {'substr': null, 'str': 'abc', 'v': null}}
      - {'__bot': {'str': 'abc', 'v': null}}
      - {'__bot': {'substr': ' ', 'str': null, 'v': null}}
      - {'__bot': {'substr': ' ', 'v': null}}

  - description: TRIM(TRAILING substr FROM str) correctness test
    current_db: foo
    query: "SELECT VALUE {'substr': substr, 'str': str, 'v': TRIM(TRAILING substr FROM str)} FROM `trim` AS c"
    translation_target_db: foo
    translation_target_coll: trim
    translation:
      - {'$project': {'_id': 0, 'trim': '$$ROOT'}}
      - {'$project': {'_id': 0, 'c': '$trim'}}
      - {'$project': {'_id': 0, '__bot': {'substr': '$c.substr', 'str': '$c.str', 'v': {'$rtrim': {'input': '$c.str', 'chars': '$c.substr'}}}}}
    result:
      - {'__bot': {'substr': '', 'str': '', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': '', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': '   ', 'v': ''}}
      - {'__bot': {'substr': ' ', 'str': 'abc', 'v': 'abc'}}
      - {'__bot': {'substr': ' ', 'str': '  abc  ', 'v': '  abc'}}
      - {'__bot': {'substr': 'x', 'str': 'x abc x', 'v': 'x abc '}}
      - {'__bot': {'substr': '123', 'str': '123abc123', 'v': '123abc'}}
      - {'__bot': {'substr': null, 'str': 'abc', 'v': null}}
      - {'__bot': {'str': 'abc', 'v': null}}
      - {'__bot': {'substr': ' ', 'str': null, 'v': null}}
      - {'__bot': {'substr': ' ', 'v': null}}

  - description: CURRENT_TIMESTAMP(p) correctness test
    current_db: foo
    query: "SELECT VALUE {'v': CURRENT_TIMESTAMP(1) > '2021-01-08T12:00:00Z'::TIMESTAMP} FROM [{}] AS _dual"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'_dual': [{}]}}
      - {'$project': {'_id': 0, '__bot': {'v': {'$sqlGt': ['$$NOW', {'$convert': {'input': '2021-01-08T12:00:00Z', 'to': 'date', 'onNull': null, 'onError': null}}]}}}}
    result:
      - {'__bot': {'v': true}}

  - description: Multiple CURRENT_TIMESTAMPs are equal across a query
    current_db: foo
    query: "SELECT VALUE {'v': CURRENT_TIMESTAMP(6) = CURRENT_TIMESTAMP(6)} FROM [{}] AS _dual"
    skip_reason: "SQL-462: re-enable tests with array datasources"
    translation_target_db: foo
    translation:
      - {'$documents': {'_dual': [{}]}}
      - {'$project': {'_id': 0, '__bot': {'v': {'$sqlEq': ['$$NOW', '$$NOW']}}}}
    result:
      - {'__bot': {'v': true}}
