catalog_environment:
  foo:
    nullif:
      - { "_id": 0, "v1": "a", "v2": "a" }
      - { "_id": 1, "v1": "a", "v2": "b" }
      - { "_id": 2, "v1": "a", "v2": null }
      - { "_id": 3, "v1": null, "v2": "b" }
      - { "_id": 4, "v1": "a" }
      - { "_id": 5, "v2": "b" }
      - { "_id": 6 }
    twoArgCoalesce:
      - { "_id": 0, "v1": 123, "v2": 456 }
      - { "_id": 1, "v1": null, "v2": 456 }
      - { "_id": 2, "v2": 456 }
    multiArgCoalesce:
      - { "_id": 0, "v1": 123, "v2": null, "v4": 789, "v5": null }
      - { "_id": 1, "v1": null, "v3": 456, "v4": 789 }
      - { "_id": 2, "v2": null, "v3": null, "v5": 789 }
      - { "_id": 3, "v1": null, "v2": null, "v5": null }
    size:
      - { "_id": 0, "a": [] }
      - { "_id": 1, "a": [1] }
      - { "_id": 2, "a": [1, 2, 3] }
      - { "_id": 3, "a": null }
      - { "_id": 4 }
    position:
      - { "_id": 0, "s1": "", "s2": "abc" }
      - { "_id": 1, "s1": "a", "s2": "abc" }
      - { "_id": 2, "s1": "b", "s2": "abc" }
      - { "_id": 3, "s1": "b", "s2": "abbbc" }
      - { "_id": 4, "s1": "bc", "s2": "abbcbc" }
      - { "_id": 5, "s1": "x", "s2": "abc" }
      - { "_id": 6, "s1": null, "s2": "abc" }
      - { "_id": 7, "s2": "abc" }
      - { "_id": 8, "s1": "b", "s2": null }
      - { "_id": 9, "s1": "b" }
    length:
      - { "_id": 0, "s": "" }
      - { "_id": 1, "s": "a" }
      - { "_id": 2, "s": "ã" }
      - { "_id": 3, "s": "abc" }
      - { "_id": 5, "s": "$€λG", "comment": "€ is encoded using three bytes. λ is encoded using two bytes." }
      - { "_id": 6, "s": "寿司", "comment": "Each character is encoded using three bytes." }
      - { "_id": 7, "s": null }
      - { "_id": 8 }
    nullAndMissing:
      - { "_id": 0, "d": null }
      - { "_id": 1 }
    substring:
      - { "_id": 0, "str": "", "start": { "$numberInt": "0" }, "length": { "$numberInt": "1" } }
      - { "_id": 1, "str": "", "start": { "$numberInt": "1" }, "length": { "$numberInt": "1" } }
      - { "_id": 2, "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "-1" } }
      - { "_id": 3, "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "0" } }
      - { "_id": 4, "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "1" } }
      - { "_id": 5, "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "2" } }
      - { "_id": 6, "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "4" } }
      - { "_id": 7, "str": "abc", "start": { "$numberInt": "1" }, "length": { "$numberInt": "2" } }
      - { "_id": 8, "str": "abc", "start": { "$numberInt": "2" }, "length": { "$numberInt": "-1" } }
      - { "_id": 9, "str": null, start: { "$numberInt": "1" }, length: { "$numberInt": "1" } }
      - { "_id": 10, start: { "$numberInt": "1" }, length: { "$numberInt": "1" } }
      - { "_id": 11, "str": "abc", start: null, length: { "$numberInt": "1" } }
      - { "_id": 12, "str": "abc", length: { "$numberInt": "1" } }
      - { "_id": 13, "str": "abc", "start": { "$numberInt": "1" }, "length": null }
      - { "_id": 14, "str": "abc", "start": { "$numberInt": "1" } }
    fold:
      - { "_id": 0, "s": "" }
      - { "_id": 1, "s": "abcd" }
      - { "_id": 2, "s": "aBcD" }
      - { "_id": 3, "s": "ABCD" }
      - { "_id": 4, "s": null }
      - { "_id": 5 }
    trim:
      - { "_id": 0, "substr": "", "str": "" }
      - { "_id": 1, "substr": " ", "str": "" }
      - { "_id": 2, "substr": " ", "str": "   " }
      - { "_id": 3, "substr": " ", "str": "abc" }
      - { "_id": 4, "substr": " ", "str": "  abc  " }
      - { "_id": 5, "substr": "x", "str": "x abc x" }
      - { "_id": 6, "substr": "123", "str": "123abc123" }
      - { "_id": 7, "substr": null, "str": "abc" }
      - { "_id": 8, "str": "abc" }
      - { "_id": 9, "substr": " ", "str": null }
      - { "_id": 10, "substr": " " }

schema_environment:
  {
    "foo": {
      "nullif": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "v1": {
              "anyOf": [
              { "bsonType": "string" },
              { "bsonType": "null" }
              ]
            },
            "v2": {
              "anyOf": [
              { "bsonType": "string" },
              { "bsonType": "null" }
              ]
            }
          }
        }
      },
      "size": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "a": {
              "anyOf": [
                { "bsonType": "array" },
                { "bsonType": "null" }
              ]
            }
          }
        }
      },
      "length": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "a": {
              "anyOf": [
                { "bsonType": "string" },
                { "bsonType": "null" }
              ]
            }
          }
        }
      },
      "nullAndMissing": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "d": {
              "anyOf": [
                { "bsonType": "date" },
                { "bsonType": "null" }
              ]
            }
          }
        }
      },
      "substring": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "str": {
              "anyOf": [
                { "bsonType": "string" },
                { "bsonType": "null" }
              ]
            },
            "start": {
              "anyOf": [
                { "bsonType": "int" },
                { "bsonType": "null" }
              ]
            },
            "length": {
              "anyOf": [
                { "bsonType": "int" },
                { "bsonType": "null" }
              ]
            }
          }
        }
      },
      "fold": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "s": {
              "anyOf": [
                { "bsonType": "string" },
                { "bsonType": "null" }
              ]
            }
          }
        }
      },
      "trim": {
        "$jsonSchema": {
          "bsonType": "object",
          "properties": {
            "_id": {
              "bsonType": "int"
            },
            "substr": {
              "anyOf": [
                { "bsonType": "string" },
                { "bsonType": "null" }
              ]
            },
            "str": {
              "anyOf": [
                { "bsonType": "string" },
                { "bsonType": "null" }
              ]
            }
          }
        }
      }
    }
  }

tests:
  - description: NULLIF correctness test
    current_db: foo
    query: "SELECT VALUE { 'v1': v1, 'v2': v2, 'v': NULLIF(v1, v2) } FROM nullif AS `nullif`"
    result:
      - { "v1": "a", "v2": "a", "v": null }
      - { "v1": "a", "v2": "b", "v": "a" }
      - { "v1": "a", "v2": null, "v": "a" }
      - { "v1": null, "v2": "b", "v": null }
      - { "v1": "a", "v": "a" }
      - { "v2": "b", "v": null }
      - { "v": null }

  - description: COALESCE(v1, v2) correctness tests
    current_db: foo
    query: "SELECT VALUE { 'v1': v1, 'v2': v2, 'v': COALESCE(v1, v2) } FROM twoArgCoalesce AS twoArgCoalesce"
    result:
      - { "v1": 123, "v2": 456, "v": 123 }
      - { "v1": null, "v2": 456, "v": 456 }
      - { "v2": 456, "v": 456 }

  - description: COALESCE(v1, ..., vn) correctness tests
    current_db: foo
    query: "SELECT VALUE { 'v1': v1, 'v2': v2, 'v3': v3, 'v4': v4, 'v5': v5, 'v': COALESCE(v1, v2, v3, v4, v5) } FROM multiArgCoalesce AS multiArgCoalesce"
    result:
      - { "v1": 123, "v2": null, "v4": 789, "v5": null, "v": 123 }
      - { "v1": null, "v3": 456, "v4": 789, "v": 456 }
      - { "v2": null, "v3": null, "v5": 789, "v": 789 }
      - { "v1": null, "v2": null, "v5": null, "v": null }

  - description: SIZE correctness tests
    current_db: foo
    query: "SELECT VALUE { 'a': a, s: SIZE(a) } FROM size AS size"
    result:
      - { "a": [], "s": 0 }
      - { "a": [1], "s": 1 }
      - { "a": [1, 2, 3], "s": 3 }
      - { "a": null, "s": null }
      - { "s": null }

  - description: POSITION correctness tests
    current_db: foo
    query: "SELECT VALUE { 's1': s1, 's2': s2, 'p': POSITION(s1 IN s2) } FROM position AS position"
    result:
      - { "s1": "", "s2": "abc", "p": 0 }
      - { "s1": "a", "s2": "abc", "p": 0 }
      - { "s1": "b", "s2": "abc", "p": 1 }
      - { "s1": "b", "s2": "abbbc", "p": 1 }
      - { "s1": "bc", "s2": "abbcbc", "p": 2 }
      - { "s1": "x", "s2": "abc", "p": -1 }
      - { "s1": null, "s2": "abc", "p": null }
      - { "s2": "abc", "p": null }
      - { "s1": "b", "s2": null, "p": null }
      - { "s1": "b", "p": null }

  - description: CHAR_LENGTH correctness tests
    current_db: foo
    query: "SELECT VALUE { 's': s, 'len': CHAR_LENGTH(s), 'comment': comment } FROM length AS length"
    result:
      - { "s": "", "len": 0 }
      - { "s": "a", "len": 1 }
      - { "s": "ã", "len": 2 }
      - { "s": "abc", "len": 3 }
      - { "s": "$€λG", "len": 4 }
      - { "s": "寿司", "len": 2 }
      - { "s": null, "len": null }
      - { "len": null }

  - description: OCTET_LENGTH correctness tests
    current_db: foo
    query: "SELECT VALUE { 's': s, 'len': OCTET_LENGTH(s), 'comment': comment } FROM length AS length"
    result:
      - { "s": "", "len": 0 }
      - { "s": "a", "len": 1 }
      - { "s": "ã", "len": 2 }
      - { "s": "abc", "len": 3 }
      - { "s": "$€λG", "len": 7, "comment": "€ is encoded using three bytes. λ is encoded using two bytes." }
      - { "s": "寿司", "len": 6, "comment": "Each character is encoded using three bytes." }
      - { "s": null, "len": null }
      - { "len": null }

  - description: BIT_LENGTH correctness tests
    current_db: foo
    query: "SELECT VALUE { 's': s, 'len': BIT_LENGTH(s), 'comment': comment } FROM length AS length"
    result:
      - { "s": "", "len": 0 }
      - { "s": "a", "len": 8 }
      - { "s": "ã", "len": 16 }
      - { "s": "abc", "len": 24 }
      - { "s": "$€λG", "len": 56, "comment": "€ is encoded using three bytes. λ is encoded using two bytes." }
      - { "s": "寿司", "len": 48, "comment": "Each character is encoded using three bytes." }
      - { "s": null, "len": null }
      - { "len": null }

  - description: EXTRACT YEAR correctness test
    query: "SELECT VALUE { 'year': EXTRACT(YEAR FROM d) } FROM [{ 'd': '2020-01-08T12:25:45Z'::TIMESTAMP }] AS arr"
    result:
      - { 'year': { "$numberInt": "2020" } }

  - description: EXTRACT MONTH correctness test
    query: "SELECT VALUE { 'month': EXTRACT(MONTH FROM d) } FROM [{ 'd': '2020-01-08T12:25:45Z'::TIMESTAMP }] AS arr"
    result:
      - { 'month': { "$numberInt": "1" } }

  - description: EXTRACT DAY correctness test
    query: "SELECT VALUE { 'day': EXTRACT(DAY FROM d) } FROM [{ 'd': '2020-01-08T12:25:45Z'::TIMESTAMP }] AS arr"
    result:
      - { 'day': { "$numberInt": "8" } }

  - description: EXTRACT HOUR correctness test
    query: "SELECT VALUE { 'hour': EXTRACT(HOUR FROM d) } FROM [{ 'd': '2020-01-08T12:25:45Z'::TIMESTAMP }] AS arr"
    result:
      - { 'hour': { "$numberInt": "12" } }

  - description: EXTRACT MINUTE correctness test
    query: "SELECT VALUE { 'minute': EXTRACT(MINUTE FROM d) } FROM [{ 'd': '2020-01-08T12:25:45Z'::TIMESTAMP }] AS arr"
    result:
      - { 'minute': { "$numberInt": "25" } }

  - description: EXTRACT SECOND correctness test
    query: "SELECT VALUE { 'second': EXTRACT(SECOND FROM d) } FROM [{ 'd': '2020-01-08T12:25:45Z'::TIMESTAMP }] AS arr"
    result:
      - { 'second': { "$numberInt": "45" } }

  - description: EXTRACT FROM NULL and MISSING correctness test
    query: "SELECT VALUE { 'd': d, 'v': EXTRACT(YEAR FROM d) } FROM nullAndMissing AS nullAndMissing"
    result:
      - { 'd': null, 'v': null }
      - { 'v': null }

  - description: SUBSTRING(str FROM start FOR length) correctness test
    current_db: foo
    query: "SELECT VALUE { 'str': str, 'start': start, 'substr': SUBSTRING(str FROM start FOR length) } FROM substring AS substring"
    result:
      - { "str": "", "start": { "$numberInt": "0" }, "length": { "$numberInt": "1" }, "substr": "" }
      - { "str": "", "start": { "$numberInt": "1" }, "length": { "$numberInt": "1" }, "substr": "" }
      - { "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "-1" }, "substr": "abc" }
      - { "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "0" }, "substr": "" }
      - { "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "1" }, "substr": "a" }
      - { "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "2" }, "substr": "ab" }
      - { "str": "abc", "start": { "$numberInt": "0" }, "length": { "$numberInt": "4" }, "substr": "abc" }
      - { "str": "abc", "start": { "$numberInt": "1" }, "length": { "$numberInt": "2" }, "substr": "bc" }
      - { "str": "abc", "start": { "$numberInt": "2" }, "length": { "$numberInt": "-1" }, "substr": "c" }
      - { "str": null, start: { "$numberInt": "1" }, length: { "$numberInt": "1" }, "substr": null }
      - { start: { "$numberInt": "1" }, length: { "$numberInt": "1" }, "substr": null }
      - { "str": "abc", start: null, length: { "$numberInt": "1" }, "substr": null }
      - { "str": "abc", length: { "$numberInt": "1" }, "substr": null }
      - { "str": "abc", "start": { "$numberInt": "1" }, "length": null, "substr": null }
      - { "str": "abc", "start": { "$numberInt": "1" }, "substr": null }

  - description: UPPER correctness test
    current_db: foo
    query: "SELECT VALUE { 's': s, 'v': UPPER(s) } FROM fold AS fold"
    result:
      - { "s": "", "v": "ABCD" }
      - { "s": "abcd", "v": "ABCD" }
      - { "s": "aBcD", "v": "ABCD" }
      - { "s": "ABCD", "v": "ABCD" }
      - { "s": null, "v": null }
      - { "v": null }

  - description: LOWER correctness test
    current_db: foo
    query: "SELECT VALUE { 's': s, 'v': LOWER(s) } FROM fold AS fold"
    result:
      - { "s": "", "v": "abcd" }
      - { "s": "abcd", "v": "abcd" }
      - { "s": "aBcD", "v": "abcd" }
      - { "s": "ABCD", "v": "abcd" }
      - { "s": null, "v": null }
      - { "v": null }

  - description: TRIM(BOTH substr FROM str) correctness test
    current_db: foo
    query: "SELECT VALUE { 'substr': substr, 'str': str, 'v': TRIM(BOTH substr FROM str) } FROM trim AS trim"
    result:
      - { "substr": "", "str": "", "v": "" }
      - { "substr": " ", "str": "", "v": "" }
      - { "substr": " ", "str": "   ", "v": "" }
      - { "substr": " ", "str": "abc", "v": "abc" }
      - { "substr": " ", "str": "  abc  ", "v": "abc" }
      - { "substr": "x", "str": "x abc x", "v": " abc " }
      - { "substr": "123", "str": "123abc123", "v": "abc" }
      - { "substr": null, "str": "abc", "v": null }
      - { "str": "abc", "v": null }
      - { "substr": " ", "str": null, "v": null }
      - { "substr": " ", "v": null }

  - description: TRIM(LEADING substr FROM str) correctness test
    current_db: foo
    query: "SELECT VALUE { 'substr': substr, 'str': str, 'v': TRIM(LEADING substr FROM str) } FROM trim AS trim"
    result:
      - { "substr": "", "str": "", "v": "" }
      - { "substr": " ", "str": "", "v": "" }
      - { "substr": " ", "str": "   ", "v": "" }
      - { "substr": " ", "str": "abc", "v": "abc" }
      - { "substr": " ", "str": "  abc  ", "v": "abc  " }
      - { "substr": "x", "str": "x abc x", "v": " abc x" }
      - { "substr": "123", "str": "123abc123", "v": "abc123" }
      - { "substr": null, "str": "abc", "v": null }
      - { "str": "abc", "v": null }
      - { "substr": " ", "str": null, "v": null }
      - { "substr": " ", "v": null }

  - description: TRIM(TRAILING substr FROM str) correctness test
    current_db: foo
    query: "SELECT VALUE { 'substr': substr, 'str': str, 'v': TRIM(TRAILING substr FROM str) } FROM trim AS trim"
    result:
      - { "substr": "", "str": "", "v": "" }
      - { "substr": " ", "str": "", "v": "" }
      - { "substr": " ", "str": "   ", "v": "" }
      - { "substr": " ", "str": "abc", "v": "abc" }
      - { "substr": " ", "str": "  abc  ", "v": "  abc" }
      - { "substr": "x", "str": "x abc x", "v": "x abc " }
      - { "substr": "123", "str": "123abc123", "v": "123abc" }
      - { "substr": null, "str": "abc", "v": null }
      - { "str": "abc", "v": null }
      - { "substr": " ", "str": null, "v": null }
      - { "substr": " ", "v": null }

  - description: CURRENT_TIMESTAMP(p) correctness test
    current_db: foo
    query: "SELECT VALUE { 'v': CURRENT_TIMESTAMP(1) > '2021-01-08T12:00:00Z'::TIMESTAMP } FROM [{}] AS _dual"
    result:
      - { "v": true }

  - description: Multiple CURRENT_TIMESTAMPs are equal across a query
    current_db: foo
    query: "SELECT VALUE { 'v': CURRENT_TIMESTAMP(6) = CURRENT_TIMESTAMP(6) } FROM [{}] AS _dual"
    result:
      - { "v": true }
