catalog_data:
  mydb:
    foo:
      - {'_id': 0, 'a': {'b': {'c': 1}}}
    docOrInt:
      - {'_id': 0, 'a': {'b': 1}}
      - {'_id': 1, 'a': 2}
    mustCollide:
      - {'_id': 0, 'a': {'b': 1}, 'a_b': 2}
    mayCollide:
      - {'_id': 0, 'a': { 'b': 1 }, 'a_b': 2}
    noSchemaInfo:
      - {'_id': 0, 'a': {'b': 1}}

catalog_schema:
  {
    'mydb': {
      'foo': {
        'bsonType': "object",
        'required': [ '_id', 'a' ],
        'additionalProperties': false,
        'properties': {
          '_id': { 'bsonType': "int" },
          'a': {
            'bsonType': "object",
            'required': [ 'b' ],
            'additionalProperties': false,
            'properties': {
              'b': {
                'bsonType': "object",
                'required': [ 'c' ],
                'additionalProperties': false,
                'properties': {
                  'c': { 'bsonType': "int" },
                }
              },
            }
          },
        }
      },
      'docOrInt': {
        'bsonType': "object",
        'required': [ '_id', 'a' ],
        'additionalProperties': false,
        'properties': {
          '_id': { 'bsonType': "int" },
          'a': {
            'anyOf':
              [
                { 'bsonType': 'int' },
                {
                  'bsonType': "object",
                  'required': [ 'b' ],
                  'additionalProperties': false,
                  'properties': {
                    'b': { 'bsonType': "int" }
                  }
                }
              ]
          },
        }
      },
      'mustCollide': {
        'bsonType': "object",
        'required': [ '_id', 'a' ],
        'additionalProperties': false,
        'properties': {
          '_id': { 'bsonType': "int" },
          'a': {
            'bsonType': "object",
            'required': [ 'b' ],
            'additionalProperties': false,
            'properties': {
              'b': { 'bsonType': "int" },
            }
          },
          'a_b': { 'bsonType': "int" }
        }
      },
      'mayCollide': {
        'bsonType': "object",
        'required': [ '_id', 'a' ],
        'additionalProperties': true,
        'properties': {
          '_id': { 'bsonType': "int" },
          'a': {
            'bsonType': "object",
            'required': [ 'b' ],
            'additionalProperties': false,
            'properties': {
              'b': { 'bsonType': "int" },
            }
          }
        }
      },
      'noSchemaInfo': {
        'bsonType': "object",
        'additionalProperties': true
      }
    },
  }

tests:
  - description: basic correctness test
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo)"
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a_b_c': '$foo.a.b.c' } } }
    result:
      - { 'foo': { '_id': 0, 'a_b_c': 1 } }

  - description: datasource argument can optionally include an alias
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo as f)"
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'f': '$foo' } }
      - { '$project': { '_id': 0, 'f': { '_id': "$f._id", 'a_b_c': '$f.a.b.c' } } }
    result:
      - { 'f': { '_id': 0, 'a_b_c': 1 } }

  - description: basic correctness test for user-specified separator
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH separator => ':') "
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a:b:c': '$foo.a.b.c' } } }
    result:
      - { 'foo': { '_id': 0, 'a:b:c': 1 } }

  - description: user-specified separator with length less than one is allowed
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH separator => '') "
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'abc': '$foo.a.b.c' } } }
    result:
      - { 'foo': { '_id': 0, 'abc': 1 } }

  - description: user-specified separator with length greater than one is allowed
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH separator => '_DOT_') "
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a_DOT_b_DOT_c': '$foo.a.b.c' } } }
    result:
      - { 'foo': { '_id': 0, 'a_DOT_b_DOT_c': 1 } }

  - description: a user-specified depth greater than max nesting depth causes all documents to be flattened
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH depth => 5)"
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a_b_c': '$foo.a.b.c' } } }
    result:
      - { 'foo': { '_id': 0, 'a_b_c': 1 } }

  - description: a user-specified depth less than max nesting depth causes more deeply nested documents to remain unflattened
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH depth => 1)"
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a_b': '$foo.a.b' } } }
    result:
      - { 'foo': { '_id': 0, 'a_b': { 'c': 1 } } }

  - description: user-specified depth must be an integer literal
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH depth => 1.2)"
    parse_error: "Unrecognized token `1.2` found at 40:43\nExpected one of INT"

  - description: user-specified separator must be a string literal
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH separator => 1)"
    parse_error: "Unrecognized token `1` found at 44:45\nExpected one of STRING"

  - description: error on unknown option keys
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH INVALID => a)"
    parse_error: "Unrecognized token `INVALID` found at 31:38\nExpected one of DEPTH or SEPARATOR"

  - description: error on duplicate option keys
    current_db: mydb
    query: "SELECT * FROM FLATTEN(foo WITH depth => 1, depth => 2)"
    algebrize_error: "found duplicate FLATTEN option Depth(2)"

  - description: do not flatten schemas that MAY be document
    current_db: mydb
    query: "SELECT * FROM FLATTEN(docOrInt)"
    algebrize_error: 'cannot flatten field "a" since it has a polymorphic object schema'

  - description: error if schema's field paths cannot be exhaustively enumerated
    current_db: mydb
    query: "SELECT * FROM FLATTEN(noSchemaInfo)"
    algebrize_error: "cannot exhaustively enumerate all field paths in schema Document(Document { keys: {}, required: {}, additional_properties: true })"

  - description: error if naming collision MUST occur
    current_db: mydb
    query: "SELECT * FROM FLATTEN(mustCollide)"
    algebrize_error: 'found duplicate document key "a_b"'

  - description: error if naming collision MAY occur
    current_db: mydb
    query: "SELECT * FROM FLATTEN(mayCollide)"
    algebrize_error: 'cannot exhaustively enumerate all field paths in schema Document(Document { keys: {"_id": Atomic(Integer), "a": Document(Document { keys: {"b": Atomic(Integer)}, required: {"b"}, additional_properties: false })}, required: {"_id", "a"}, additional_properties: true })'

  - description: FLATTENing a FLATTENed datasource is allowed
    current_db: mydb
    query: "SELECT * FROM FLATTEN(FLATTEN(foo))"
    translation_target_db: mydb
    translation_target_coll: foo
    translation:
      - { '$project': { '_id': 0, 'foo': '$$ROOT' } }
      - { '$project': { '_id': 0, 'foo': '$foo' } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a_b_c': '$foo.a.b.c' } } }
      - { '$project': { '_id': 0, 'foo': { '_id': "$foo._id", 'a_b_c': '$foo.a_b_c' } } }
    result:
      - { 'foo': { '_id': 0, 'a_b_c': 1 } }

