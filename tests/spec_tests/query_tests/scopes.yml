catalog_data:
  foo:
    coll:
      - {'_id': 1, 'bar': 11, 'car': 12}
      - {'_id': 2, 'bar': -11,'car': -12}
      - {'_id': 3, 'bar': 211,'car': 212}
    schema_coll:
      - {'_id': 1, 'bar': 11, 'car': 12}
      - {'_id': 2, 'bar': -11,'car': -12}
      - {'_id': 3, 'bar': 211,'car': 212}
    schema_foo:
      - {'_id': 1,'baz': 1}
    nested:
      - {'_id': 1,'n': {'a': 1}}
    bar:
      - {'_id': 1, 'a': 1}
      - {'_id': 2, 'a': 2}
    baz:
      - {'_id': 1, 'a': 1}
      - {'_id': 2, 'a': 3}

  foo2:
    coll:
      - {'_id': 1, 'a': 1, 'b': 2}

catalog_schema:
  {
    'foo': {
      'coll': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'nested': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'bar': {
        'bsonType': 'object',
        'properties': {a: {bsonType: 'int'}},
        'additionalProperties': true
      },
      'baz': {
        'bsonType': 'object',
        'properties': {a: {bsonType: 'int'}},
        'additionalProperties': true
      },
      'schema_coll': {
        'bsonType': "object",
        'required': [ 'bar', 'car' ],
        'additionalProperties': false,
        'properties': {
          'bar': {
            'bsonType': "int"
          },
          'car': {
            'bsonType': "int"
          }
        }
      },
      'schema_foo': {
        'bsonType': "object",
        'required': [ 'baz' ],
        'additionalProperties': false,
        'properties': {
          'baz': {
            'bsonType': "int"
          }
        }
      }
    },
    'foo2': {
      'coll': {
        'bsonType': 'object',
        'additionalProperties': true
      },
    }
  }

tests:
  - description: compound collection references are fully qualified
    current_db: 'foo'
    query: "SELECT * FROM foo.coll AS coll"
    result:
      - {'coll': {'_id': 1, 'bar': 11, 'car': 12}}
      - {'coll': {'_id': 2, 'bar': -11, 'car': -12}}
      - {'coll': {'_id': 3, 'bar': 211, 'car': 212}}

  - description: equivalent qualified and unqualified references to the same field
    current_db: 'foo'
    query: "SELECT VALUE {'ubar': bar, 'qbar': coll.bar} FROM foo.coll AS coll"
    result:
      - {'': {'ubar': 11, 'qbar': 11}}
      - {'': {'ubar': -11, 'qbar': -11}}
      - {'': {'ubar': 211,'qbar': 211}}

  - description: compound field references prefer qualified names to field references
    current_db: 'foo'
    query: "SELECT VALUE {'a': n.a} FROM nested AS n"
    result:
      - {'': {}}

  - description: compound field reference is treated as unqualified if no datasource name matches first identifier
    current_db: 'foo'
    query: "SELECT VALUE {'a': n.a} FROM nested AS nested"
    result:
      - {'': {'a': 1}}

  - description: field references never resolve to the catalog environment
    current_db: 'foo'
    query: "SELECT VALUE {'a': foo.coll} FROM foo.coll AS coll"
    result:
      - {'': {}}
      - {'': {}}
      - {'': {}}

  - description: unqualified references are ambiguous when there are multiple datasources without schemata
    current_db: 'foo'
    query: "SELECT VALUE {'a': bar} FROM foo.coll AS coll JOIN foo.coll AS coll2"
    should_compile: false
    algebrize_error: "ambiguous field `bar`"

  - description: qualified reference is not ambiguous with multiple datasources
    current_db: 'foo'
    query: "SELECT VALUE {'a': coll.bar} FROM foo.coll AS coll JOIN foo.nested AS nested"
    result:
      - {'': {'a': 11}}
      - {'': {'a': -11}}
      - {'': {'a': 211}}

  - description: unqualified references are not ambiguous when there are multiple datasources with schema that disambiguates
    current_db: 'foo'
    query: "SELECT VALUE {'a': bar} FROM foo.schema_coll AS coll JOIN foo.schema_foo AS coll2"
    result:
      - {'': {'a': 11}}
      - {'': {'a': -11}}
      - {'': {'a': 211}}

  - description: unqualified collection reference refers to current database
    current_db: 'foo2'
    query: "SELECT * FROM coll AS coll"
    result:
      - {'coll': {'_id': 1, 'a': 1, 'b': 2}}

  - description: unqualified collection references do not resolve to collections in other databases
    current_db: 'foo2'
    query: "SELECT * FROM nested AS nested"
    should_compile: false
    algebrize_error: "unknown collection 'nested' in database 'foo2'"

  - description: unqualified references are still ambiguous when there are multiple datasources with schema that have the same field names
    query: "SELECT VALUE {'a': bar} FROM foo.schema_coll AS coll JOIN foo.schema_coll AS coll2"
    should_compile: false
    algebrize_error: "ambiguous field `bar`"

  - description: unqualified collection reference will error if collection not found in current database
    current_db: 'foo'
    query: "SELECT * FROM car AS car"
    should_compile: false
    algebrize_error: "unknown collection 'car' in database 'foo'"

  - description: qualified collection reference in FROM clause will error if collection not found in specified database
    current_db: 'foo'
    query: "SELECT * FROM foo.car AS car"
    algebrize_error: "unknown collection 'car' in database 'foo'"

  - description: qualified collection reference in FROM clause will error if database not found
    current_db: 'foo3'
    query: "SELECT * FROM bar AS bar"
    algebrize_error: "unknown collection 'bar' in database 'foo3'"

  - description: nonexistent field references fail with a schema
    query: "SELECT VALUE {'bar': foo.coll.bar} FROM foo.schema_coll AS coll"
    should_compile: false
    algebrize_error: "field `foo` cannot be resolved to any datasource"

  - description: qualified collection reference in FROM clause will error if collection not found
    current_db: foo
    query: "SELECT * FROM bar.a AS a"
    skip_reason: "SQL-517: disallow field references in FROM clauses"
    should_compile: false
    algebrize_error: "Unknown collection a in database 'foo'"

  - description: a qualfied reference in a FROM clause can have no more than two parts
    current_db: 'foo'
    query: "SELECT * FROM foo.bar.bar AS bar"
    should_compile: false
    parse_error: "collection datasources can only have database qualification, found: foo.bar.bar"

  - description: c.a refers to a in baz.a in the subquery and bar.a in the outer query
    current_db: 'foo'
    query: "SELECT * FROM bar AS c WHERE c.a IN (SELECT c.a FROM baz AS c)"
    result:
      - {'c': {'_id': 1, 'a': 1}}

  - description: with a qualified reference, the highest scope number for repeated qualifiers is chosen
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT q.bar FROM schema_foo AS q)} FROM schema_coll AS q"
    should_compile: false
    algebrize_error: "cannot access field bar because it does not exist"

  - description: if an unqualified reference CANNOT be from subquery's datasource and MUST be from outer query's datasource, use outer query's datasource
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM schema_foo AS q LIMIT 1)} FROM schema_coll AS q"
    result:
      - {'': {'bar': 11}}
      - {'': {'bar': -11}}
      - {'': {'bar': 211}}

  - description: if an unqualified reference CANNOT be from subquery's datasource and MAY be from outer query's datasource, use outer query's datasource
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM schema_foo AS q LIMIT 1)} FROM coll AS q"
    result:
      - {'': {'bar': 11}}
      - {'': {'bar': -11}}
      - {'': {'bar': 211}}

  - description: if an unqualified reference CANNOT be from subquery's datasource and CANNOT be from outer query's datasource, the datasource cannot be found
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT x FROM schema_coll AS q LIMIT 1)} FROM schema_foo AS q"
    should_compile: false
    algebrize_error: "field `x` cannot be resolved to any datasource"

  - description: if an unqualified reference MAY be from subquery's datasource and MAY be from outer query's datasource, use outer query's datasource, the datasource is ambiguous
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM baz AS q LIMIT 1)} FROM coll AS q"
    should_compile: false
    algebrize_error: "ambiguous field `bar`"

  - description: if an unqualified reference MAY be from subquery's datasource and MUST be from outer query's datasource, the datasource is ambiguous
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM baz AS q LIMIT 1)} FROM schema_coll AS q"
    should_compile: false
    algebrize_error: "ambiguous field `bar`"

  - description: if an unqualified reference MAY be from subquery's datasource and CANNOT be from outer query's datasource, use subquery's datasource
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM baz AS q LIMIT 1)} FROM schema_foo AS q"
    result:
      - {'': {}}
  - description: if an unqualified reference MUST be from subquery's datasource and MUST be from outer query's datasource, the highest scope number is chosen
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM schema_coll AS q LIMIT 1)} FROM schema_coll AS q"
    result:
      - {'': {'bar': 11}}
      - {'': {'bar': 11}}
      - {'': {'bar': 11}}

  - description: if an unqualified reference MUST be from subquery's datasource and MAY be from outer query's datasource, use subquery's datasource
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM schema_coll AS q LIMIT 1)} FROM coll AS q"
    result:
      - {'': {'bar': 11}}
      - {'': {'bar': 11}}
      - {'': {'bar': 11}}

  - description: if an unqualified reference MUST be from subquery's datasource and CANNOT be from outer query's datasource, use subquery's datasource
    current_db: foo
    query: "SELECT VALUE{'bar': (SELECT bar FROM schema_coll AS q LIMIT 1)} FROM schema_foo AS q"
    result:
      - {'': {'bar': 11}}
