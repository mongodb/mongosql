# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-rs

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          export PATH="$PATH:$HOME/.cargo/bin"
          export CARGO_NET_GIT_FETCH_WITH_CLI=true

          export GOPATH="$HOME/go"
          export GOROOT=/opt/golang/go1.17
          export GOPRIVATE=github.com/10gen/*
          export GOCACHE="$HOME/gocache"
          mkdir -p "$GOCACHE"
          if [ "Windows_NT" = "$OS" ]; then
             set -o igncr
             export GOROOT='C:\golang\go1.17'
             export GOPATH=$(cygpath -w "$GOPATH")
             export GOCACHE=$(cygpath -w "$GOCACHE")
          fi
          export PATH="$GOROOT/bin:$PATH"
          if [[ "${triggered_by_git_tag}" != "" ]]; then
            export release_version=$(echo ${triggered_by_git_tag} | sed s/v//)
          else
            export release_version=test_release
          fi

          cat <<EOT > expansions.yml
          release_version: "$release_version"
          prepare_shell: |
            set -o errexit
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
            export GOPATH="$GOPATH"
            export GOROOT="$GOROOT"
            export GOPRIVATE="$GOPRIVATE"
            export GOCACHE="$GOCACHE"
            export release_version="$release_version"
            git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"
          EOT
    - command: expansions.update
      params:
        file: mongosql-rs/expansions.yml

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              export DEFAULT_HOST_OPTIONS='--default-host x86_64-pc-windows-msvc'
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
                ln -sf /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
                ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo
          fi

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check gofmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          gofmt -s -d .

  "check goimports":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          go get golang.org/x/tools/cmd/goimports
          if [[ $("$GOPATH/bin/goimports" -l .) ]]; then
              echo "some files not formatted according to goimports"
              "$GOPATH/bin/goimports" -d -e .
              exit 1
          else
              echo "files all formatted according to goimports"
              exit 0
          fi

  "check go mod tidy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}

          # save original files
          cp go.mod go.mod.original
          cp go.sum go.sum.original

          # tidy files and save tidied versions
          go mod tidy
          cp go.mod go.mod.tidied
          cp go.sum go.sum.tidied

          # restore original files
          rm go.mod && cp go.mod.original go.mod
          rm go.sum && cp go.sum.original go.sum

          # fail if tidying changed files
          diff go.mod.original go.mod.tidied || exit 1
          diff go.sum.original go.sum.tidied || exit 1

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          rustfmt --check $(find . -name '*.rs')

  "compile release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo build --release --features "mongosql-c/test" --target-dir "test_target"
          cargo build --release

  "download c library":
    - command: s3.get
      params:
        build_variants: ['macos', 'rhel76', 'ubuntu1804']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/libmongosql.a
        local_file: mongosql-rs/libmongosql.a
        bucket: mciuploads
    - command: s3.get
      params:
        build_variants: ['windows']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/mongosql.dll
        local_file: mongosql-rs/go/mongosql/mongosql.dll
        bucket: mciuploads

  "perform release":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/macos/libmongosql.a
        local_file: mongosql-rs/release/macos/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/macos/libmongosql.a
        remote_file: mongosql-rs/macos/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/rhel76/libmongosql.a
        local_file: mongosql-rs/release/rhel76/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/rhel76/libmongosql.a
        remote_file: mongosql-rs/rhel76/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/ubuntu1804/libmongosql.a
        local_file: mongosql-rs/release/ubuntu1804/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/ubuntu1804/libmongosql.a
        remote_file: mongosql-rs/ubuntu1804/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/windows/mongosql.dll
        local_file: mongosql-rs/release/windows/mongosql.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/windows/mongosql.dll
        remote_file: mongosql-rs/windows/${release_version}/mongosql.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream

  "run go tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          export LIBRARY_PATH="$(cd .. && pwd)"
          go test -v ./... | tee go-test-results.txt

  # Just running the spec tests on RHEL 7.6 for now
  "run spec tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          export LIBRARY_PATH="$(cd .. && pwd)"
          export LD_LIBRARY_PATH="$(cd .. && pwd)"

          echo "downloading mongodb"
          curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.1.1.tgz
          tar zxvf mongodb-linux-x86_64-rhel70-5.1.1.tgz
          mkdir -p data_db

          echo "starting mongodb"
          mongodb-linux-x86_64-rhel70-5.1.1/bin/mongod --dbpath data_db &

          echo "run spec tests"
          go test -v ./... -tags spectests | tee spec-test-results.txt
          cargo test -- --ignored
          pkill mongod

  "run rust tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo test -- --skip fuzz_test

  "run rust fuzz tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo test fuzz_test

  "upload c library":
    - command: s3.put
      params:
        build_variants: ['macos', 'rhel76', 'ubuntu1804']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/release/libmongosql.a
        remote_file: mongosql-rs/artifacts/${version_id}/${build_variant}/libmongosql.a
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants: ['windows']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/release/mongosql.dll
        remote_file: mongosql-rs/artifacts/${version_id}/${build_variant}/mongosql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants: ['macos', 'rhel76', 'ubuntu1804']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/test_target/release/libmongosql.a
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/libmongosql.a
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants: ['windows']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/test_target/release/mongosql.dll
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/mongosql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload go test results":
    - command: gotest.parse_files
      type: test
      params:
        files:
          - mongosql-rs/go/go-test-results.txt

  "upload spec test results":
    - command: gotest.parse_files
      type: test
      params:
        files:
          - mongosql-rs/go/spec-test-results.txt

pre:
  - func: "fetch source"
  - func: "generate expansions"

post: []

tasks:

  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: gofmt
    commands:
      - func: "check gofmt"

  - name: goimports
    commands:
      - func: "check goimports"

  - name: gomodtidy
    commands:
      - func: "check go mod tidy"

  - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "compile release"
      - func: "upload c library"

  - name: test-rust
    commands:
      - func: "install rust toolchain"
      - func: "run rust tests"

  - name: test-rust-fuzz
    tags: ["fuzz"]
    commands:
      - func: "install rust toolchain"
      - func: "run rust fuzz tests"

  - name: test-go
    depends_on:
      - name: compile
    commands:
      - func: "download c library"
      - func: "run go tests"
      - func: "upload go test results"

  - name: test-spec
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "download c library"
      - func: "run spec tests"
      - func: "upload spec test results"

  - name: release
    git_tag_only: true
    depends_on:
     - name: test-go
       variant: '*'
     - name: test-rust
       variant: '*'
    commands:
      - func: "perform release"

  - name: test-release
    patch_only: true
    depends_on:
     - name: compile
       variant: '*'
    commands:
      - func: "perform release"

buildvariants:

  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ ubuntu1804-test ]
    tasks:
      - name: clippy
      - name: rustfmt
      - name: gofmt
      - name: goimports
      - name: gomodtidy

  - name: ubuntu1804
    display_name: "Ubuntu 18.04"
    run_on: [ ubuntu1804-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: rhel76
    display_name: "RHEL 7.6"
    run_on: [ rhel76-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go
      - name: test-spec

  - name: macos
    display_name: "macOS 10.14"
    run_on: [ macos-1014 ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: windows
    display_name: "Windows"
    run_on: [ windows-64-vs2019-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: release
    display_name: "Release"
    run_on: [ ubuntu1804-large ]
    tasks:
      - name: release
      - name: test-release
