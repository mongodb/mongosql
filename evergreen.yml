# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-rs

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          export PATH="$PATH:$HOME/.cargo/bin"
          export CARGO_NET_GIT_FETCH_WITH_CLI=true

          export GOPATH="$HOME/go"
          export GOROOT=/opt/golang/go1.15
          export PATH="$GOROOT/bin:$PATH"

          cat <<EOT > expansions.yml
          prepare_shell: |
            set -o errexit
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
            export GOPATH="$GOPATH"
            export GOROOT="$GOROOT"
          EOT
    - command: expansions.update
      params:
        file: mongosql-rs/expansions.yml

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              export DEFAULT_HOST_OPTIONS='--default-host x86_64-pc-windows-msvc'
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
                ln -s /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
                ln -s /cygdrive/c/Users/$USER/.cargo/ ~/.cargo
          fi

          # install nightly rustfmt
          rustup toolchain install nightly -c rustfmt

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check gofmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          gofmt -s -d .

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          rustfmt +nightly --unstable-features --check $(find . -name '*.rs')

  "compile release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo build --release

  "download c library":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/${build_variant}/libmongosql.a
        local_file: mongosql-rs/libmongosql.a
        bucket: mciuploads

  "run go tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go/mongosql
        script: |
          ${prepare_shell}
          export LIBRARY_PATH="$(cd ../.. && pwd)"
          go test -v | tee go-test-results.txt

  "run rust tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo test

  "upload c library":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/release/libmongosql.a
        remote_file: mongosql-rs/artifacts/${version_id}/${build_variant}/libmongosql.a
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload go test results":
    - command: gotest.parse_files
      params:
        files:
          - mongosql-rs/go/mongosql/go-test-results.txt

pre:
  - func: "fetch source"
  - func: "generate expansions"

post: []

tasks:

  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: gofmt
    commands:
      - func: "check gofmt"

  - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "compile release"
      - func: "upload c library"

  - name: test-rust
    commands:
      - func: "install rust toolchain"
      - func: "run rust tests"

  - name: test-go
    depends_on:
      - name: compile
    commands:
      - func: "download c library"
      - func: "run go tests"
      - func: "upload go test results"

buildvariants:

  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ ubuntu1804-test ]
    tasks:
      - name: clippy
      - name: rustfmt
      - name: gofmt

  - name: ubuntu1804
    display_name: "Ubuntu 18.04"
    run_on: [ ubuntu1804-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-go

  - name: rhel76
    display_name: "RHEL 7.6"
    run_on: [ rhel76-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-go

  - name: macos
    display_name: "macOS 10.14"
    run_on: [ macos-1014 ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-go
