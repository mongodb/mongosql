# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-rs

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          export PATH="$PATH:$HOME/.cargo/bin"
          export CARGO_NET_GIT_FETCH_WITH_CLI=true
          export MONGODB_TEST_VERSION="6.0.5"
          export MONGODB_TEST_RHEL_VERSION="mongodb-linux-x86_64-rhel70-$MONGODB_TEST_VERSION"
          export MONGODB_TEST_UBUNTU_VERSION="mongodb-linux-x86_64-ubuntu2204-$MONGODB_TEST_VERSION"

          export GOPATH="$HOME/go"
          export GOROOT=/opt/golang/go1.19
          export GOPRIVATE=github.com/10gen/*
          export GOCACHE="$HOME/gocache"
          mkdir -p "$GOCACHE"
          if [ "Windows_NT" = "$OS" ]; then
             set -o igncr
             export GOROOT='C:\golang\go1.19'
             export GOPATH=$(cygpath -w "$GOPATH")
             export GOCACHE=$(cygpath -w "$GOCACHE")
          fi
          export PATH="$GOROOT/bin:$PATH"
          if [[ "${triggered_by_git_tag}" != "" ]]; then
            export release_version=$(echo ${triggered_by_git_tag} | sed s/v//)
          else
            export release_version=test_release
          fi

          cat <<EOT > expansions.yml
          release_version: "$release_version"
          prepare_shell: |
            set -o errexit
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
            export GOPATH="$GOPATH"
            export GOROOT="$GOROOT"
            export GOPRIVATE="$GOPRIVATE"
            export GOCACHE="$GOCACHE"
            export MONGODB_TEST_VERSION="$MONGODB_TEST_VERSION"
            export MONGODB_TEST_RHEL_VERSION="$MONGODB_TEST_RHEL_VERSION"
            export MONGODB_TEST_UBUNTU_VERSION="$MONGODB_TEST_UBUNTU_VERSION"
            export release_version="$release_version"
            git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"
          EOT
    - command: expansions.update
      params:
        file: mongosql-rs/expansions.yml

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              export DEFAULT_HOST_OPTIONS='--default-host x86_64-pc-windows-msvc'
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
                ln -sf /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
                ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo
          fi

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check gofmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          gofmt -s -d .

  "check goimports":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          go get golang.org/x/tools/cmd/goimports
          if [[ $("$GOPATH/bin/goimports" -l .) ]]; then
              echo "some files not formatted according to goimports"
              "$GOPATH/bin/goimports" -d -e .
              exit 1
          else
              echo "files all formatted according to goimports"
              exit 0
          fi

  "check go mod tidy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}

          # save original files
          cp go.mod go.mod.original
          cp go.sum go.sum.original

          # tidy files and save tidied versions
          go mod tidy
          cp go.mod go.mod.tidied
          cp go.sum go.sum.tidied

          # restore original files
          rm go.mod && cp go.mod.original go.mod
          rm go.sum && cp go.sum.original go.sum

          # fail if tidying changed files
          diff go.mod.original go.mod.tidied || exit 1
          diff go.sum.original go.sum.tidied || exit 1

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          rustfmt --check $(find . -name '*.rs')

  "compile release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo build --release --features "mongosql-c/test" --target-dir "test_target"
          cargo build --release

  "download c library":
    - command: s3.get
      params:
        build_variants: ['macos', 'macos-arm64', 'rhel76', 'ubuntu1804', 'amazon2-arm64']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/libmongosql.a
        local_file: mongosql-rs/libmongosql.a
        bucket: mciuploads
    - command: s3.get
      params:
        build_variants: ['windows']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/mongosql.dll
        local_file: mongosql-rs/go/mongosql/mongosql.dll
        bucket: mciuploads

  "perform release":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/macos/libmongosql.a
        local_file: mongosql-rs/release/macos/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/macos/libmongosql.a
        remote_file: mongosql-rs/macos/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/macos-arm64/libmongosql.a
        local_file: mongosql-rs/release/macos-arm64/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/macos-arm64/libmongosql.a
        remote_file: mongosql-rs/macos-arm64/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/rhel76/libmongosql.a
        local_file: mongosql-rs/release/rhel76/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/rhel76/libmongosql.a
        remote_file: mongosql-rs/rhel76/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/ubuntu1804/libmongosql.a
        local_file: mongosql-rs/release/ubuntu1804/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/ubuntu1804/libmongosql.a
        remote_file: mongosql-rs/ubuntu1804/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/amazon2-arm64/libmongosql.a
        local_file: mongosql-rs/release/amazon2-arm64/libmongosql.a
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/amazon2-arm64/libmongosql.a
        remote_file: mongosql-rs/amazon2-arm64/${release_version}/libmongosql.a
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-rs/artifacts/${version_id}/windows/mongosql.dll
        local_file: mongosql-rs/release/windows/mongosql.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-rs/release/windows/mongosql.dll
        remote_file: mongosql-rs/windows/${release_version}/mongosql.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream

  "run criterion benchmarks":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo bench --bench translate

  "run criterion profile":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo bench --bench translate -- --profile-time 10

  "run go tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          export LIBRARY_PATH="$(cd .. && pwd)"
          go test -v ./... | tee go-test-results.txt

  # Just running the spec tests on RHEL 7.6 for now
  "run spec tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs/go
        script: |
          ${prepare_shell}
          export LIBRARY_PATH="$(cd .. && pwd)"
          export LD_LIBRARY_PATH="$(cd .. && pwd)"

          echo "downloading mongodb"
          curl -O https://fastdl.mongodb.org/linux/$MONGODB_TEST_RHEL_VERSION.tgz
          tar zxvf $MONGODB_TEST_RHEL_VERSION.tgz
          mkdir -p data_db

          echo "starting mongodb"
          $MONGODB_TEST_RHEL_VERSION/bin/mongod --dbpath data_db &

          echo "run spec tests"
          go test -v ./... -tags spectests | tee spec-test-results.txt
          cargo test -- --ignored --skip run_index_usage_tests
          pkill mongod

  # Just running the index usage tests on RHEL 7.6 for now
  "run index usage tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}

          echo "downloading mongodb"
          curl -O https://fastdl.mongodb.org/linux/$MONGODB_TEST_RHEL_VERSION.tgz
          tar zxvf $MONGODB_TEST_RHEL_VERSION.tgz
          mkdir -p data_db

          echo "starting mongodb"
          $MONGODB_TEST_RHEL_VERSION/bin/mongod --dbpath data_db &

          echo "run index usage tests"
          cargo test run_index_usage_tests -- --ignored
          pkill mongod

  "run rust tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo test -- --skip fuzz_test

  "run rust fuzz tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo test fuzz_test

  "upload c library":
    - command: s3.put
      params:
        build_variants: ['macos', 'macos-arm64', 'rhel76', 'ubuntu1804', 'amazon2-arm64']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/release/libmongosql.a
        remote_file: mongosql-rs/artifacts/${version_id}/${build_variant}/libmongosql.a
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants: ['windows']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/release/mongosql.dll
        remote_file: mongosql-rs/artifacts/${version_id}/${build_variant}/mongosql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants: ['macos', 'macos-arm64', 'rhel76', 'ubuntu1804', 'amazon2-arm64']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/test_target/release/libmongosql.a
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/libmongosql.a
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants: ['windows']
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/test_target/release/mongosql.dll
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/mongosql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload criterion artifacts":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/criterion/translate_simple/profile/flamegraph.svg
        remote_file: mongosql-rs/artifacts/test/${version_id}/${build_variant}/criterion/flamegraph_translate_simple.svg
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload go test results":
    - command: gotest.parse_files
      type: test
      params:
        files:
          - mongosql-rs/go/go-test-results.txt

  "upload spec test results":
    - command: gotest.parse_files
      type: test
      params:
        files:
          - mongosql-rs/go/spec-test-results.txt

  "run TPC-H benchmark":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          echo "downloading mongodb"
          curl -O https://fastdl.mongodb.org/linux/$MONGODB_TEST_UBUNTU_VERSION.tgz
          tar zxvf $MONGODB_TEST_UBUNTU_VERSION.tgz
          mkdir -p data_db

          echo "starting mongodb"
          $MONGODB_TEST_UBUNTU_VERSION/bin/mongod --dbpath data_db &

          echo "setting up Genny"
          git clone git@github.com:mongodb/genny ../genny
          cd ../genny
          # Workaround until issue in `lamplib` requirements.txt is fixed
          # EVG-20471
          git checkout e50f6d5
          ./run-genny install -d ubuntu2204
          cd -

          echo "setting up mongodb-database-tools"
          curl -LO https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.7.2.tgz
          tar zxvf mongodb-database-tools-ubuntu2204-x86_64-100.7.2.tgz

          # call pipeline generator to create atlas_sql/(normalized/denormalized) phase files
          cargo run --bin pipeline_generator
          
          echo "Downloading: https://dsi-donot-remove.s3.us-west-2.amazonaws.com/tpch/${dataset_filename}"
          curl -LO "https://dsi-donot-remove.s3.us-west-2.amazonaws.com/tpch/${dataset_filename}"
          mongodb-database-tools-ubuntu2204-x86_64-100.7.2/bin/mongorestore --drop --numInsertionWorkersPerCollection=8 --bypassDocumentValidation --gzip --archive=${dataset_filename}
          ../genny/run-genny workload benchmark/${pipeline_dir}/${workload_filename}

          # add validation dataset separately if needed; load into `tpch` database
          if [[ "${pipeline_dir}" == *"validation"* ]]; then
            echo "Downloading: https://dsi-donot-remove.s3.us-west-2.amazonaws.com/tpch/tpch-validation.archive.gz"
            curl -LO "https://dsi-donot-remove.s3.us-west-2.amazonaws.com/tpch/tpch-validation.archive.gz"
            mongodb-database-tools-ubuntu2204-x86_64-100.7.2/bin/mongorestore --nsFrom "validation.*" --nsTo "tpch.*" --numInsertionWorkersPerCollection=8 --bypassDocumentValidation --gzip --archive=tpch-validation.archive.gz
          fi
          
          # Print out the translations
          find benchmark/${pipeline_dir}/phase/ -type f -name '*' -exec sh -c 'for dir; do echo "$dir"; find "$dir" -maxdepth 1 -type f -print0 | xargs -0 cat; done' {} +
          
          rm ${dataset_filename}
          pkill mongod

pre:
  - func: "fetch source"
  - func: "generate expansions"

post: []

tasks:

  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: gofmt
    commands:
      - func: "check gofmt"

  - name: goimports
    commands:
      - func: "check goimports"

  - name: gomodtidy
    commands:
      - func: "check go mod tidy"

  - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "compile release"
      - func: "upload c library"

  - name: test-rust
    commands:
      - func: "install rust toolchain"
      - func: "run rust tests"

  - name: test-rust-fuzz
    tags: ["fuzz"]
    commands:
      - func: "install rust toolchain"
      - func: "run rust fuzz tests"

  - name: test-go
    depends_on:
      - name: compile
    commands:
      - func: "download c library"
      - func: "run go tests"
      - func: "upload go test results"

  - name: test-spec
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "download c library"
      - func: "run spec tests"
      - func: "upload spec test results"

  - name: test-index-usage
    commands:
      - func: "install rust toolchain"
      - func: "run index usage tests"

  - name: release
    git_tag_only: true
    depends_on:
      - name: compile
        variant: '*'
    commands:
      - func: "perform release"

  - name: criterion
    commands:
      - func: "install rust toolchain"
      - func: "run criterion benchmarks"
      - func: "run criterion profile"
      - func: "upload criterion artifacts"

  - name: tpch-001-normalized-atlas-sql
    allow_for_git_tag: false
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-0.001-normalized-indexed.archive.gz"
          pipeline_dir: atlas_sql/normalized
          workload_filename: "workload_norm_sf.001.yml"

  - name: tpch-001-denormalized-atlas-sql
    allow_for_git_tag: false
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-0.001-denormalized-indexed.archive.gz"
          pipeline_dir: atlas_sql/denormalized
          workload_filename: "workload_denorm_sf.001.yml"

  - name: tpch-1-normalized-atlas-sql
    allow_for_git_tag: false
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-1-normalized-indexed.archive.gz"
          pipeline_dir: atlas_sql/normalized
          workload_filename: "workload_norm_sf1.yml"

  - name: tpch-1-denormalized-atlas-sql
    allow_for_git_tag: false
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-1-denormalized-indexed.archive.gz"
          pipeline_dir: atlas_sql/denormalized
          workload_filename: "workload_denorm_sf1.yml"

  - name: tpch-001-normalized-bic
    allow_for_git_tag: false
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-0.001-normalized-indexed.archive.gz"
          pipeline_dir: bic/normalized
          workload_filename: "workload.yml"

  - name: tpch-001-denormalized-bic
    allow_for_git_tag: false
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-0.001-denormalized-indexed.archive.gz"
          pipeline_dir: bic/denormalized
          workload_filename: "workload.yml"

  - name: tpch-1-normalized-bic
    allow_for_git_tag: false
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-1-normalized-indexed.archive.gz"
          pipeline_dir: bic/normalized
          workload_filename: "workload.yml"

  - name: tpch-1-denormalized-bic
    allow_for_git_tag: false
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-1-denormalized-indexed.archive.gz"
          pipeline_dir: bic/denormalized
          workload_filename: "workload.yml"

  - name: tpch-1-normalized-validation
    allow_for_git_tag: false
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-1-normalized-indexed.archive.gz"
          pipeline_dir: validation/normalized
          workload_filename: "workload_norm_sf1.yml"

  - name: tpch-1-denormalized-validation
    allow_for_git_tag: false
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: "run TPC-H benchmark"
        vars:
          dataset_filename: "tpch-1-denormalized-indexed.archive.gz"
          pipeline_dir: validation/denormalized
          workload_filename: "workload_denorm_sf1.yml"

buildvariants:

  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ ubuntu1804-test ]
    tasks:
      - name: clippy
      - name: rustfmt
      - name: gofmt
      - name: goimports
      - name: gomodtidy

  - name: ubuntu1804
    display_name: "Ubuntu 18.04"
    run_on: [ ubuntu1804-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: rhel76
    display_name: "RHEL 7.6"
    run_on: [ rhel76-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go
      - name: test-spec
      - name: test-index-usage

  - name: macos
    display_name: "macOS 10.14"
    run_on: [ macos-1014 ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: macos-arm64
    display_name: "macOS 11.0 arm64"
    run_on: [ macos-1100-arm64 ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: amazon2-arm64
    display_name: "Amazon2 arm64"
    run_on: [ amazon2-arm64-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: windows
    display_name: "Windows"
    run_on: [ windows-64-vs2019-large ]
    tasks:
      - name: compile
      - name: test-rust
      - name: test-rust-fuzz
      - name: test-go

  - name: benchmark
    display_name: "Benchmark"
    run_on: [ ubuntu2004-medium ]
    tasks:
      - name: criterion

  - name: tpch
    display_name: "TPC-H"
    run_on: [ ubuntu2204-large ]
    tasks:
      - name: tpch-001-normalized-atlas-sql
      - name: tpch-001-denormalized-atlas-sql
      - name: tpch-1-normalized-atlas-sql
      - name: tpch-1-denormalized-atlas-sql
      - name: tpch-1-normalized-validation
      - name: tpch-1-denormalized-validation

  - name: release
    display_name: "Release"
    run_on: [ ubuntu1804-large ]
    tasks:
      - name: release
