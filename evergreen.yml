# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-rs

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          cat <<EOT > expansions.yml
          prepare_shell: |
            set -o errexit
            . ~/.cargo/env
          EOT
    - command: expansions.update
      params:
        file: mongosql-rs/expansions.yml

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              export DEFAULT_HOST_OPTIONS='--default-host x86_64-pc-windows-msvc'
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
                ln -s /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
                ln -s /cygdrive/c/Users/$USER/.cargo/ ~/.cargo
          fi

          # this file is not created by default on Windows
          echo 'export PATH=$PATH:~/.cargo/bin' >> ~/.cargo/env

          echo "export CARGO_NET_GIT_FETCH_WITH_CLI=true" >> ~/.cargo/env

          . ~/.cargo/env

          # install nightly rustfmt
          rustup toolchain install nightly -c rustfmt

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          rustfmt +nightly --unstable-features --check $(find . -name '*.rs')

  "compile release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-rs
        script: |
          ${prepare_shell}
          cargo build --release

  "upload c library":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-rs/target/release/libmongosql.a
        remote_file: mongosql-rs/artifacts/${build_variant}/${task_id}/libmongosql.a
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

pre:
  - func: "fetch source"
  - func: "install rust toolchain"
  - func: "generate expansions"

post: []

tasks:

  - name: clippy
    commands:
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "check rustfmt"

  - name: compile
    commands:
      - func: "compile release"
      - func: "upload c library"

buildvariants:

  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ ubuntu1804-test ]
    tasks:
      - name: clippy
      - name: rustfmt

  - name: ubuntu1804
    display_name: "Ubuntu 18.04"
    run_on: [ ubuntu1804-build ]
    tasks:
      - name: compile
