stepback: true
command_type: system
buildvariants:
- name: linux
  display_name: Linux
  expansions:
    mongo_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.1.tgz
  run_on:
  - ubuntu1404-build
  tasks:
  - "*"

- name: linux-enterprise
  display_name: Linux (Enterprise)
  expansions:
      mongo_url: http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-amzn64-3.2.1.tgz --output mongodb.tgz
      mongod_args:  --sslMode requireSSL --sslPEMKeyFile ./src/testdata/server.pem
      mongo_args:  --ssl --sslAllowInvalidCertificates --sslPEMKeyFile src/testdata/client.pem 
      gotest_env: "SQLPROXY_SSLTEST=1"
  run_on:
    - linux-64-amzn-build
  tasks:
  - "*"

- name: windows-64
  display_name: Windows
  run_on:
  - windows-64-vs2013-test
  expansions:
    mongo_url: https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-3.2.1.zip
    extension: .exe
  tasks:
  - "*"
- name: osx
  display_name: OSX
  run_on:
  - osx-1010
  expansions:
    mongo_url: https://fastdl.mongodb.org/osx/mongodb-osx-x86_64-3.2.1.tgz
  tasks:
  - "*"

pre:
  - command: shell.track
  - command: shell.exec
    params:
      script: |
        rm -rf src
        mkdir src
  - command: shell.exec
    params:
      working_dir: src
      silent: true
      script: |
        echo "Building credential file..."
        cat > creds.yml <<END_OF_CREDS
        credentials:  {
          github: "${github_token}",
        }
        providers:
          aws:
            aws_id: "${aws_key}"
            aws_secret: "${aws_secret}"

        END_OF_CREDS
        echo "Done!"
  - command: shell.exec
    params:
      silent: true
      script: |
        ${killall_mci|pkill -9 mongo; pkill -9 mongodump; pkill -9 mongoexport; pkill -9 mongoimport; pkill -9 mongofiles; pkill -9 mongooplog; pkill -9 mongorestore; pkill -9 mongostat; pkill -9 mongotop; pkill -9 mongod; pkill -9 mongos; pkill -f buildlogger.py; pkill -f smoke.py} >/dev/null 2>&1
        rm -rf src /data/db/*
        exit 0

post:
  - command: gotest.parse_files
    params: 
      files: ["src/*.suite", "src/**/*.suite", "src/**/**/*.suite"]
  - command: shell.cleanup

functions:

  "build SQLProxy":
    command: shell.exec
    type: test
    params:
      working_dir: src
      script: |
        set -o verbose
        set -o errexit
        echo "Building SQLProxy"
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        . ./set_gopath.sh
        go build -o sqlproxy main/main.go
        echo "Done!"

  "download mongod":
    command: shell.exec
    params:
      script: |
        set -o verbose
        rm -rf mongodb
        mkdir mongodb
        cd mongodb
        curl -s ${mongo_url} --output mongodb.tgz
        ${decompress} mongodb.tgz
        chmod +x ./mongodb-*/bin/*
        mv ./mongodb-*/bin/* .

  "download test data":
    command: shell.exec
    params:
      working_dir: src
      script: |
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/attendees.bson.gz --output testdata/input/attendees.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/flights201406.bson.gz --output testdata/input/flights201406.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Batters.bson.gz --output testdata/input/Batters.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Calcs.bson.gz --output testdata/input/Calcs.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/DateTime.bson.gz --output testdata/input/DateTime.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Election.bson.gz --output testdata/input/Election.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Fischeriris.bson.gz --output testdata/input/Fischeriris.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Loan.bson.gz --output testdata/input/Loan.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/NumericBins.bson.gz --output testdata/input/NumericBins.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Rei.bson.gz --output testdata/input/Rei.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/SeattleCrime.bson.gz --output testdata/input/SeattleCrime.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Securities.bson.gz --output testdata/input/Securities.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/SpecialData.bson.gz --output testdata/input/SpecialData.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Staples.bson.gz --output testdata/input/Staples.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/Starbucks.bson.gz --output testdata/input/Starbucks.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/UTStarcom.bson.gz --output testdata/input/UTStarcom.bson.gz
        curl -s https://s3.amazonaws.com/mciuploads/sqlproxy/data/xy.bson.gz --output testdata/input/xy.bson.gz

  "fetch source" :
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      type: test
      params:
        directory: src


  "generate coverage txt":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        . ./set_gopath.sh
        perl -pe 's/.*src/github.com\/10gen\/sqlproxy/' coverage.out > coverage_rewrite.out
        go tool cover -func=coverage_rewrite.out -o coverage.txt

  "generate coverage html":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        . ./set_gopath.sh
        perl -pe 's/.*src/github.com\/10gen\/sqlproxy/' coverage.out > coverage_rewrite.out
        go tool cover -html=coverage_rewrite.out -o coverage.html

  "rewrite coverage report":
    command: shell.exec
    params:
      working_dir: src
      script: |
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        . ./set_gopath.sh
        perl -pe 's/.*src/github.com\/10gen\/sqlproxy/' coverage.out > coverage_rewrite.out

  "setup creds":
    command: shell.exec
    params:
      script: |
        set -o verbose
        cp creds.yml src

  "start mongod":
    command: shell.exec
    params:
      background: true
      script: |
        set -o verbose
        echo "Starting mongod..."
        rm -rf mongodb/dbpath && mkdir mongodb/dbpath
        ./mongodb/mongod${extension} --dbpath mongodb/dbpath --setParameter=enableTestCommands=1 ${mongod_args}
        echo "Waiting for mongod to start up..."
        ./mongodb/mongo${extension} --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:27017"); return true}catch(e){return false}}, "timed out connecting")' ${mongo_args}
        echo "Done!"

  "upload coverage html report":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/coverage.html
      remote_file: sqlproxy/coverage/${task_id}.html
      bucket: mciuploads
      permissions: public-read
      content_type: text/html
      display_name: Coverage Report (HTML)

  "upload coverage txt report":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/coverage.txt
      remote_file: sqlproxy/coverage/${task_id}.txt
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: Coverage Report (TXT)

  "upload SQLProxy":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/sqlproxy
      remote_file: sqlproxy/binaries/sqlproxy${extension}
      bucket: mciuploads
      permissions: public-read
      content_type: application/octet-stream
      display_name: sqlproxy${extension}

tasks:
- name: blackbox
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          mkfifo test_pipe
          tee -a blackbox.suite < test_pipe&
          ${gotest_env} go test -blackbox -run TestBlackBox -timeout 4h -v -coverprofile=coverage.out > test_pipe
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: blackbox-optoff
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          mkfifo test_pipe
          tee -a blackbox.suite < test_pipe&
          ${gotest_env} SQLPROXY_OPTIMIZE_OFF=0 go test -blackbox -run TestBlackBox -timeout 4h -v -coverprofile=coverage.out > test_pipe
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: schema
  commands:
    - func: "fetch source"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          cd schema
          mkfifo test_pipe
          tee -a schema.suite < test_pipe&
          go test -v -coverprofile=coverage.out > test_pipe
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o verbose
          mv schema/coverage.out .
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: dist
  commands:
    - func: "fetch source"
    - func: "build SQLProxy"
    - func: "upload SQLProxy"

- name: evaluator
  commands:
    - func: "fetch source"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          cd evaluator
          mkfifo test_pipe
          tee -a evaluator.suite < test_pipe&
          ${gotest_env} go test -v -coverprofile=coverage.out > test_pipe
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          mv evaluator/coverage.out .
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: sqlproxy
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          mkfifo test_pipe
          tee -a sqlproxy.suite < test_pipe&
          ${gotest_env} go test -timeout 4h -v -coverprofile=coverage.out > test_pipe
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: sqlproxy-optoff
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          mkfifo test_pipe
          tee -a sqlproxy.suite < test_pipe&
          ${gotest_env} SQLPROXY_OPTIMIZE_OFF=0 go test -timeout 4h -v -coverprofile=coverage.out > test_pipe
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: tableau
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          set -o verbose
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          . ./set_gopath.sh
          mkfifo test_pipe
          tee -a tableau.suite < test_pipe&
          ${gotest_env} go test -tableau -run TestTableauDemo -timeout 4h -v -coverprofile=coverage.out > test_pipe
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"
