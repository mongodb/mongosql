stepback: true
command_type: system
buildvariants:
- name: debian71
  display_name: Debian 7.1
  run_on:
  - debian71-test
  expansions:
    cover: "-"
    gorootvars: GOROOT=/opt/go PATH="/opt/go/bin:$PATH"
    mongo_url: http://downloads.mongodb.org/linux/mongodb-linux-x86_64-debian71-3.3.10.tgz
    push_arch: x86_64-debian71
    push_name: linux
    push_path: linux
  tasks:
  - "!benchmark !check"
- name: debian81
  display_name: Debian 8.1 (nightly)
  run_on:
  - debian81-test
  expansions:
    cover: "-"
    gorootvars: GOROOT=/opt/go PATH="/opt/go/bin:$PATH"
    mongo_url: http://downloads.mongodb.org/linux/mongodb-linux-x86_64-debian81-latest.tgz
    push_arch: x86_64-debian81
    push_name: linux
    push_path: linux
  tasks:
  - "!benchmark !check"
- name: linux-64-amazon-ami
  display_name: Amazon Linux (Enterprise)
  expansions:
    gotest_env: "SQLPROXY_SSLTEST=1"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-amzn64-3.3.10.tgz --output mongodb.tgz
    mongod_args: --sslMode requireSSL --sslPEMKeyFile ./testdata/server.pem
    mongo_args: --ssl --sslAllowInvalidCertificates --sslPEMKeyFile testdata/client.pem
    push_arch: x86_64-enterprise-amzn64
    push_name: linux
    push_path: linux
  run_on:
    - linux-64-amzn-build
  tasks:
  - "!benchmark !check"
- name: linux-64-amazon-ami-benchmarks
  display_name: Amazon Linux (Enterprise Benchmarks)
  expansions:
    gotest_env: "SQLPROXY_SSLTEST=1"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-amzn64-3.3.10.tgz --output mongodb.tgz
    mongod_args: --sslMode requireSSL --sslPEMKeyFile ./testdata/server.pem
    mongo_args: --ssl --sslAllowInvalidCertificates --sslPEMKeyFile testdata/client.pem
    push_arch: x86_64-enterprise-amzn64
    push_name: linux
    push_path: linux
  run_on:
    - linux-64-amzn-build
  batchtime: 1440 # 1 day
  tasks:
  - "benchmark"
- name: osx
  display_name: OSX 10.10
  run_on:
  - osx-1010
  expansions:
    cover: "-"
    mongo_url: https://downloads.mongodb.org/osx/mongodb-osx-x86_64-3.3.10.tgz
    push_arch: x86_64
    push_name: osx
    push_path: osx
  tasks:
  - "!benchmark !check"
- name: rhel62
  display_name: RHEL 6.2
  expansions:
    cover: "-"
    gorootvars: GOROOT=/opt/go PATH="/opt/go/bin:$PATH"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-rhel62-3.3.10.tgz
    push_arch: x86_64-rhel62
    push_name: linux
    push_path: linux
  run_on:
  - rhel62-test
  tasks:
  - "!benchmark !check"
- name: rhel70
  display_name: RHEL 7.0
  expansions:
    gorootvars: GOROOT=/opt/go PATH="/opt/go/bin:$PATH"
    mongo_url: http://downloads.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.3.10.tgz
    push_arch: x86_64-rhel70
    push_name: linux
    push_path: linux
  run_on:
  - rhel70
  tasks:
  - "!benchmark !check"
- name: rhel-71-ppc64le
  display_name: RHEL 7.1 PPC64LE
  expansions:
    # RHEL 7.1 PPC64LE machines kerberos setup does not work
    build_tags: -gccgoflags "$(pkg-config --libs --cflags libssl)" -tags 'ssl'
    cover: "-"
    library_path: PATH="/opt/mongodbtoolchain/v2/bin/:$PATH"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-ppc64le-enterprise-rhel71-3.3.10.tgz
    push_arch: ppc64le-rhel71
    push_name: linux
    push_path: linux
    using_go14: true
  run_on:
  - rhel71-power8-test
  tasks:
  - "!benchmark !check"
- name: rhel-72-s390x
  display_name: RHEL 7.2 s390x (nightly)
  expansions:
    build_tags: -gccgoflags "$(pkg-config --libs --cflags libssl)" -tags 'ssl'
    cover: "-"
    library_path: PATH="/opt/mongodbtoolchain/v2/bin/:$PATH"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-s390x-enterprise-rhel72-latest.tgz
    push_arch: s390x-enterprise-rhel72
    push_name: linux
    push_path: linux
    using_go14: true
  run_on:
  - rhel72-zseries-build
  - rhel72-zseries-test
  tasks:
  - "!benchmark !check"
- name: suse11-64
  display_name: SLES 11
  expansions:
    cover: "-"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-suse11-3.3.10.tgz
    push_arch: x86_64-suse11
    push_name: linux
    push_path: linux
  run_on:
  - suse11-test
  tasks:
  - "!benchmark !check"
- name: suse12-64
  display_name: SLES 12
  expansions:
    cover: "-"
    mongo_url: http://downloads.10gen.com/linux/mongodb-linux-x86_64-enterprise-suse12-3.3.10.tgz
    push_arch: x86_64-suse12
    push_name: linux
    push_path: linux
  run_on:
  - suse12-test
  tasks:
  - "!benchmark !check"
- name: ubuntu1404-64
  display_name: Ubuntu 14.04
  expansions:
    mongo_url: https://downloads.mongodb.org/linux/mongodb-linux-x86_64-3.3.10.tgz
    push_arch: x86_64-ubuntu1404
    push_name: linux
    push_path: linux
  run_on:
  - ubuntu1404-build
  tasks:
  - "!benchmark"
- name: windows-64
  display_name: Windows 64
  run_on:
  - windows-64-vs2013-test
  expansions:
    archive_format: zip
    cover: "-"
    extension: .exe
    library_path: PATH="/cygdrive/c/mingw-w64/x86_64-4.9.1-posix-seh-rt_v3-rev1/mingw64/bin:/cygdrive/c/sasl/:$PATH"
    mongo_url: https://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-3.3.10.zip
    push_arch: x86_64
    push_name: win32
    push_path: win32
    separator: \\
  tasks:
  - "!benchmark !check"
pre:
  - command: shell.track
  - command: shell.exec
    params:
      script: |
        rm -rf src
        mkdir src
  - command: shell.exec
    params:
      silent: true
      script: |
        ${killall_mci|pkill -9 mongo; pkill -9 mongodump; pkill -9 mongoexport; pkill -9 mongoimport; pkill -9 mongofiles; pkill -9 mongooplog; pkill -9 mongorestore; pkill -9 mongostat; pkill -9 mongotop; pkill -9 mongod; pkill -9 mongos; pkill -f buildlogger.py; pkill -f smoke.py} >/dev/null 2>&1
        rm -rf src /data/db/*
        exit 0
post:
  - command: gotest.parse_files
    params:
      files: ["src/*.suite", "src/**/*.suite", "src/**/**/*.suite"]
  - command: shell.cleanup

functions:

  "check formatting":
    command: shell.exec
    type: test
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        echo "Checking formatting"
        unformatted=$(${gorootvars} ${library_path} gofmt -e -l `find . -path ./vendor -prune -o -name '*.go' -print` 2>&1)

        for fn in $unformatted; do
          echo >&2 "  Unformatted: $fn"
        done
        [ -z "$unformatted" ] || exit 1

        echo "Done!"

  "build MongoDRDL":
    command: shell.exec
    type: test
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        echo "Building MongoDRDL"
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        if [ '${library_path}' != '' ]; then
          export ${library_path}
        fi;
        if [ '${using_go14}' != '' ]; then
          SQL_PROXY_PKG='github.com/10gen/sqlproxy'
          rm -rf .gopath/
          mkdir -p .gopath/src/github.com/10gen
          ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
          mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
          export GOPATH=`pwd`/vendor:`pwd`/.gopath
        else
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
          else
            export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
          fi;
        fi;
        # In RHEL 5.5, /usr/bin/ld can't handle --build-id parameters, so
        # use a wrapper if it's present on the system
        #
        if [ -d /opt/ldwrapper/bin ]
        then
          export PATH=/opt/ldwrapper/bin:$PATH
        fi;
        sed -i.bak -e "s/built-without-version-string/$(git describe)/" \
           -e "s/built-without-git-spec/$(git rev-parse HEAD)/" \
           common/version.go
        ${gorootvars} ${library_path} go build ${build_tags} -o drdl mongodrdl/main/mongodrdl.go
        echo "Done!"

  "build SQLProxy":
    command: shell.exec
    type: test
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        echo "Building SQLProxy"
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        if [ '${library_path}' != '' ]; then
          export ${library_path}
        fi;
        # In RHEL 5.5, /usr/bin/ld can't handle --build-id parameters, so
        # use a wrapper if it's present on the system
        #
        if [ -d /opt/ldwrapper/bin ]
        then
          export PATH=/opt/ldwrapper/bin:$PATH
        fi;
        if [ '${using_go14}' != '' ]; then
          SQL_PROXY_PKG='github.com/10gen/sqlproxy'
          rm -rf .gopath/
          mkdir -p .gopath/src/github.com/10gen
          ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
          mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
          export GOPATH=`pwd`/vendor:`pwd`/.gopath
        else
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
          else
            export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
          fi;
        fi;
        sed -i.bak -e "s/built-without-version-string/$(git describe)/" \
           -e "s/built-without-git-spec/$(git rev-parse HEAD)/" \
           common/version.go
        ${gorootvars} ${library_path} go build ${build_tags} -o sqlproxy main/sqlproxy.go
        echo "Done!"

  "create release":
    command: shell.exec
    type: test
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        rm -rf build
        mkdir build
        cp drdl sqlproxy build
        echo version: $(git --git-dir .git describe) > version.yml
        if [ "Windows_NT" = "$OS" ]; then
          curl -O http://boxes.10gen.com/build/openssl-1.0.1t-vs2015-installed.tgz
          tar zxvf openssl-1.0.1t-vs2015-installed.tgz
          cp openssl/bin/ssleay32.dll openssl/bin/libeay32.dll build
          ${python|python} buildscripts/make_archive.py -o release.${archive_format|tgz} --format ${archive_format|tgz} --transform build/sqlproxy=bin/mongosqld${extension} --transform build/drdl=bin/mongodrdl${extension} --transform build/ssleay32.dll=bin/ssleay32.dll --transform build/libeay32.dll=bin/libeay32.dll --transform distsrc/README=README --transform distsrc/THIRD-PARTY-NOTICES=THIRD-PARTY-NOTICES LICENSE distsrc${separator|/}README distsrc${separator|/}THIRD-PARTY-NOTICES build${separator|/}sqlproxy build${separator|/}drdl build${separator|/}libeay32.dll build${separator|/}ssleay32.dll
        else
          ${python|python} buildscripts/make_archive.py -o release.${archive_format|tgz} --format ${archive_format|tgz} --transform build/sqlproxy=bin/mongosqld${extension} --transform build/drdl=bin/mongodrdl${extension} --transform distsrc/README=README --transform distsrc/THIRD-PARTY-NOTICES=THIRD-PARTY-NOTICES LICENSE distsrc${separator|/}README distsrc${separator|/}THIRD-PARTY-NOTICES build${separator|/}sqlproxy build${separator|/}drdl
        fi;

  "download mongod":
    command: shell.exec
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        rm -rf bin || true
        mkdir bin
        cd bin
        curl -s ${mongo_url} --output mongodb.tgz
        ${decompress} mongodb.tgz
        chmod +x ./mongodb-*/bin/*
        mv ./mongodb-*/bin/* .

  "download test data":
    command: shell.exec
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/attendees.bson.gz --output testdata/input/attendees.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/flights201406.bson.gz --output testdata/input/flights201406.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Batters.bson.gz --output testdata/input/Batters.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Calcs.bson.gz --output testdata/input/Calcs.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/DateTime.bson.gz --output testdata/input/DateTime.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Election.bson.gz --output testdata/input/Election.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Fischeriris.bson.gz --output testdata/input/Fischeriris.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Loan.bson.gz --output testdata/input/Loan.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/NumericBins.bson.gz --output testdata/input/NumericBins.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/DecimalRei.bson.gz --output testdata/input/Rei.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/SeattleCrime.bson.gz --output testdata/input/SeattleCrime.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Securities.bson.gz --output testdata/input/Securities.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/SpecialData.bson.gz --output testdata/input/SpecialData.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/DecimalStaples.bson.gz --output testdata/input/Staples.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/Starbucks.bson.gz --output testdata/input/Starbucks.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/DecimalUTStarcom.bson.gz --output testdata/input/UTStarcom.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/xy.bson.gz --output testdata/input/xy.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/bigarray.bson.gz --output testdata/input/bigarray.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/bigcoll.bson.gz --output testdata/input/bigcoll.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/bignestedarray.bson.gz --output testdata/input/bignestedarray.bson.gz
        curl -s http://noexpire.s3.amazonaws.com/sqlproxy/data/bigobjarray.bson.gz --output testdata/input/bigobjarray.bson.gz

  "fetch source" :
    - command: git.get_project
      params:
        directory: src/github.com/10gen/sqlproxy
    - command: git.apply_patch
      type: test
      params:
        directory: src/github.com/10gen/sqlproxy

  "generate coverage html":
    command: shell.exec
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        echo "Building SQLProxy"
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        if [ '${library_path}' != '' ]; then
          export ${library_path}
        fi;
        # In RHEL 5.5, /usr/bin/ld can't handle --build-id parameters, so
        # use a wrapper if it's present on the system
        #
        if [ -d /opt/ldwrapper/bin ]
        then
          export PATH=/opt/ldwrapper/bin:$PATH
        fi;
        if [ '${using_go14}' != '' ]; then
          SQL_PROXY_PKG='github.com/10gen/sqlproxy'
          rm -rf .gopath/
          mkdir -p .gopath/src/github.com/10gen
          ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
          mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
          export GOPATH=`pwd`/vendor:`pwd`/.gopath
          echo "gopath is $GOPATH"
        else
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
          else
            export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
          fi;
        fi;
        if [ '${cover}' != '-' ]; then
          ${gorootvars} ${library_path} go tool cover ${build_tags} -html=coverage_rewrite.out -o coverage.html
        fi;

  "generate coverage txt":
    command: shell.exec
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        set -o verbose
        set -o errexit
        echo "Building SQLProxy"
        if [ "Windows_NT" = "$OS" ]; then
          set -o igncr
        fi;
        if [ '${library_path}' != '' ]; then
          export ${library_path}
        fi;
        # In RHEL 5.5, /usr/bin/ld can't handle --build-id parameters, so
        # use a wrapper if it's present on the system
        #
        if [ -d /opt/ldwrapper/bin ]
        then
          export PATH=/opt/ldwrapper/bin:$PATH
        fi;
        if [ '${using_go14}' != '' ]; then
          SQL_PROXY_PKG='github.com/10gen/sqlproxy'
          rm -rf .gopath/
          mkdir -p .gopath/src/github.com/10gen
          ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
          mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
          export GOPATH=`pwd`/vendor:`pwd`/.gopath
          echo "gopath is $GOPATH"
        else
          if [ "Windows_NT" = "$OS" ]; then
            export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
          else
            export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
          fi;
        fi;
        if [ '${cover}' != '-' ]; then
          ${gorootvars} ${library_path} go tool cover ${build_tags} -func=coverage_rewrite.out -o coverage.txt
        fi;

  "rewrite coverage report":
    command: shell.exec
    params:
      working_dir: src/github.com/10gen/sqlproxy
      script: |
        perl -pe 's/.*src/github.com\/10gen\/sqlproxy/' coverage.out > coverage_rewrite.out
        exit 0

  "start mongod":
    command: shell.exec
    params:
      working_dir: src/github.com/10gen/sqlproxy
      background: true
      script: |
        set -o verbose
        rm -rf ../dbFiles && mkdir -p ../dbFiles;
        echo "Starting mongod...";
        ./bin/mongod${extension} ${mongod_args} --dbpath ../dbFiles --setParameter=enableTestCommands=1
        echo "Waiting for mongod to start up..."
        ./bin/mongo${extension} --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:27017"); return true}catch(e){return false}}, "timed out connecting")' ${mongo_args}
        echo "Done!"

  "upload benchmark report":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/github.com/10gen/sqlproxy/benchmark.txt
      remote_file: sqlproxy/benchmarks/${build_variant}/${task_id}.txt
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: Benchmark Report (TXT)

  "upload coverage html report":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/github.com/10gen/sqlproxy/coverage.html
      remote_file: sqlproxy/coverage/${task_id}.html
      bucket: mciuploads
      permissions: public-read
      content_type: text/html
      display_name: Coverage Report (HTML)
      optional: true

  "upload coverage txt report":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/github.com/10gen/sqlproxy/coverage.txt
      remote_file: sqlproxy/coverage/${task_id}.txt
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: Coverage Report (TXT)
      optional: true

  "upload release":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/github.com/10gen/sqlproxy/release.${archive_format|tgz}
      remote_file: sqlproxy/binaries/${push_path}/mongodb-bi-${push_name}-${push_arch}-${version}.${archive_format|tgz}
      bucket: mciuploads
      permissions: public-read
      content_type: application/octet-stream
      display_name: mongodb-bi-${push_name}-${push_arch}-${version}.${archive_format|tgz}

tasks:
- name: benchmark
  tags: ["benchmark"]
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          ${gorootvars} ${library_path} ${gotest_env} go run testdata/benchmark.go -out benchmark_test.go
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} -run benchmark_test.go ${build_tags} -bench=. -benchmem -benchtime=5s -v -timeout 4h > benchmark.txt 2>&1; if [ $? -ne 0 ]; then cat benchmark.txt; exit 1; else cat benchmark.txt; exit 0; fi
    - func: "upload benchmark report"

- name: blackbox
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          mkfifo test_pipe
          tee -a blackbox.suite < test_pipe&
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go run testdata/blackbox.go -out blackbox_test.go
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -run TestBlackBox -parallel 10 -timeout 4h -v ${cover|-coverprofile=coverage.out} > test_pipe;
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: blackbox-nopushdown
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          mkfifo test_pipe
          tee -a blackbox-nopushdown.suite < test_pipe&
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go run testdata/blackbox.go ${build_tags} -out blackbox_test.go
          ${gorootvars} ${library_path} ${gotest_env} SQLPROXY_PUSHDOWN_OFF=0 go test ${test_args} ${build_tags} -run TestBlackBox -parallel 10 -timeout 4h -v ${cover|-coverprofile=coverage.out} > test_pipe
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: check
  tags: ["check"]
  commands:
    - func: "fetch source"
    - func: "check formatting"

- name: collation
  commands:
    - func: "fetch source"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          cd collation
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v ${cover|-coverprofile=coverage.out} > collation.suite 2>&1; if [ $? -ne 0 ]; then cat collation.suite; exit 1; else cat collation.suite; exit 0; fi
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          mv collation/coverage.out .
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: dist
  commands:
    - func: "fetch source"
    - func: "build SQLProxy"
    - func: "build MongoDRDL"
    - func: "create release"
    - command: expansions.update
      params:
        file: src/github.com/10gen/sqlproxy/version.yml
    - func: "upload release"

- name: evaluator
  commands:
    - func: "fetch source"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          cd evaluator
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v ${cover|-coverprofile=coverage.out} > evaluator.suite 2>&1; if [ $? -ne 0 ]; then cat evaluator.suite; exit 1; else cat evaluator.suite; exit 0; fi
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          mv evaluator/coverage.out .
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: mongodb
  commands:
    - func: "fetch source"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          cd mongodb
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v ${cover|-coverprofile=coverage.out} > mongodb.suite 2>&1; if [ $? -ne 0 ]; then cat mongodb.suite; exit 1; else cat mongodb.suite; exit 0; fi
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          mv mongodb/coverage.out .
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: mongodrdl
  commands:
    - func: "fetch source"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          cd mongodrdl
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v > mongodrdl.suite 2>&1; if [ $? -ne 0 ]; then cat mongodrdl.suite; exit 1; else cat mongodrdl.suite; fi
          cd mongo
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v > mongo.suite 2>&1; if [ $? -ne 0 ]; then cat mongo.suite; exit 1; else cat mongo.suite; fi
          cd ../relational
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v > relational.suite 2>&1; if [ $? -ne 0 ]; then cat relational.suite; exit 1; else cat relational.suite; fi
          exit 0

- name: parser
  commands:
    - func: "fetch source"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          cd parser
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v > parser.suite 2>&1; if [ $? -ne 0 ]; then cat parser.suite; exit 1; else cat parser.suite; exit 0; fi

- name: sqlproxy
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -timeout 4h -v ${cover|-coverprofile=coverage.out} > sqlproxy.suite 2>&1; if [ $? -ne 0 ]; then cat sqlproxy.suite; exit 1; else cat sqlproxy.suite; exit 0; fi
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: sqlproxy-nopushdown
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} SQLPROXY_PUSHDOWN_OFF=0 go test ${test_args} ${build_tags} -timeout 4h -v ${cover|-coverprofile=coverage.out} > sqlproxy-nopushdown.suite 2>&1; if [ $? -ne 0 ]; then cat sqlproxy-nopushdown.suite; exit 1; else cat sqlproxy-nopushdown.suite; exit 0; fi
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: tableau
  commands:
    - func: "fetch source"
    - func: "download test data"
    - func: "download mongod"
    - func: "start mongod"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -tableau -run TestTableauDemo -timeout 4h -v ${cover|-coverprofile=coverage.out} > tableau.suite 2>&1; if [ $? -ne 0 ]; then cat tableau.suite; exit 1; else cat tableau.suite; exit 0; fi
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"

- name: variable
  commands:
    - func: "fetch source"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          set -o errexit
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;
          if [ '${library_path}' != '' ]; then
            export ${library_path}
          fi;
          if [ '${using_go14}' != '' ]; then
            SQL_PROXY_PKG='github.com/10gen/sqlproxy'
            rm -rf .gopath/
            mkdir -p .gopath/src/github.com/10gen
            ln -sf `pwd` .gopath/src/$SQL_PROXY_PKG
            mkdir tmp && mv vendor/* tmp && mkdir vendor/src && mv tmp/* vendor/src
            export GOPATH=`pwd`/vendor:`pwd`/.gopath
          else
            if [ "Windows_NT" = "$OS" ]; then
              export GOPATH=$(cygpath -w $(dirname $(dirname $(dirname $(dirname `pwd`)))))
            else
              export GOPATH=$(dirname $(dirname $(dirname $(dirname `pwd`))))
            fi;
          fi;
          cd variable
          touch coverage.out
          ${gorootvars} ${library_path} ${gotest_env} go test ${test_args} ${build_tags} -v ${cover|-coverprofile=coverage.out} > variable.suite 2>&1; if [ $? -ne 0 ]; then cat variable.suite; exit 1; else cat variable.suite; exit 0; fi
    - command: shell.exec
      params:
        working_dir: src/github.com/10gen/sqlproxy
        script: |
          set -o verbose
          mv variable/coverage.out .
    - func: "rewrite coverage report"
    - func: "generate coverage html"
    - func: "generate coverage txt"
    - func: "upload coverage html report"
    - func: "upload coverage txt report"
