#
# Data
#
data:
- inline: 
    db: "test"
    collection: "where_1"
    docs:
    - { _id: 0, a: 1 }
    - { _id: 1, a: 2 }
    - { _id: 2, a: 3 }
- inline: 
    db: "test"
    collection: "where_2"
    docs:
    - { _id: 0, a: 2 }
    - { _id: 1, a: 2 }
    - { _id: 2, a: 3 }
- inline:
    db: "test"
    collection: "where_3"
    docs:
    - { _id: {"$oid" : "53c2ab5e4291b17b666d742a"}, item: 5 }
- inline:
    db: "test"
    collection: "where_4"
    docs:
    - { _id: 0, a: 1, b: ~ }
    - { _id: 1, a: 2, b: 4 }
    - { _id: 2, a: 3, b: 2 }
    - { _id: 3, a: 1, b: 5 }

#
# Schema
#
schema:
- db: test
  tables:
  - table: foo
    collection: "where_1"
    columns:
    - Name: _id
      MongoType: int
      SqlName: id
      SqlType: int
    - Name: a
      MongoType: int
      SqlName: a
      SqlType: int
  - table: bar
    collection: "where_2"
    columns:
    - Name: _id
      MongoType: int
      SqlName: id
      SqlType: int
    - Name: a
      MongoType: int
      SqlName: a
      SqlType: int
  - table: test2
    collection: "where_3"
    columns:
    - Name: _id
      MongoType: bson.ObjectId
      SqlName: _id
      SqlType: varchar
    - Name: item
      MongoType: int
      SqlName: item
      SqlType: int
  - table: baz
    collection: "where_4"
    columns:
    - Name: _id
      MongoType: int
      SqlName: _id
      SqlType: int
    - Name: a
      MongoType: int
      SqlName: a
      SqlType: int
    - Name: b
      MongoType: int
      SqlName: b
      SqlType: int

#
# Tests
#
testcases:

# Between
- sql: "select a from test.foo where id between 1 and 4"
  description: "between distinct values"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select a from test.foo where id between 1 and 1"
  description: "between the same value"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
- sql: "select a from test.foo where id between 4 and 1"
  description: "between reversed values"
  expected_names: ["a"]
  expected_types: [int]
  expected: []
- sql: "select a from test.foo where id between 1 and 2 or id between 2 and 4"
  description: "multiple betweens"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select a from test.foo where id not between 1 and 4"
  description: "not between distinct values"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]

# Case
- sql: "select a from foo where (case when a > 1 then true else false end)"
  description: "case"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select a from foo where (case when a > 1 then true end)"
  description: "case without else"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select a from foo where (case a when 1 then false else true end)"
  description: "simple case"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]

# Exists
- sql: "select a from foo f1 where exists(select 1 from foo f2 where f1.a > f2.a)"
  description: "exists"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select f1.id from foo f1 inner join bar b1 on f1.id = b1.id where exists(select 1 from foo f2 where exists(select 1 from bar b2 where f1.a = b2.a))"
  description: "exists with joined table and nested exists"
  expected_names: ["id"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]

# Greater Than
- sql: "select a from test.foo where id > 0"
  description: "greater than"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select a from test.foo where 2 > id"
  description: "greater than (reversed)"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]

# Greater Than Or Equal
- sql: "select a from test.foo where id >= 0"
  description: "greater than or equal"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]
  - [3]
- sql: "select a from test.foo where 2 >= id"
  description: "greater than or equal (reversed)"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]
  - [3]

# In
- sql: "select id from test.foo where id in (0, 2)"
  description: "in tuple"
  expected_names: ["id"]
  expected_types: [int]
  expected: 
  - [0]
  - [2]
- sql: "select id from test.foo where id in (select a from foo)"
  description: "in non-correlated subquery"
  expected_names: ["id"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]

# Less Than
- sql: "select a from test.foo where id < 2"
  description: "less than"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]
- sql: "select a from test.foo where 1 < id"
  description: "less than (reversed)"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [3]

# Less Than Or Equal
- sql: "select a from test.foo where id <= 2"
  description: "less than or equal"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]
  - [3]
- sql: "select a from test.foo where 0 <= id"
  description: "less than or equal (reversed)"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
  - [2]
  - [3]

# Subquery
- sql: "select id from test.foo where a = (select min(a) from test.bar)"
  description: "non-correlated subquery"
  expected_names: ["id"]
  expected_types: [int]
  expected: 
  - [1]
- sql: "select a from test.foo where (id, a) = (select id, a from test.bar where foo.id = bar.id AND foo.a = bar.a)"
  description: "correlated subquery"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
  - [3]
- sql: "select id from test.foo where 4 not in (select a from test.bar)"
  description: "not in subquery"
  expected_names: ["id"]
  expected_types: [string]
  expected:
  - [0]
  - [1]
  - [2]
- sql: "SELECT * FROM baz WHERE b <> ANY (SELECT _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [2, 3, 2]
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE a <> SOME (SELECT a FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [0, 1, ~]
  - [1, 2, 4]
  - [2, 3, 2]
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE b <> ALL (SELECT a FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE b < ALL (SELECT a FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected: []
- sql: "SELECT * FROM baz WHERE b + _id = ANY (SELECT a + b FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
- sql: "SELECT * FROM baz WHERE b - _id < SOME (SELECT a - _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [2, 3, 2]
- sql: "SELECT * FROM baz WHERE b IN (SELECT a FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [2, 3, 2]
- sql: "SELECT * FROM baz WHERE b IN (SELECT 4 - _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [2, 3, 2]
- sql: "SELECT * FROM baz WHERE b NOT IN (SELECT 4 - _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE b - _id > SOME (SELECT _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE _id > ANY (SELECT a FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [2, 3, 2]
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE b IN (SELECT b FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [2, 3, 2]
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE a NOT IN (SELECT a FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected: []
- sql: "SELECT * FROM baz WHERE _id > ANY (SELECT b FROM baz WHERE _id <> ANY (SELECT b FROM baz))"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [3, 1, 5]
- sql: "SELECT * FROM baz WHERE _id = ANY (SELECT b FROM baz WHERE _id < ANY (SELECT b FROM baz WHERE a IN (SELECT a from baz)))"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [2, 3, 2]
- sql: "SELECT * FROM baz WHERE b < ANY (SELECT b + a - _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [2, 3, 2]
- sql: "SELECT * FROM baz WHERE b > ANY (SELECT b + a - _id FROM baz)"
  expected_names: ["_id", "a", "b"]
  expected_types: [int, int, int]
  expected:
  - [1, 2, 4]
  - [3, 1, 5]

# Tuples
- sql: "select id from test.foo where (id, a) = (0, 1)"
  description: "tuple equal"
  expected_names: ["id"]
  expected_types: [int]
  expected: 
  - [0]
- sql: "select id from test.foo where (a) < 2"
  description: "tuple greater than"
  expected_names: ["id"]
  expected_types: [int]
  expected: 
  - [0]

# Unary Operators
- sql: "select a from test.foo where id = ~-1"
  description: "unary tilde"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [1]
- sql: "select a from test.foo where id = ~-1 + 1"
  description: "unary tilde in an expression"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
- sql: "select a from test.foo where id = +1"
  description: "unary plus"
  expected_names: ["a"]
  expected_types: [int]
  expected: 
  - [2]
- sql: "select a from test.foo where id = -(1)"
  description: "unary minus"
  expected_names: ["a"]
  expected_types: [int]
  expected: []

# Like Operator Tests
- sql: "SELECT _id from test2 where _id LIKE '53c2ab5e4291b17b666d742a'"
  description: "matching test on ObjectId with full match"
  expected_names: ["_id"]
  expected_types: [string]
  expected:
  - [53c2ab5e4291b17b666d742a]
- sql: "SELECT _id from test2 where _id LIKE '53c2ab5%'"
  description: "matching test on ObjectId with partial match"
  expected_names: ["_id"]
  expected_types: [string]
  expected:
  - [53c2ab5e4291b17b666d742a]
- sql: "SELECT _id from test2 where _id LIKE '667570e9%'"
  description: "matching test on ObjectId with no match"
  expected_names: ["_id"]
  expected_types: [string]
  expected: []
