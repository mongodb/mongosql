#
# Data
#
data:
- inline:
    db: "SelectTest"
    collection: "select_1"
    docs:
    - { _id: 0, a: 1, b: ~ }
    - { _id: 1, a: 2 }
    - { _id: 2, a: 3 }
- inline:
    db: "SelectTest"
    collection: "select_4"
    docs:
    - { _id: 1, x: 4, y: 1, z: 0 }
    - { _id: 2, x: 7, y: 1, z: 5 }
    - { _id: 3, x: 5, y: 1, z: 5 }
    - { _id: 4, x: 7, y: 6, z: 1 }
    - { _id: 5, x: 4, y: 1, z: 5 }
- inline:
    db: "randomDB"
    collection: "select_3"
    docs:
    - { a: 2 , b: 3}

# TODO(wisdom): holding off testing here until the
# tools support importing NumberDecimal (TOOLS-1328)
#
# - inline:
#     db: "test"
#     collection: "select_2"
#     docs:
#     - { _id: 0, a: {$numberDecimal: "4.23923983489893498238923982389"} }
#     - { _id: 1, a: {$numberDecimal: "5.82389287238739829873982389233"} }
#     - { _id: 2, a: {$numberDecimal: "8.21193948757647389238923892389"} }

#
# Schema
#
schema:
- db: SelectTest
  tables:
  - table: fOo
    collection: "select_1"
    columns:
    - Name: _id
      MongoType: int
      SqlName: id
      SqlType: int
    - Name: a
      MongoType: int
      SqlName: a
      SqlType: int
    - Name: b
      MongoType: int
      SqlName: b
      SqlType: int
  - table: BAr
    collection: "select_2"
    columns:
    - Name: _id
      MongoType: int
      SqlName: id
      SqlType: int
    - Name: a
      MongoType: bson.Decimal128
      SqlName: a
      SqlType: numeric
  - table: tuples
    collection: "select_4"
    columns:
    - Name: _id
      MongoType: int
      SqlName: id
      SqlType: int
    - Name: x
      MongoType: int
      SqlName: x
      SqlType: int
    - Name: y
      MongoType: int
      SqlName: y
      SqlType: int
    - Name: z
      MongoType: int
      SqlName: z
      SqlType: int
    - Name: mfil
      MongoType: mongo.Filter
      SqlName: mfil
      SqlType: varchar

- db: randomDB
  tables:
  - table: foo
    collection: "select_3"
    columns:
    - Name: a
      MongoType: int
      SqlName: ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat
      SqlType: int
    - Name: b
      MongoType: int
      SqlName: ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculously.LONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat
      SqlType: int

#
# Tests
#
testcases:
- sql: "select * from SelectTest.foo"
  description: "global *"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select foo.* from SELEctTest.Foo"
  description: "qualified *"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select foo.*, foo.* from selectTest.FOO"
  description: "duplicate qualified *"
  expected_names: ["id", "a", "b", "id", "a", "b"]
  expected_types: [int, int, int, int, int, int]
  expected: 
  - [0, 1, ~, 0, 1, ~]
  - [1, 2, ~, 1, 2, ~]
  - [2, 3, ~, 2, 3, ~]
- sql: "select f.* from selecttest.fOo f"
  description: "alias qualified *"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a, b from selecttEst.foo"
  description: "columns"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select ID, A, B from selecttest.FOO"
  description: "columns with wrong casing"
  expected_names: ["ID", "A", "B"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select foo.id, foo.a, foo.b from sElecttest.foo"
  description: "qualified columns"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select f.id, f.a, f.b from selecttest.foo f"
  description: "alias qualified columns"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a, b, id, a, b from SELECTTESt.foo"
  description: "duplicate columns"
  expected_names: ["id", "a", "b", "id", "a", "b"]
  expected_types: [int, int, int, int, int, int]
  expected: 
  - [0, 1, ~, 0, 1, ~]
  - [1, 2, ~, 1, 2, ~]
  - [2, 3, ~, 2, 3, ~]
- sql: "select id as d, a as e, b as f from selECTtest.foo"
  description: "aliases"
  expected_names: ["d", "e", "f"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id as a, a as b, b as id from selECTtest.Foo"
  description: "aliased as another column"
  expected_names: ["a", "b", "id"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a as id, b as id from selECTtest.foO"
  description: "duplicate aliases"
  expected_names: ["id", "id", "id"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a as ID from selECTtest.foo"
  description: "aliases differing by case"
  expected_names: ["id", "ID"]
  expected_types: [int, int]
  expected: 
  - [0, 1]
  - [1, 2]
  - [2, 3]
- sql: "select id, b from selECTtest.foo"
  description: "subset of columns"
  expected_names: ["id", "b"]
  expected_types: [int, int]
  expected: 
  - [0, ~]
  - [1, ~]
  - [2, ~]
- sql: "select b, id from selECTtest.foo"
  description: "subset of columns out of order"
  expected_names: ["b", "id"]
  expected_types: [int, int]
  expected: 
  - [~, 0]
  - [~, 1]
  - [~, 2]

### Expressions

# Case
- sql: "select (case when a > 1 then 'gt' else 'lt' end) as p from foo"
  description: "case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ["lt"]
  - ["gt"]
  - ["gt"]
- sql: "select (case when a > 1 then 'gt' end) as p from foo"
  description: "case without else"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - [~]
  - ["gt"]
  - ["gt"]
- sql: "select (case when b is null then 'n' else 'not null' end) as p from foo"
  description: "case without else"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ["n"]
  - ["n"]
  - ["n"]
- sql: "select (case a when 1 then 'one' else 'not one' end) as p from foo"
  description: "simple case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ['one']
  - ["not one"]
  - ["not one"]
- sql: "select (case a when 1 then 'one' end) as p from foo"
  description: "simple case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ['one']
  - [~]
  - [~]
- sql: "select (case when a > (case when b is null then 1 else 2 end) then 'gt' else 'lt' end) as p from foo"
  description: "case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ["lt"]
  - ["gt"]
  - ["gt"]
- sql: "select (case when (case when a > 1 then 'one' else 'smaller' end) = 'one' then '1' else 'less' end) as p from foo"
  description: "case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ["less"]
  - ["1"]
  - ["1"]
- sql: "select (case when (case when (case when a > 1 then 'one' else 'smaller' end) = 'one' then '1' else 'less' end) = '1' then 1 end) as p from foo"
  description: "case"
  expected_names: ["p"]
  expected_types: [int]
  expected: 
  - [~]
  - [1]
  - [1]

# Exists
- sql: "select a, exists(select 1 from selECTtest.foo) as p from foo"
  description: "non-correlated exists"
  expected_names: ["a", "p"]
  expected_types: [int, int]
  expected: 
  - [1, 1]
  - [2, 1]
  - [3, 1]
- sql: "select exists(select 1 from selECTtest.foo) as p from foo"
  description: "non-correlated exists"
  expected_names: ["p"]
  expected_types: [int]
  expected: 
  - [1]
  - [1]
  - [1]

# Subqueries
- sql: "select a, (select a from foo limit 1) as b from foo"
  description: "non-correlated subquery"
  expected_names: ["a", "b"]
  expected_types: [int, int]
  expected: 
  - [1, 1]
  - [2, 1]
  - [3, 1]

- sql: "select a, (select a from foo where f.id = id - 1) as b from foo f"
  description: "correlated subquery"
  expected_names: ["a", "b"]
  expected_types: [int, int]
  expected: 
  - [1, 2]
  - [2, 3]
  - [3, ~]

# LIKE
- sql: "select 'HI' like 'HI'"
  description: "query with one matching string"
  expected_names: ["'HI' like 'HI'"]
  expected_types: [int]
  expected:
  - [1]
- sql: "select 'HI' like 'PO'"
  description: "query with no matching string"
  expected_names: ["'HI' like 'PO'"]
  expected_types: [int]
  expected:
  - [0]
- sql: "select (select 2>1) like 1"
  description: "boolean test nested select with matching results"
  expected_names: ["(select 2 > 1) like 1"]
  expected_types: [int]
  expected:
  - [1]
- sql: "select (select 2<1) LIKE (select 4<1)"
  description: "matching test on node with two select statements"
  expected_names: ["(select 2 < 1) like (select 4 < 1)"]
  expected_types: [int]
  expected:
  - [1]
- sql: "select (2>1) like 1"
  description: "query with no matching string lll"
  expected_names: ["(2 > 1) like 1"]
  expected_types: [int]
  expected:
  - [1]

# Long Identifer Names
- sql: "select ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat from randomDB.foo"
  description: "long identifier names"
  expected_names: ["ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat"]
  expected_types: [int]
  expected:
  - [2]
- sql: "select `ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculously.LONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat` from randomDB.foo"
  description: "long identifier name with dot"
  expected_names: ["ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculously.LONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat"]
  expected_types: [int]
  expected:
  - [3]
- sql: "select ridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeatridiculouslyLONGidentifierNameOnRepeat r from randomDB.foo"
  description: "long identifier name with alias"
  expected_names: ["r"]
  expected_types: [int]
  expected:
  - [2]

# Row comparisons
- sql: "select (x, y, z) < (4, null, 9) from tuples"
  description: "lt row comparison with null"
  expected_names: ["(x, y, z) < (4, null, 9)"]
  expected_types: [int]
  expected:
  - [~]
  - [0]
  - [0]
  - [0]
  - [~]
- sql: "select (x, y, z) <= (4, 5, null) from tuples"
  description: "triple lte row comparison with null"
  expected_names: ["(x, y, z) <= (4, 5, null)"]
  expected_types: [int]
  expected:
  - [1]
  - [0]
  - [0]
  - [0]
  - [1]
- sql: "select (z, x) >= (2, 6) from tuples"
  description: "gte row comparison without null"
  expected_names: ["(z, x) >= (2, 6)"]
  expected_types: [int]
  expected:
  - [0]
  - [1]
  - [1]
  - [0]
  - [1]
- sql: "select (x, y) >= (4, null) from tuples"
  description: "gte row comparison with null"
  expected_names: ["(x, y) >= (4, null)"]
  expected_types: [int]
  expected:
  - [~]
  - [1]
  - [1]
  - [1]
  - [~]
- sql: "select (z, y, x) > (1, 5, 2) from tuples"
  description: "triple gt row comparison without null"
  expected_names: ["(z, y, x) > (1, 5, 2)"]
  expected_types: [int]
  expected:
  - [0]
  - [1]
  - [1]
  - [1]
  - [1]
- sql: "select (z, null, x) > (1, x, 2) from tuples"
  description: "triple gt row comparison with null"
  expected_names: ["(z, null, x) > (1, x, 2)"]
  expected_types: [int]
  expected:
  - [0]
  - [1]
  - [1]
  - [~]
  - [1]
- sql: "select (x, y, z) = (null, null, 9) from tuples"
  description: "triple eq row comparison with null"
  expected_names: ["(x, y, z) = (null, null, 9)"]
  expected_types: [int]
  expected:
  - [0]
  - [0]
  - [0]
  - [0]
  - [0]
- sql: "select (y, x) = (1, 4) from tuples"
  description: "eq row comparison without null"
  expected_names: ["(y, x) = (1, 4)"]
  expected_types: [int]
  expected:
  - [1]
  - [0]
  - [0]
  - [0]
  - [1]
- sql: "select (y, x) = (1, null) from tuples"
  description: "eq row comparison with null"
  expected_names: ["(y, x) = (1, null)"]
  expected_types: [int]
  expected:
  - [~]
  - [~]
  - [~]
  - [0]
  - [~]
- sql: "select (y, x-z) != (1, 2) from tuples"
  description: "neq row comparison without null"
  expected_names: ["(y, x-z) != (1, 2)"]
  expected_types: [int]
  expected:
  - [1]
  - [0]
  - [1]
  - [1]
  - [1]
- sql: "select (y+z, x-z) != (null, 4) from tuples"
  description: "neq row comparison with null"
  expected_names: ["(y+z, x-z) != (null, 4)"]
  expected_types: [int]
  expected:
  - [~]
  - [1]
  - [1]
  - [1]
  - [1]

# Mongo filter
- sql: "select y, z from tuples where mfil='{\"x\": {\"$lte\": 4}}'"
  pushdown_only: true
  description: "lone custom filter predicate expression"
  expected_names: ["y", "z"]
  expected_types: [int, int]
  expected:
  - [1, 0]
  - [1, 5]
- sql: "select y, z from tuples where y = 6 or mfil='{\"x\": {\"$lte\": 4}}'"
  pushdown_only: true
  description: "custom filter with other expressions"
  expected_names: ["y", "z"]
  expected_types: [int, int]
  expected:
  - [1, 0]
  - [6, 1]
  - [1, 5]
- sql: "select y, z from tuples where (z < 5 and mfil='{\"_id\": {\"$gte\": 5}}') or id = 3"
  pushdown_only: true
  description: "custom filter with conjunction"
  expected_names: ["y", "z"]
  expected_types: [int, int]
  expected:
  - [1, 5]
- sql: "select y, z from tuples where (x > 4 or mfil='{\"_id\": {\"$gt\": 2}}') or id = 3"
  pushdown_only: true
  description: "custom filter with disjunction"
  expected_names: ["y", "z"]
  expected_types: [int, int]
  expected:
  - [1, 5]
  - [1, 5]
  - [6, 1]
  - [1, 5]

# Overflow
- sql: "select 9223372036854775807+9223372036854775807 as result"
  description: "adding max int64"
  expected_names: ["result"]
  expected_types: [varchar]
  expected:
  - [18446744073709551614]
- sql: "select 92233720368523893498439823.34232323234775807+9872389723987625167312876431927865238746234.23483287346723476 as result"
  description: "adding large floats"
  expected_names: ["result"]
  expected_types: [varchar]
  expected:
  - [9872389723987625259546596800451758737186057.57715610581499283]
- sql: "select -34985845873478238954892398348547834.344807-438349834894832892323238723897239876251673128483287346723476 as result"
  description: "subtracting large floats"
  expected_names: ["result"]
  expected_types: [varchar]
  expected:
  - [-438349834894832892323238758883085749729912083375685695271310.344807]
- sql: "select 547834763423238523893498439823.775807/0.12320640660032000000023 as result"
  description: "dividing large numbers"
  expected_names: ["result"]
  expected_types: [varchar]
  expected:
  - [4446479517906949900823952165864.0236962298842292431383320330464241]
- sql: "select 9223372036854775807*9223372036854775807 as result"
  description: "multiplying large numbers"
  expected_names: ["result"]
  expected_types: [varchar]
  expected:
  - [85070591730234615847396907784232501249]
