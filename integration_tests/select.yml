#
# Data
#
data:
- inline: 
    db: "test"
    collection: "select"
    docs:
    - { _id: 0, a: 1, b: ~ }
    - { _id: 1, a: 2 }
    - { _id: 2, a: 3 }

#
# Schema
#
schema:
- db: test
  tables:
  - table: foo
    collection: "select"
    columns:
    - Name: _id
      MongoType: int
      SqlName: id
      SqlType: int
    - Name: a
      MongoType: int
      SqlName: a
      SqlType: int
    - Name: b
      MongoType: int
      SqlName: b
      SqlType: int

#
# Tests
#
testcases:
- sql: "select * from test.foo"
  description: "global *"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select foo.* from test.foo"
  description: "qualified *"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select foo.*, foo.* from test.foo"
  description: "duplicate qualified *"
  expected_names: ["id", "a", "b", "id", "a", "b"]
  expected_types: [int, int, int, int, int, int]
  expected: 
  - [0, 1, ~, 0, 1, ~]
  - [1, 2, ~, 1, 2, ~]
  - [2, 3, ~, 2, 3, ~]
- sql: "select f.* from test.foo f"
  description: "alias qualified *"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a, b from test.foo"
  description: "columns"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select ID, A, B from test.foo"
  description: "columns with wrong casing"
  expected_names: ["ID", "A", "B"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select foo.id, foo.a, foo.b from test.foo"
  description: "qualified columns"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select f.id, f.a, f.b from test.foo f"
  description: "alias qualified columns"
  expected_names: ["id", "a", "b"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a, b, id, a, b from test.foo"
  description: "duplicate columns"
  expected_names: ["id", "a", "b", "id", "a", "b"]
  expected_types: [int, int, int, int, int, int]
  expected: 
  - [0, 1, ~, 0, 1, ~]
  - [1, 2, ~, 1, 2, ~]
  - [2, 3, ~, 2, 3, ~]
- sql: "select id as d, a as e, b as f from test.foo"
  description: "aliases"
  expected_names: ["d", "e", "f"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id as a, a as b, b as id from test.foo"
  description: "aliased as another column"
  expected_names: ["a", "b", "id"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a as id, b as id from test.foo"
  description: "duplicate aliases"
  expected_names: ["id", "id", "id"]
  expected_types: [int, int, int]
  expected: 
  - [0, 1, ~]
  - [1, 2, ~]
  - [2, 3, ~]
- sql: "select id, a as ID from test.foo"
  description: "aliases differing by case"
  expected_names: ["id", "ID"]
  expected_types: [int, int]
  expected: 
  - [0, 1]
  - [1, 2]
  - [2, 3]
- sql: "select id, b from test.foo"
  description: "subset of columns"
  expected_names: ["id", "b"]
  expected_types: [int, int]
  expected: 
  - [0, ~]
  - [1, ~]
  - [2, ~]
- sql: "select b, id from test.foo"
  description: "subset of columns out of order"
  expected_names: ["b", "id"]
  expected_types: [int, int]
  expected: 
  - [~, 0]
  - [~, 1]
  - [~, 2]

# Expressions
# Case
- sql: "select (case when a > 1 then 'gt' else 'lt' end) as p from foo"
  description: "case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ["lt"]
  - ["gt"]
  - ["gt"]
- sql: "select (case when a > 1 then 'gt' end) as p from foo"
  description: "case without else"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - [~]
  - ["gt"]
  - ["gt"]
- sql: "select (case a when 1 then 'one' else 'not one' end) as p from foo"
  description: "simple case"
  expected_names: ["p"]
  expected_types: [string]
  expected: 
  - ['one']
  - ["not one"]
  - ["not one"]

# Exists
- sql: "select a, exists(select 1 from test.foo) as p from foo"
  description: "non-correlated exists"
  expected_names: ["a", "p"]
  expected_types: [int, int]
  expected: 
  - [1, 1]
  - [2, 1]
  - [3, 1]
- sql: "select exists(select 1 from test.foo) as p from foo"
  description: "non-correlated exists"
  expected_names: ["p"]
  expected_types: [int]
  expected: 
  - [1]
  - [1]
  - [1]

# Subqueries
- sql: "select a, (select a from foo limit 1) as b from foo"
  description: "non-correlated subquery"
  expected_names: ["a", "b"]
  expected_types: [int, int]
  expected: 
  - [1, 1]
  - [2, 1]
  - [3, 1]

- sql: "select a, (select a from foo where f.id = id - 1) as b from foo f"
  description: "correlated subquery"
  expected_names: ["a", "b"]
  expected_types: [int, int]
  expected: 
  - [1, 2]
  - [2, 3]
  - [3, ~]

# LIKE
- sql: "select 'HI' like 'HI'"
  description: "query with one matching string"
  expected_names: ["'HI' like 'HI'"]
  expected_types: [int]
  expected:
  - [1]
- sql: "select 'HI' like 'PO'"
  description: "query with no matching string"
  expected_names: ["'HI' like 'PO'"]
  expected_types: [int]
  expected:
  - [0]
- sql: "select (select 2>1) like 1"
  description: "boolean test nested select with matching results"
  expected_names: ["(select 2 > 1) like 1"]
  expected_types: [int]
  expected:
  - [1]
- sql: "select (select 2<1) LIKE (select 4<1)"
  description: "matching test on node with two select statements"
  expected_names: ["(select 2 < 1) like (select 4 < 1)"]
  expected_types: [int]
  expected:
  - [1]
# Test case commented as select (2>1) throws parsing error
#- sql: "select (2>1) like 1"
#  description: "query with no matching string lll"
#  expected_names: ["select (2>1) like 1"]
#  expected_types: [int]
#  expected:
#  - [1]           
