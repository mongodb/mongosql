use crate::{ast::*, parser::util::*};
use lalrpop_util::ParseError;
use std::str::FromStr;

grammar;

extern {
    type Error = String;
}

pub Query: Query = {
  WithQuery => <>,
  SimpleQuery => <>
};

SimpleQuery: Query = {
  SetQuery => Query::Set(<>),
  SelectQuery => Query::Select(<>),
}

WithQuery: Query = {
  WITH <t:CommaPlus<NamedQuery>> LEFT_PAREN <q:SimpleQuery> RIGHT_PAREN => Query::With(WithQuery {
    queries: t,
    body: Box::new(q),
  })
}

NamedQuery: NamedQuery = {
  <i:Identifier> AS LEFT_PAREN <q:SimpleQuery> RIGHT_PAREN => NamedQuery {
    name: i,
    query: q,
  }
}

SetQuery: SetQuery = {
  <q:SimpleQuery> <o:SetOperator> <s:SelectQuery>  => SetQuery{left:Box::new(q), op:o, right:Box::new(Query::Select(s))},
}

SelectQuery: SelectQuery = {
    <s:SelectClause>
    <f:FromClause?>
    <w:WhereClause?>
    <g:GroupByClause?>
    <h:HavingClause?>
    <o:OrderByClause?>
    <lo:LimitOffset?> =>
        SelectQuery{
            select_clause: s,
            from_clause: f,
            where_clause: w,
            group_by_clause:g,
            having_clause:h,
            order_by_clause: o,
            limit: lo.unwrap_or((None,None)).0,
            offset: lo.unwrap_or((None,None)).1
        }
};

SelectClause: SelectClause = {
  SELECT <q:SetQuantifier?> <b:SelectBody> => SelectClause{set_quantifier:q.unwrap_or(SetQuantifier::All), body:b},
}

FromClause: Datasource = {
    FROM <Datasource>,
}

SimpleDatasource: Datasource = {
    <ae: OptionallyAliasedExpr> =>? parse_simple_datasource(ae)
}

NonJoinDatasource: Datasource = {
    <SimpleDatasource>,
    <FlattenDatasource>,
    <UnwindDatasource>
}

JoinDatasource: Datasource = {
    <d:Datasource> COMMA <njd:NonJoinDatasource> => {
        Datasource::Join(
            JoinSource {
                join_type: JoinType::Cross,
                left: Box::new(d),
                right: Box::new(njd),
                condition: None,
            }
        )
    },
    <d:Datasource> <jt:JoinType> JOIN <njd:NonJoinDatasource> <c:(ON <Expression>)?> => {
        Datasource::Join(
            JoinSource {
                join_type: jt,
                left: Box::new(d),
                right: Box::new(njd),
                condition: c,
            }
        )
    },
}

FlattenDatasource: Datasource = {
  FLATTEN LEFT_PAREN <d:Datasource> <o:(WITH <CommaPlus<FlattenOption>>)?> RIGHT_PAREN => Datasource::Flatten(FlattenSource{datasource: Box::new(d), options: o.unwrap_or(vec![])})
}

FlattenOption: FlattenOption = {
  SEPARATOR ARROW <s:StringConstructor> => FlattenOption::Separator(s),
  DEPTH ARROW <d:Unsigned32> => FlattenOption::Depth(d)
}

UnwindDatasource: Datasource = {
  UNWIND LEFT_PAREN <d:Datasource> <o:(WITH <CommaPlus<UnwindOption>>)?> RIGHT_PAREN => Datasource::ExtendedUnwind(ExtendedUnwindSource{datasource: Box::new(d), options: o.unwrap_or(vec![])})
}

UnwindOption: ExtendedUnwindOption = {
  PATH ARROW <p:PeriodPlus<UnwindPathPart>> => ExtendedUnwindOption::Paths(vec![p]),
  PATH ARROW LEFT_PAREN <p:CommaPlus<PeriodPlus<UnwindPathPart>>> RIGHT_PAREN => ExtendedUnwindOption::Paths(p),
  INDEX ARROW <i:Identifier> => ExtendedUnwindOption::Index(i),
  OUTER ARROW <o:Boolean> => ExtendedUnwindOption::Outer(o)
}

// Only INDEX and OUTER are allowed on a PATH part. Putting a PATH in a PATH part
// would be confusing
UnwindPathPartOption: UnwindPathPartOption = {
  INDEX ARROW <i:Identifier> => UnwindPathPartOption::Index(i),
  OUTER ARROW <o:Boolean> => UnwindPathPartOption::Outer(o)
}

UnwindPathPart: UnwindPathPart = {
    <i:Identifier> => UnwindPathPart {
        field: i, 
        options: Vec::default(),
    },
    <i:Identifier> <o:BracketList<CommaStar<UnwindPathPartOption>>> => UnwindPathPart {
        field: i, 
        options: o,
    }
}

Datasource: Datasource = {
    <SimpleDatasource>,
    <JoinDatasource>,
    <FlattenDatasource>,
    <UnwindDatasource>
}

JoinType: JoinType = {
    LEFT OUTER? => JoinType::Left,
    RIGHT OUTER? => JoinType::Right,
    INNER => JoinType::Inner,
    CROSS? => JoinType::Cross,
}

WhereClause: Expression = {
  WHERE <Expression>,
}

GroupByClause: GroupByClause = {
  GROUP BY <k:CommaPlus<OptionallyAliasedExpr>>
           <a:(AGGREGATE <CommaPlus<AliasedExpr>>)?> =>
                 GroupByClause{keys:k, aggregations:a.unwrap_or(vec![])}
}

HavingClause: Expression = {
  HAVING <Expression>,
}

OrderByClause: OrderByClause = {
  ORDER BY <s:CommaPlus<SortSpec>> => OrderByClause{sort_specs:s},
}

SortSpec: SortSpec = {
  <k:SortKey> <d:SortDirection?> => SortSpec{key:k, direction:d.unwrap_or(SortDirection::Asc)},
}

SortKey: SortKey = {
  Tier14Expr =>? parse_sort_key(*<>),
}

SortDirection: SortDirection = {
  ASC => SortDirection::Asc,
  DESC => SortDirection::Desc,
}

LimitOffset: (Option<u32>, Option<u32>) = {
  <l:Limit> <o:Offset?> => (Some(l), o),
  <o:Offset> <l:Limit?> => (l, Some(o)),
  LIMIT <l:Unsigned32> COMMA <o:Unsigned32> => (Some(l), Some(o)),
};

Limit: u32 = {
  LIMIT <Unsigned32>,
  FETCH_FIRST <Unsigned32> ROWS_ONLY,
}

Offset: u32 = {
  OFFSET <Unsigned32>,
}

SetOperator: SetOperator = {
  UNION => SetOperator::Union,
  UNION ALL => SetOperator::UnionAll,
}

SetQuantifier: SetQuantifier = {
  ALL => SetQuantifier::All,
  DISTINCT => SetQuantifier::Distinct,
};

SelectBody: SelectBody = {
  CommaPlus<SelectExpression> => SelectBody::Standard(<>),
  VALUE <e:CommaPlus<SelectValuesExpression>> => SelectBody::Values(e),
};

SelectValuesExpression: SelectValuesExpression = {
  Expression => SelectValuesExpression::Expression(<>),
  SubstarExpr => SelectValuesExpression::Substar(<>),
}

SelectExpression: SelectExpression = {
  STAR => SelectExpression::Star,
  SubstarExpr => SelectExpression::Substar(<>),
  OptionallyAliasedExpr => SelectExpression::Expression(<>),
};

OptionallyAliasedExpr: OptionallyAliasedExpr = {
  <e:Expression> <a:(AS? <Identifier>)?> => {
        match a {
            Some(alias) => OptionallyAliasedExpr::Aliased(AliasedExpr{expr:e, alias}),
            None => OptionallyAliasedExpr::Unaliased(e),
        }
  }
}

AliasedExpr: AliasedExpr = {
  <e:Expression> <a:(AS? <Identifier>)> => AliasedExpr{expr:e, alias:a}
};

SubstarExpr: SubstarExpr = {
  <i:Identifier> DOT_STAR => SubstarExpr{datasource: i}
};

pub Expression: Expression = {
  Tier1Expr => *<>,
};

ArrayExpr: Vec<Expression> = {
  LEFT_BRACKET <CommaStar<Expression>> RIGHT_BRACKET,
};

CaseExpr: CaseExpr = {
  CASE <w:WhenBranch+> <e:ElseBranch?> END => CaseExpr{expr:None, when_branch:w, else_branch:e},
  CASE <expr:Expression> <w:WhenBranch+> <e:ElseBranch?> END => CaseExpr{expr:Some(Box::new(expr)), when_branch:w, else_branch:e},
}

WhenBranch: WhenBranch = {
  WHEN <e1:Expression> THEN <e2:Expression> => WhenBranch{when:Box::new(e1), then:Box::new(e2)},
}

ElseBranch: Box<Expression> = {
  ELSE <e:Expression> => Box::new(e),
}

SubqueryQuantifier: SubqueryQuantifier = {
  ANY => SubqueryQuantifier::Any,
  SOME => SubqueryQuantifier::Any,
  ALL => SubqueryQuantifier::All,
}

SubqueryExpr: Box<Query> = {
  LEFT_PAREN <s:SimpleQuery> RIGHT_PAREN => Box::new(s),
}

ExistsExpr: Expression = {
  EXISTS <s:SubqueryExpr> => Expression::Exists(s)
}

FunctionExpr: FunctionExpr = {
    <i:ID> LEFT_PAREN <q:SetQuantifier?> <e:CommaStar<Expression>> RIGHT_PAREN =>? {
        let function = FunctionName::try_from(i)?;
        Ok(FunctionExpr {
            function,
            args: FunctionArguments::Args(e),
            set_quantifier: q
        })
    },

    <i:ID> LEFT_PAREN <q:SetQuantifier?> STAR RIGHT_PAREN =>? {
        let function = FunctionName::try_from(i)?;
        Ok(FunctionExpr {
            function,
            args: FunctionArguments::Star,
            set_quantifier: q,
        })
    },

    // Special-syntax scalar functions.
    CurrentTimestamp,
    Position,
    Substring,
}

CastExpr: CastExpr = {
    CAST LEFT_PAREN <ex:Expression> AS <t:Type> RIGHT_PAREN =>
        CastExpr {expr: Box::new(ex), to: t, on_null: None, on_error: None},
    CAST LEFT_PAREN <ex:Expression> AS <t:Type> <n:(COMMA <Expression> ON NULL)> RIGHT_PAREN =>
        CastExpr {expr: Box::new(ex), to: t, on_null: Some(Box::new(n)), on_error: None},
    CAST LEFT_PAREN <ex:Expression> AS <t:Type> <e:(COMMA <Expression> ON ERROR)> RIGHT_PAREN =>
        CastExpr {expr: Box::new(ex), to: t, on_null: None, on_error: Some(Box::new(e))},
    CAST LEFT_PAREN <ex:Expression> AS <t:Type>
        <n:(COMMA <Expression> ON NULL)>
        <e:(COMMA <Expression> ON ERROR)> RIGHT_PAREN =>
            CastExpr {
                expr: Box::new(ex), to: t,
                on_null: Some(Box::new(n)),
                on_error: Some(Box::new(e))
            },
}

CurrentTimestamp: FunctionExpr = {
    CURRENT_TIMESTAMP <e:(LEFT_PAREN <Expression> RIGHT_PAREN)?> => match e {
        Some(e) => FunctionExpr {
            function: FunctionName::CurrentTimestamp,
            args: FunctionArguments::Args(vec![e]),
            set_quantifier: None,
        },
        None => FunctionExpr {
            function: FunctionName::CurrentTimestamp,
            args: FunctionArguments::Args(vec![]),
            set_quantifier: None,
        },
    }
}

FunctionEscape: Expression = {
    LEFT_CURLY_BRACE <i:ID> <f:FunctionExpr> RIGHT_CURLY_BRACE =>? {
        if i.to_lowercase() != "fn" {
            Err(ParseError::from(format!("function escape must use `fn`, found:`{i}`")))
        } else {
            Ok(Expression::Function(f))
        }
    },
}

LiteralEscape: Expression = {
    LEFT_CURLY_BRACE <i:ID> <s:StringConstructor> RIGHT_CURLY_BRACE =>? {
        if i.to_lowercase() != "ts" {
            Err(ParseError::from(format!("timestamp escape sequence must use `ts`, found:`{i}`")))
        } else {
            Ok(Expression::Cast(CastExpr {
                expr: Box::new(Expression::StringConstructor(s.to_string())),
                to: Type::Datetime,
                on_null: None,
                on_error: None
            }))
        }
    },
}

Extract: ExtractExpr = {
  EXTRACT LEFT_PAREN <i:ID> FROM <e:Expression> RIGHT_PAREN =>? Ok(ExtractExpr {
    extract_spec: i.try_into()?,
    arg: Box::new(e),
  }),
}

// This production uses `Tier6Expr` instead of `Expression IN Expression` to avoid
// shift-reduce conflicts with IN predicate subqueries.
Position: FunctionExpr = {
  POSITION LEFT_PAREN <e:Tier6Expr> RIGHT_PAREN =>? parse_position_func(*e),
}

Substring: FunctionExpr = {
    SUBSTRING LEFT_PAREN <e1:Expression> FROM <e2:Expression> <e3:(FOR <Expression>)?> RIGHT_PAREN =>
        match e3 {
            Some(e3) => FunctionExpr {
                function: FunctionName::Substring,
                args: FunctionArguments::Args(vec![e1, e2, e3]),
                set_quantifier: None,
            },
            None => FunctionExpr {
                function:FunctionName::Substring,
                args: FunctionArguments::Args(vec![e1,e2]),
                set_quantifier: None,
            },
        },
  SUBSTRING LEFT_PAREN <e1:Expression> COMMA <e2:Expression> <e3:(COMMA <Expression>)?> RIGHT_PAREN =>
    match e3 {
        Some(e3) => FunctionExpr {
            function: FunctionName::Substring,
            args: FunctionArguments::Args(vec![e1, e2, e3]),
            set_quantifier: None,
        },
        None => FunctionExpr{
            function: FunctionName::Substring,
            args: FunctionArguments::Args(vec![e1, e2]),
            set_quantifier: None,
        },
    }
}

TrimSpec: TrimSpec = {
  LEADING => TrimSpec::Leading,
  TRAILING => TrimSpec::Trailing,
  BOTH => TrimSpec::Both,
}

Trim: TrimExpr = {
  TRIM LEFT_PAREN <e:Expression> RIGHT_PAREN =>
    TrimExpr {
        trim_spec: TrimSpec::Both,
        trim_chars: Box::new(Expression::StringConstructor(" ".into())),
        arg: Box::new(e),
    },
  TRIM LEFT_PAREN <s:TrimSpec> FROM <e:Expression> RIGHT_PAREN =>
    TrimExpr {
        trim_spec: s,
        trim_chars: Box::new(Expression::StringConstructor(" ".into())),
        arg: Box::new(e),
    },
  TRIM LEFT_PAREN <substr:Expression> FROM <e:Expression> RIGHT_PAREN =>
    TrimExpr {
        trim_spec: TrimSpec::Both,
        trim_chars: Box::new(substr),
        arg: Box::new(e),
    },
  TRIM LEFT_PAREN <s:TrimSpec> <substr:Expression> FROM <e:Expression> RIGHT_PAREN =>
    TrimExpr {
        trim_spec: s,
        trim_chars: Box::new(substr),
        arg: Box::new(e),
    },
}

DocumentExpr: Expression = {
  LEFT_CURLY_BRACE <l:CommaStar<(<StringConstructor> COLON <Expression>)>> RIGHT_CURLY_BRACE =>
  		Expression::Document(l.into_iter().map(|(k,v)| DocumentPair{key: k, value: v}).collect())
}

// This production uses Tier13Expr instead of Expression to avoid shift-reduce conflicts
// with other Expressions. We're specifically using Tier13Expr because the LHS cannot be
// a Binary or Unary expr.
AccessExpr: AccessExpr = {
  <e:Tier13Expr> LEFT_BRACKET <s:Expression> RIGHT_BRACKET => AccessExpr{expr:e, subfield:Box::new(s)},
}

Identifier: String = {
  ID => <>.to_string(),
  DELIMITED_IDENT_QUOTE => process_delimited_ident(<>),
  DELIMITED_IDENT_BACKTICK => process_delimited_ident(<>),
};

// A tuple is a grouping of >= 1 elements, like (A), (A,B), (A,B,C), etc.
// We use a `SingleTupleRewritePass` to unwrap each parenthesized
// expression that is not semantically a tuple.
Tuple: Expression = {
  LEFT_PAREN <CommaPlus<Expression>> RIGHT_PAREN => Expression::Tuple(<>)
}

BinaryTier<Op,NextTier>: Box<Expression> = {
  <left:BinaryTier<Op,NextTier>> <op:Op> <right:NextTier> => Box::new(Expression::Binary(BinaryExpr{<>})),
  NextTier
};

UnaryTier<Op,NextTier>: Box<Expression> = {
  <op:Op> <expr:UnaryTier<Op, NextTier>> => Box::new(Expression::Unary(UnaryExpr{<>})),
  NextTier
};

// ComparisonTier parses (1) binary expressions that include a comparison operator and
// (2) subquery comparison expressions. We need to declare an order of precedence for
// these expressions to avoid shift-reduce conflicts with CompareOps.
ComparisonTier<Expr, NextTier>: Box<Expression> = {
  <left:ComparisonTier<Expr, NextTier>> <op:CompareOp> <right:NextTier> => Box::new(Expression::Binary(BinaryExpr{
        left,
        op: BinaryOp::Comparison(op),
        right,
    })),
  <expr:ComparisonTier<Expr, NextTier>> <op:CompareOp> <quantifier:SubqueryQuantifier> <subquery:SubqueryExpr>
     => Box::new(Expression::SubqueryComparison(SubqueryComparisonExpr{<>})),
  NextTier
};

// The following tiers were created in order to avoid shift-reduce conflicts with productions
// that start with <Expression>.

// TypeTier parses (1) type conversion expressions that use the shorthand `::` notation and
// (2) type assertion expressions.
TypeTier<Expr, NextTier>: Box<Expression> = {
    <e:TypeTier<Expr, NextTier>> DOUBLE_COLON <t:Type> =>
        Box::new(Expression::Cast(CastExpr {
            expr: e,
            to: t,
            on_null: None,
            on_error: None,
        })),
    <e:TypeTier<Expr, NextTier>> TYPE_ASSERTION <t:Type> =>
        Box::new(Expression::TypeAssertion(TypeAssertionExpr{expr:e, target_type:t})),
    NextTier,
};

BetweenTier<Expr, NextTier>: Box<Expression> = {
  <e1:BetweenTier<Expr, NextTier>> BETWEEN <e2:NextTier> AND <e3:NextTier> =>
      Box::new(Expression::Between(BetweenExpr {
          arg: e1,
          min: e2,
          max: e3,
      })),
  <e1:BetweenTier<Expr, NextTier>> <n:NotOp> BETWEEN <e2:NextTier> AND <e3:NextTier> =>
      Box::new(Expression::Unary(UnaryExpr {
          op: UnaryOp::Not,
          expr: Box::new(Expression::Between(BetweenExpr {
              arg: e1,
              min: e2,
              max: e3,
          })),
      })),
  NextTier,
}

SubpathTier<Expr, NextTier>: Box<Expression> = {
  <expr:SubpathTier<Expr, NextTier>> DOT <subpath:Identifier> => Box::new(Expression::Subpath(SubpathExpr{<>})),
  NextTier
};

IsTier<Expression,NextTier>: Box<Expression> = {
  <e:IsTier<Expression,NextTier>> IS <t:Type> => Box::new(Expression::Is(IsExpr{expr:e, target_type:TypeOrMissing::Type(t)})),
  <e:IsTier<Expression,NextTier>> IS NOT <t:Type> => Box::new(Expression::Unary(UnaryExpr{op:UnaryOp::Not, expr:Box::new(Expression::Is(IsExpr{expr:e, target_type:TypeOrMissing::Type(t)}))})),
  <e:IsTier<Expression,NextTier>> IS MISSING => Box::new(Expression::Is(IsExpr{expr:e, target_type:TypeOrMissing::Missing})),
  <e:IsTier<Expression,NextTier>> IS NOT MISSING => Box::new(Expression::Unary(UnaryExpr{op:UnaryOp::Not, expr:Box::new(Expression::Is(IsExpr{expr:e, target_type:TypeOrMissing::Missing}))})),
  <e:IsTier<Expression,NextTier>> IS NUMBER => Box::new(Expression::Is(IsExpr{expr:e, target_type:TypeOrMissing::Number})),
  <e:IsTier<Expression,NextTier>> IS NOT NUMBER => Box::new(Expression::Unary(UnaryExpr{op:UnaryOp::Not, expr:Box::new(Expression::Is(IsExpr{expr:e, target_type:TypeOrMissing::Number}))})),

  NextTier
}

LikeTier<Expr, NextTier>: Box<Expression> = {
  <e1:LikeTier<Expr, NextTier>> LIKE <e2:NextTier> <s:(ESCAPE <StringConstructor>)?> =>? parse_like_expr(e1, e2, s),
  <e1:LikeTier<Expr, NextTier>> NOT_LIKE <e2:NextTier> <s:(ESCAPE <StringConstructor>)?> =>? Ok(Box::new(Expression::Unary(UnaryExpr{op:UnaryOp::Not, expr:parse_like_expr(e1, e2, s)?}))),
  NextTier,
}

Tier1Expr = BinaryTier<OrOp, Tier2Expr>;
Tier2Expr = BinaryTier<AndOp, Tier3Expr>;
Tier3Expr = UnaryTier<NotOp, Tier4Expr>;
Tier4Expr = IsTier<Expression, Tier5Expr>;
Tier5Expr = LikeTier<Expression, Tier6Expr>;
Tier6Expr = BinaryTier<InOp, Tier7Expr>;
Tier7Expr = BetweenTier<Expression, Tier8Expr>;
Tier8Expr = ComparisonTier<Expression, Tier9Expr>;
Tier9Expr = BinaryTier<ConcatOp, Tier10Expr>;
Tier10Expr = BinaryTier<AddOp, Tier11Expr>;
Tier11Expr = BinaryTier<MulOp, Tier12Expr>;
Tier12Expr = UnaryTier<UnaryOp, Tier13Expr>;
Tier13Expr = TypeTier<Expression, Tier14Expr>;
Tier14Expr = SubpathTier<Expression, BottomExpr>;

BottomExpr: Box<Expression> = {
  AccessExpr => Box::new(Expression::Access(<>)),
  ArrayExpr => Box::new(Expression::Array(<>)),
  CaseExpr => Box::new(Expression::Case(<>)),
  CastExpr => Box::new(Expression::Cast(<>)),
  DocumentExpr => Box::new(<>),
  ExistsExpr => Box::new(<>),
  Trim => Box::new(Expression::Trim(<>)),
  Extract => Box::new(Expression::Extract(<>)),
  FunctionExpr => Box::new(Expression::Function(<>)),
  Identifier => Box::new(Expression::Identifier(<>)),
  Literal => Box::new(Expression::Literal(<>)),
  StringConstructor => Box::new(Expression::StringConstructor(<>)),
  SubqueryExpr => Box::new(Expression::Subquery(<>)),
  Tuple => Box::new(<>),
  FunctionEscape => Box::new(<>),
  LiteralEscape => Box::new(<>),
};

InOp: BinaryOp = {
  IN => BinaryOp::In,
  NOT_IN => BinaryOp::NotIn,
}

OrOp: BinaryOp = {
  OR => BinaryOp::Or,
};

AndOp: BinaryOp = {
  AND  => BinaryOp::And,
};

CompareOp: ComparisonOp = {
  EQ => ComparisonOp::Eq,
  NEQ => ComparisonOp::Neq,
  LTE => ComparisonOp::Lte,
  GTE => ComparisonOp::Gte,
  LT  => ComparisonOp::Lt,
  GT  => ComparisonOp::Gt,
}

BoolOp: BinaryOp = {
  OrOp,
  AndOp,
  CompareOp => BinaryOp::Comparison(<>),
}

ConcatOp: BinaryOp = {
  CONCAT => BinaryOp::Concat,
}

AddOp: BinaryOp = {
  ADD => BinaryOp::Add,
  SUB => BinaryOp::Sub,
};

MulOp: BinaryOp = {
  STAR => BinaryOp::Mul,
  DIV => BinaryOp::Div,
};

NotOp: UnaryOp = {
  NOT => UnaryOp::Not
}

UnaryOp: UnaryOp = {
  ADD => UnaryOp::Pos,
  SUB => UnaryOp::Neg
}

Literal: Literal = {
  NULL => Literal::Null,
  Boolean => Literal::Boolean(<>),
  Integer,
  Double,
}

Boolean: bool = {
  TRUE => true,
  FALSE => false,
}

Integer: Literal = {
  INT =>? {
    i64::from_str(<>).map(|long| {
      if let Ok(int) = i32::try_from(long) {
        Literal::Integer(int)
      } else {
        Literal::Long(long)
      }
    }).or(Err(ParseError::from("failed to parse integer".to_string())))
  }
}

Double: Literal = {
  DOUBLE =>? {
     let d: Result<f64, ParseError<usize, Token, String>> =
       f64::from_str(<>)
           .map_err(|_| ParseError::from("failed to convert number to f64".to_string()));
     match d {
       Ok(x) => Ok(Literal::Double(x)),
       Err(x) => Err(x)
     }
   },
}

Unsigned32: u32 = {
  INT =>? {
    let u: Result<u32, ParseError<usize, Token, String>> =
      u32::from_str(<>)
          .map_err(|_| ParseError::from("failed to convert number to u32".to_string()));
    match u {
      Ok(x) => Ok(x),
      Err(x) => Err(x)
    }
  },
}

StringConstructor: String = {
  <s:STRING> => s[1..s.len() - 1].replace("\'\'", "\'")
}

Type: Type = {
  BooleanType,
  DatetimeType,
  Decimal128Type,
  DoubleType,
  Int32Type,
  StringType,
  DOCUMENT => Type::Document,
  ARRAY => Type::Array,
  BINDATA => Type::BinData,
  UNDEFINED => Type::Undefined,
  OBJECTID => Type::ObjectId,
  NULL => Type::Null,
  REGEX => Type::RegularExpression,
  DBPOINTER => Type::DbPointer,
  JAVASCRIPT => Type::Javascript,
  SYMBOL => Type::Symbol,
  JAVASCRIPT_WITH_SCOPE => Type::JavascriptWithScope,
  BSON_TIMESTAMP => Type::Timestamp,
  LONG => Type::Int64,
  MINKEY => Type::MinKey,
  MAXKEY => Type::MaxKey,
  DATE => Type::Date,
  TIME => Type::Time,
}

Int32Type: Type = {
  INT_TYPE => Type::Int32,
  INTEGER => Type::Int32,
  SMALLINT => Type::Int32,
}

Decimal128Type: Type = {
  DECIMAL (LEFT_PAREN Unsigned32 (COMMA Unsigned32)? RIGHT_PAREN)? => Type::Decimal128,
  DEC (LEFT_PAREN Unsigned32 (COMMA Unsigned32)? RIGHT_PAREN)? => Type::Decimal128,
  NUMERIC (LEFT_PAREN Unsigned32 (COMMA Unsigned32)? RIGHT_PAREN)? => Type::Decimal128,
}

DoubleType: Type = {
  DOUBLE_TYPE PRECISION? => Type::Double,
  REAL => Type::Double,
  FLOAT (LEFT_PAREN Unsigned32 RIGHT_PAREN)? => Type::Double,
}

StringType: Type = {
  STRING_TYPE => Type::String,
  VARCHAR (LEFT_PAREN Unsigned32 RIGHT_PAREN)? => Type::String,
  CHAR (LEFT_PAREN Unsigned32 RIGHT_PAREN)? => Type::String,
  CHARACTER (LEFT_PAREN Unsigned32 RIGHT_PAREN)? => Type::String,
  CHAR_VARYING (LEFT_PAREN Unsigned32 RIGHT_PAREN)? => Type::String,
  CHARACTER_VARYING (LEFT_PAREN Unsigned32 RIGHT_PAREN)? => Type::String,
}

BooleanType: Type = {
  BOOL => Type::Boolean,
  BIT => Type::Boolean,
  BOOLEAN => Type::Boolean,
}

DatetimeType: Type = {
  BSON_DATE => Type::Datetime,
  TIMESTAMP => Type::Datetime,
}

// CommaStar matches <T>* (0 or more instances of type T) separated by commas.
CommaStar<T>: Vec<T> = {
    <v:(<T> COMMA)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// CommaPlus matches <T>+ (1 or more instances of type T) separated by commas.
CommaPlus<T>: Vec<T> = {
  <v:(<T> COMMA)*> <e:T> => {
    let mut v = v;
    v.push(e);
    v
  }
};

// PeriodPlus matches <T>+ (1 or more instances of type T) separated by periods.
PeriodPlus<T>: Vec<T> = { // (1)
    <v:(<T> DOT)*> <e:T> => { // (2)
       let mut v = v;
       v.push(e);
       v
    }
};

// BracketList matches [<T>]+ (1 or more instances of type T) surrounded by brackets and separated
// by whitespace*.
BracketList<T>: Vec<T> = {
    <v:(LEFT_BRACKET <T> RIGHT_BRACKET)*> LEFT_BRACKET <e:T> RIGHT_BRACKET => { // (2)
       let mut v = v;
       v.push(e);
       v
    }
};


match {
  r"\s*" => { },
  r"--[^\n\r]*[\n\r]*" => { },
  r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
  r"(?i)select" => SELECT,
  "+" => ADD,
  "=>" => ARROW,
  ":" => COLON,
  "," => COMMA,
  "||" => CONCAT,
  "/" => DIV,
  "." => DOT,
  ".*" => DOT_STAR,
  "::" => DOUBLE_COLON,
  "=" => EQ,
  ">" => GT,
  ">=" => GTE,
  "[" => LEFT_BRACKET,
  "{" => LEFT_CURLY_BRACE,
  "(" => LEFT_PAREN,
  "<" => LT,
  "<=" => LTE,
  r"(<>)|(!=)" => NEQ,
  "]" => RIGHT_BRACKET,
  "}" => RIGHT_CURLY_BRACE,
  ")" => RIGHT_PAREN,
  "*" => STAR,
  "-" => SUB,
  "::!" => TYPE_ASSERTION,
  r"(?i)aggregate" => AGGREGATE,
  r"(?i)all" => ALL,
  r"(?i)and" => AND,
  r"(?i)any" => ANY,
  r"(?i)array" => ARRAY,
  r"(?i)as" => AS,
  r"(?i)asc" => ASC,
  r"(?i)between" => BETWEEN,
  r"(?i)bindata" => BINDATA,
  r"(?i)bit" => BIT,
  r"(?i)bool" => BOOL,
  r"(?i)boolean" => BOOLEAN,
  r"(?i)both" => BOTH,
  r"(?i)bson_date" => BSON_DATE,
  r"(?i)bson_timestamp" => BSON_TIMESTAMP,
  r"(?i)by" => BY,
  r"(?i)case" => CASE,
  r"(?i)cast" => CAST,
  r"(?i)char" => CHAR,
  r"(?i)character" => CHARACTER,
  r"(?i)char varying" => CHAR_VARYING,
  r"(?i)character varying" => CHARACTER_VARYING,
  r"(?i)cross" => CROSS,
  r"(?i)current_timestamp" => CURRENT_TIMESTAMP,
  r"(?i)date" => DATE,
  r"(?i)dbpointer" => DBPOINTER,
  r"(?i)dec" => DEC,
  r"(?i)decimal" => DECIMAL,
  r"(?i)depth" => DEPTH,
  r"(?i)desc" => DESC,
  r"(?i)distinct" => DISTINCT,
  r"(?i)document" => DOCUMENT,
  r"(?i)double" => DOUBLE_TYPE,
  r"(?i)else" => ELSE,
  r"(?i)end" => END,
  r"(?i)error" => ERROR,
  r"(?i)escape" => ESCAPE,
  r"(?i)exists" => EXISTS,
  r"(?i)extract" => EXTRACT,
  r"(?i)false" => FALSE,
  r"(?i)fetch\s+(first|next)" => FETCH_FIRST,
  r"(?i)flatten" => FLATTEN,
  r"(?i)float" => FLOAT,
  r"(?i)for" => FOR,
  r"(?i)from" => FROM,
  r"(?i)group" => GROUP,
  r"(?i)having" => HAVING,
  r"(?i)in" => IN,
  r"(?i)index" => INDEX,
  r"(?i)inner" => INNER,
  r"(?i)int" => INT_TYPE,
  r"(?i)integer" => INTEGER,
  r"(?i)is" => IS,
  r"(?i)javascript" => JAVASCRIPT,
  r"(?i)javascriptwithscope" => JAVASCRIPT_WITH_SCOPE,
  r"(?i)join" => JOIN,
  r"(?i)leading" => LEADING,
  r"(?i)like" => LIKE,
  r"(?i)left" => LEFT,
  r"(?i)limit" => LIMIT,
  r"(?i)long" => LONG,
  r"(?i)maxkey" => MAXKEY,
  r"(?i)minkey" => MINKEY,
  r"(?i)missing" => MISSING,
  r"(?i)natural" => NATURAL,
  r"(?i)not" => NOT,
  r"(?i)not\s+in" => NOT_IN,
  r"(?i)not\s+like" => NOT_LIKE,
  r"(?i)null" => NULL,
  r"(?i)numeric" => NUMERIC,
  r"(?i)number" => NUMBER,
  r"(?i)objectid" => OBJECTID,
  r"(?i)offset" => OFFSET,
  r"(?i)on" => ON,
  r"(?i)or" => OR,
  r"(?i)order" => ORDER,
  r"(?i)outer" => OUTER,
  r"(?i)paths?" => PATH,
  r"(?i)position" => POSITION,
  r"(?i)precision" => PRECISION,
  r"(?i)real" => REAL,
  r"(?i)regex" => REGEX,
  r"(?i)right" => RIGHT,
  r"(?i)rows?\s+only" => ROWS_ONLY,
  r"(?i)separator" => SEPARATOR,
  r"(?i)smallint" => SMALLINT,
  r"(?i)some" => SOME,
  r"(?i)string" => STRING_TYPE,
  r"(?i)substring" => SUBSTRING,
  r"(?i)symbol" => SYMBOL,
  r"(?i)then" => THEN,
  r"(?i)time" => TIME,
  r"(?i)timestamp" => TIMESTAMP,
  r"(?i)trailing" => TRAILING,
  r"(?i)trim" => TRIM,
  r"(?i)true" => TRUE,
  r"(?i)undefined" => UNDEFINED,
  r"(?i)union" => UNION,
  r"(?i)unwind" => UNWIND,
  r"(?i)values?" => VALUE,
  r"(?i)varchar" => VARCHAR,
  r"(?i)when" => WHEN,
  r"(?i)where" => WHERE,
  r"(?i)with" => WITH,
  r"[0-9]+" => INT,
  r#"'([^\x00']|'')*'"# => STRING,
} else {
  r"[A-Za-z_][A-Za-z0-9_]*" => ID,
  r#""([^\x00"]|"")*""# => DELIMITED_IDENT_QUOTE,
  r"`([^\x00`]|``)*`" => DELIMITED_IDENT_BACKTICK,
  r"([0-9]*\.[0-9]+|[0-9]+(\.)?)([Ee](\+|\-)?[0-9]+)?([0-9]+)?" => DOUBLE,
} else {
  // NUM_PREFIXED_IDENT conflicts with the keywords in the match block, and NUM_PREFIXED_COMPOUND_IDENT
  // conflicts with DOUBLE in the else block.
  r"[0-9]*[A-Za-z_][A-Za-z0-9_]*" => NUM_PREFIXED_IDENT,
  r"[0-9]+\.[A-Za-z][A-Za-z0-9_]*" => NUM_PREFIXED_COMPOUND_IDENT,
}
